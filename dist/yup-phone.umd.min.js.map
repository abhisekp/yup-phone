{"version":3,"file":"yup-phone.umd.min.js","sources":["../node_modules/libphonenumber-js/min/exports/withMetadataArgument.js","../node_modules/libphonenumber-js/es6/tools/semver-compare.js","../node_modules/libphonenumber-js/es6/metadata.js","../node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js","../node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js","../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/parseDigits.js","../node_modules/libphonenumber-js/es6/helpers/mergeArrays.js","../node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js","../node_modules/libphonenumber-js/es6/isPossible.js","../node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js","../node_modules/libphonenumber-js/es6/helpers/getNumberType.js","../node_modules/libphonenumber-js/es6/isValid.js","../node_modules/libphonenumber-js/es6/helpers/getPossibleCountriesForNumber.js","../node_modules/libphonenumber-js/es6/format.js","../node_modules/libphonenumber-js/es6/helpers/RFC3966.js","../node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js","../node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js","../node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js","../node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","../node_modules/libphonenumber-js/es6/constants.js","../node_modules/libphonenumber-js/es6/helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js","../node_modules/libphonenumber-js/es6/helpers/extractPhoneContext.js","../node_modules/libphonenumber-js/es6/parse.js","../node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js","../node_modules/libphonenumber-js/es6/helpers/getCountryByNationalNumber.js","../node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberWithError.js","../node_modules/libphonenumber-js/es6/normalizeArguments.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberWithError_.js","../node_modules/libphonenumber-js/min/exports/parsePhoneNumberWithError.js","../node_modules/libphonenumber-js/es6/legacy/isValidNumberForRegion.js","../node_modules/libphonenumber-js/es6/legacy/isValidNumberForRegion_.js","../node_modules/libphonenumber-js/index.es6.exports/isValidNumberForRegion.js","../node_modules/libphonenumber-js/metadata.min.json.js","../node_modules/libphonenumber-js/es6/ParseError.js","../node_modules/libphonenumber-js/es6/PhoneNumber.js","../src/yup-phone.ts"],"sourcesContent":["// Importing from a \".js\" file is a workaround for Node.js \"ES Modules\"\r\n// importing system which is even uncapable of importing \"*.json\" files.\r\nimport metadata from '../../metadata.min.json.js'\r\n\r\nexport default function withMetadataArgument(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\nexport default function (a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n}\n//# sourceMappingURL=semver-compare.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport compare from './tools/semver-compare.js'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\nvar CALLING_CODE_REG_EXP = /^\\d+$/;\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata = /*#__PURE__*/function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n      // The test case could be found by searching for \"nonGeographical\".\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      // Supports just passing `callingCode` as the first argument.\n      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\n        callingCode = countryCode;\n        countryCode = null;\n      }\n\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        // In that metadata, there was no concept of \"non-geographic\" metadata\n        // so metadata for `001` country code was stored along with other countries.\n        // The test case can be found by searching for:\n        // \"should work around `nonGeographic` metadata not existing\".\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      return this.selectNumberingPlan(callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexport { Metadata as default };\n\nvar NumberingPlan = /*#__PURE__*/function () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    } // Is always present.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    } // Is only present when a country supports multiple IDD prefixes.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    } // \"possible length\" data is always present in Google's metadata.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n\n  return NumberingPlan;\n}();\n\nvar Format = /*#__PURE__*/function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\n      // when `national_prefix_formatting_rule` is not present.\n      // So, `true` or `false` are returned explicitly here, so that\n      // `0` number isn't returned.\n      ? true : false;\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type = /*#__PURE__*/function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error(\"Unknown country: \".concat(country));\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}\n\nfunction setVersion(metadata) {\n  var version = metadata.version;\n\n  if (typeof version === 'number') {\n    this.v1 = version === 1;\n    this.v2 = version === 2;\n    this.v3 = version === 3;\n    this.v4 = version === 4;\n  } else {\n    if (!version) {\n      this.v1 = true;\n    } else if (compare(version, V3) === -1) {\n      this.v2 = true;\n    } else if (compare(version, V4) === -1) {\n      this.v3 = true;\n    } else {\n      this.v4 = true;\n    }\n  }\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }\n//# sourceMappingURL=metadata.js.map","import { VALID_DIGITS } from '../../constants.js'; // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext=';\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\n\nvar getExtensionDigitsPattern = function getExtensionDigitsPattern(maxLength) {\n  return \"([\".concat(VALID_DIGITS, \"]{1,\").concat(maxLength, \"})\");\n};\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\n\n\nexport default function createExtensionPattern(purpose) {\n  // We cap the maximum length of an extension based on the ambiguity of the way\n  // the extension is prefixed. As per ITU, the officially allowed length for\n  // extensions is actually 40, but we don't support this since we haven't seen real\n  // examples and this introduces many false interpretations as the extension labels\n  // are not standardized.\n\n  /** @type {string} */\n  var extLimitAfterExplicitLabel = '20';\n  /** @type {string} */\n\n  var extLimitAfterLikelyLabel = '15';\n  /** @type {string} */\n\n  var extLimitAfterAmbiguousChar = '9';\n  /** @type {string} */\n\n  var extLimitWhenNotSure = '6';\n  /** @type {string} */\n\n  var possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\xA0\\\\t,]*\"; // Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\n\n  /** @type {string} */\n\n  var possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\";\n  /** @type {string} */\n\n  var optionalExtnSuffix = \"#?\"; // Here the extension is called out in more explicit way, i.e mentioning it obvious\n  // patterns like \"ext.\".\n\n  /** @type {string} */\n\n  var explicitExtLabels = \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\"; // One-character symbols that can be used to indicate an extension, and less\n  // commonly used or more ambiguous extension labels.\n\n  /** @type {string} */\n\n  var ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\"; // When extension is not separated clearly.\n\n  /** @type {string} */\n\n  var ambiguousSeparator = \"[- ]+\"; // This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\n  // comma as extension label may have it.\n\n  /** @type {string} */\n\n  var possibleSeparatorsNumberExtLabelNoComma = \"[ \\xA0\\\\t]*\"; // \",,\" is commonly used for auto dialling the extension when connected. First\n  // comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\n  // not repeat it here. Semi-colon works in Iphone and Android also to pop up a\n  // button with the extension number following.\n\n  /** @type {string} */\n\n  var autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\n  /** @type {string} */\n\n  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\n  /** @type {string} */\n\n  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\n  /** @type {string} */\n\n  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + \"(?:,)+\" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix; // The first regular expression covers RFC 3966 format, where the extension is added\n  // using \";ext=\". The second more generic where extension is mentioned with explicit\n  // labels like \"ext:\". In both the above cases we allow more numbers in extension than\n  // any other extension labels. The third one captures when single character extension\n  // labels or less commonly used labels are used. In such cases we capture fewer\n  // extension digits in order to reduce the chance of falsely interpreting two\n  // numbers beside each other as a number + extension. The fourth one covers the\n  // special case of American numbers where the extension is written with a hash\n  // at the end, such as \"- 503#\". The fifth one is exclusively for extension\n  // autodialling formats which are used when dialling and in this case we accept longer\n  // extensions. The last one is more liberal on the number of commas that acts as\n  // extension labels, so we have a strict cap on the number of digits in such extensions.\n\n  return rfcExtn + \"|\" + explicitExtn + \"|\" + ambiguousExtn + \"|\" + americanStyleExtnWithSuffix + \"|\" + autoDiallingExtn + \"|\" + onlyCommasExtn;\n}\n//# sourceMappingURL=createExtensionPattern.js.map","import createExtensionPattern from './createExtensionPattern.js'; // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nexport default function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var numberWithoutExtension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i]) {\n      return {\n        number: numberWithoutExtension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}\n//# sourceMappingURL=extractExtension.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { parseDigit } from './helpers/parseDigits.js';\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\n\nexport default function parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n\n  return result;\n}\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\n\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (prevParsedCharacters) {\n      return;\n    }\n\n    return '+';\n  } // Allow digits.\n\n\n  return parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nexport default function parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}\n//# sourceMappingURL=parseDigits.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport default function mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = _createForOfIteratorHelperLoose(b), _step; !(_step = _iterator()).done;) {\n    var element = _step.value;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b) {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=mergeArrays.js.map","import mergeArrays from './mergeArrays.js';\nexport default function checkNumberLength(nationalNumber, metadata) {\n  return checkNumberLengthForType(nationalNumber, undefined, metadata);\n} // Checks whether a number is possible for the country based on its length.\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths) {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // } else {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n    return 'INVALID_LENGTH';\n  }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=checkNumberLength.js.map","import Metadata from './metadata.js';\nimport checkNumberLength from './helpers/checkNumberLength.js';\n/**\r\n * Checks if a phone number is \"possible\" (basically just checks its length).\r\n *\r\n * isPossible(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  } // Old metadata (< 1.0.18) had no \"possible length\" data.\n\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}\n//# sourceMappingURL=isPossible.js.map","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nexport default function matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n//# sourceMappingURL=matchesEntirely.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.\n    // For example, for \"US\" country.\n    // Old metadata (< `1.0.18`) had a specific \"types\" data structure\n    // that happened to be `undefined` for `MOBILE` in that case.\n    // Newer metadata (>= `1.0.18`) has another data structure that is\n    // not `undefined` for `MOBILE` in that case (it's just an empty array).\n    // So this `if` is just for backwards compatibility with old metadata.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _iterator = _createForOfIteratorHelperLoose(NON_FIXED_LINE_PHONE_TYPES), _step; !(_step = _iterator()).done;) {\n    var type = _step.value;\n\n    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\n      return type;\n    }\n  }\n}\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n}\n//# sourceMappingURL=getNumberType.js.map","import Metadata from './metadata.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport getNumberType from './helpers/getNumberType.js';\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * isValid(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nexport default function isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata);\n  /**\r\n   * Checks if a phone number is \"possible\" (basically just checks its length).\r\n   *\r\n   * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n   * @param  {object} [options]\r\n   * @param  {object} metadata\r\n   * @return {string}\r\n   */\n\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(nationalNumber, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=isValid.js.map","import Metadata from '../metadata.js';\n/**\r\n * Returns a list of countries that the phone number could potentially belong to.\r\n * @param  {string} callingCode — Calling code.\r\n * @param  {string} nationalNumber — National (significant) number.\r\n * @param  {object} metadata — Metadata.\r\n * @return {string[]} A list of possible countries.\r\n */\n\nexport default function getPossibleCountriesForNumber(callingCode, nationalNumber, metadata) {\n  var _metadata = new Metadata(metadata);\n\n  var possibleCountries = _metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return [];\n  }\n\n  return possibleCountries.filter(function (country) {\n    return couldNationalNumberBelongToCountry(nationalNumber, country, metadata);\n  });\n}\n\nfunction couldNationalNumberBelongToCountry(nationalNumber, country, metadata) {\n  var _metadata = new Metadata(metadata);\n\n  _metadata.selectNumberingPlan(country);\n\n  if (_metadata.numberingPlan.possibleLengths().indexOf(nationalNumber.length) >= 0) {\n    return true;\n  }\n\n  return false;\n}\n//# sourceMappingURL=getPossibleCountriesForNumber.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js';\nimport Metadata, { getCountryCallingCode } from './metadata.js';\nimport getIddPrefix from './helpers/getIddPrefix.js';\nimport { formatRFC3966 } from './helpers/RFC3966.js';\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  }\n};\n/**\r\n * Formats a phone number.\r\n *\r\n * format(phoneNumberInstance, 'INTERNATIONAL', { ..., v2: true }, metadata)\r\n * format(phoneNumberInstance, 'NATIONAL', { ..., v2: true }, metadata)\r\n *\r\n * format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', { ... }, metadata)\r\n * format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {string} format\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n\n      number = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n\n    case 'RFC3966':\n      return formatRFC3966({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n    // For reference, here's Google's IDD formatter:\n    // https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\n    // Not saying that this IDD formatter replicates it 1:1, but it seems to work.\n    // Who would even need to format phone numbers in IDD format anyway?\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);\n      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);\n\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n}\n\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return formatNationalNumberUsingFormat(number, format, {\n    useInternationalFormat: formatAs === 'INTERNATIONAL',\n    withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,\n    carrierCode: carrierCode,\n    metadata: metadata\n  });\n}\n\nexport function chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = _createForOfIteratorHelperLoose(availableFormats), _step; !(_step = _iterator()).done;) {\n    var format = _step.value;\n\n    // Validate leading digits.\n    // The test case for \"else path\" could be found by searching for\n    // \"format.leadingDigitsPatterns().length === 0\".\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (matchesEntirely(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {\n  var fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata); // When calling within the same country calling code.\n\n  if (fromCountryCallingCode === countryCallingCode) {\n    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata); // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n\n    if (countryCallingCode === '1') {\n      return countryCallingCode + ' ' + formattedNumber;\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return formattedNumber;\n  }\n\n  var iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata);\n\n  if (iddPrefix) {\n    return \"\".concat(iddPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata));\n  }\n}\n//# sourceMappingURL=format.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport isViablePhoneNumber from './isViablePhoneNumber.js'; // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nexport function parseRFC3966(text) {\n  var number;\n  var ext; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = _createForOfIteratorHelperLoose(text.split(';')), _step; !(_step = _iterator()).done;) {\n    var part = _step.value;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nexport function formatRFC3966(_ref) {\n  var number = _ref.number,\n      ext = _ref.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","import Metadata from '../metadata.js';\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nexport default function getIddPrefix(country, callingCode, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n\n  if (countryMetadata.defaultIDDPrefix()) {\n    return countryMetadata.defaultIDDPrefix();\n  }\n\n  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n}\n//# sourceMappingURL=getIddPrefix.js.map","import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle.js'; // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly. Therefore, we use `\\d`, so that the first\n// group actually used in the pattern will be matched.\n\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexport default function formatNationalNumberUsingFormat(number, format, _ref) {\n  var useInternationalFormat = _ref.useInternationalFormat,\n      withNationalPrefix = _ref.withNationalPrefix,\n      carrierCode = _ref.carrierCode,\n      metadata = _ref.metadata;\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : // This library doesn't use `domestic_carrier_code_formatting_rule`,\n  // because that one is only used when formatting phone numbers\n  // for dialing from a mobile phone, and this is not a dialing library.\n  // carrierCode && format.domesticCarrierCodeFormattingRule()\n  // \t// First, replace the $CC in the formatting rule with the desired carrier code.\n  // \t// Then, replace the $FG in the formatting rule with the first group\n  // \t// and the carrier code combined in the appropriate way.\n  // \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\n  // \t: (\n  // \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\n  // \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\n  // \t\t\t: format.format()\n  // \t)\n  withNationalPrefix && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalFormat) {\n    return applyInternationalSeparatorStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}\n//# sourceMappingURL=formatNationalNumberUsingFormat.js.map","import { VALID_PUNCTUATION } from '../constants.js'; // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\n  return formattedNumber.replace(new RegExp(\"[\".concat(VALID_PUNCTUATION, \"]+\"), 'g'), ' ').trim();\n}\n//# sourceMappingURL=applyInternationalSeparatorStyle.js.map","import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport checkNumberLength from './checkNumberLength.js';\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\nexport default function extractNationalNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(number, metadata),\n      carrierCode = _extractNationalNumbe.carrierCode,\n      nationalNumber = _extractNationalNumbe.nationalNumber;\n\n  if (nationalNumber !== number) {\n    if (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {\n      // Don't strip the national prefix.\n      return {\n        nationalNumber: number\n      };\n    } // Check the national (significant) number length after extracting national prefix and carrier code.\n    // Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature.\n\n\n    if (metadata.possibleLengths()) {\n      // The number remaining after stripping the national prefix and carrier code\n      // should be long enough to have a possible length for the country.\n      // Otherwise, don't strip the national prefix and carrier code,\n      // since the original number could be a valid number.\n      // This check has been copy-pasted \"as is\" from Google's original library:\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      // It doesn't check for the \"possibility\" of the original `number`.\n      // I guess it's fine not checking that one. It works as is anyway.\n      if (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {\n        // Don't strip the national prefix.\n        return {\n          nationalNumber: number\n        };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n} // In some countries, the same digit could be a national prefix\n// or a leading digit of a valid phone number.\n// For example, in Russia, national prefix is `8`,\n// and also `800 555 35 35` is a valid number\n// in which `8` is not a national prefix, but the first digit\n// of a national (significant) number.\n// Same's with Belarus:\n// `82004910060` is a valid national (significant) number,\n// but `2004910060` is not.\n// To support such cases (to prevent the code from always stripping\n// national prefix), a condition is imposed: a national prefix\n// is not extracted when the original number is \"viable\" and the\n// resultant number is not, a \"viable\" national number being the one\n// that matches `national_number_pattern`.\n\nfunction shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {\n  // The equivalent in Google's code is:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\n  if (matchesEntirely(nationalNumberBefore, metadata.nationalNumberPattern()) && !matchesEntirely(nationalNumberAfter, metadata.nationalNumberPattern())) {\n    return false;\n  } // This \"is possible\" national number (length) check has been commented out\n  // because it's superceded by the (effectively) same check done in the\n  // `extractNationalNumber()` function after it calls `shouldHaveExtractedNationalPrefix()`.\n  // In other words, why run the same check twice if it could only be run once.\n  // // Check the national (significant) number length after extracting national prefix and carrier code.\n  // // Fixes a minor \"weird behavior\" bug: https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57\n  // // (Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature).\n  // if (metadata.possibleLengths()) {\n  // \tif (isPossibleIncompleteNationalNumber(nationalNumberBefore, metadata) &&\n  // \t\t!isPossibleIncompleteNationalNumber(nationalNumberAfter, metadata)) {\n  // \t\treturn false\n  // \t}\n  // }\n\n\n  return true;\n}\n\nfunction isPossibleIncompleteNationalNumber(nationalNumber, metadata) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'TOO_SHORT':\n    case 'INVALID_LENGTH':\n      // This library ignores \"local-only\" phone numbers (for simplicity).\n      // See the readme for more info on what are \"local-only\" phone numbers.\n      // case 'IS_POSSIBLE_LOCAL_ONLY':\n      return false;\n\n    default:\n      return true;\n  }\n}\n//# sourceMappingURL=extractNationalNumber.js.map","/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`. Even if a national prefix was extracted, it's not necessarily present in the returned object, so don't rely on its presence in the returned object in order to find out whether a national prefix has been extracted or not.\r\n */\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\n  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode; // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n      // If a `national_prefix_for_parsing` has any \"capturing groups\"\n      // then it means that the national (significant) number is equal to\n      // those \"capturing groups\" transformed via `national_prefix_transform_rule`,\n      // and nothing could be said about the actual national prefix:\n      // what is it and was it even there.\n      // If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\n      // then everything it matches is a national prefix.\n      // To determine whether `national_prefix_for_parsing` matched any\n      // \"capturing groups\", the value of the result of calling `.exec()`\n      // is looked at, and if it has non-undefined values where there're\n      // \"capturing groups\" in the regular expression, then it means\n      // that \"capturing groups\" have been matched.\n      // It's not possible to tell whether there'll be any \"capturing gropus\"\n      // before the matching process, because a `national_prefix_for_parsing`\n      // could exhibit both behaviors.\n\n      var capturedGroupsCount = prefixMatch.length - 1;\n      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];\n\n      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // If there's more than one captured group,\n        // then carrier code is the second one.\n\n        if (capturedGroupsCount > 1) {\n          carrierCode = prefixMatch[1];\n        }\n      } // If there're no \"capturing groups\",\n      // or if there're \"capturing groups\" but no\n      // `national_prefix_transform_rule`,\n      // then just strip the national prefix from the number,\n      // and possibly a carrier code.\n      // Seems like there could be more.\n      else {\n        // `prefixBeforeNationalNumber` is the whole substring matched by\n        // the `national_prefix_for_parsing` regular expression.\n        // There seem to be no guarantees that it's just a national prefix.\n        // For example, if there's a carrier code, it's gonna be a\n        // part of `prefixBeforeNationalNumber` too.\n        var prefixBeforeNationalNumber = prefixMatch[0];\n        nationalNumber = number.slice(prefixBeforeNationalNumber.length); // If there's at least one captured group,\n        // then carrier code is the first one.\n\n        if (hasCapturedGroups) {\n          carrierCode = prefixMatch[1];\n        }\n      } // Tries to guess whether a national prefix was present in the input.\n      // This is not something copy-pasted from Google's library:\n      // they don't seem to have an equivalent for that.\n      // So this isn't an \"officially approved\" way of doing something like that.\n      // But since there seems no other existing method, this library uses it.\n\n\n      var nationalPrefix;\n\n      if (hasCapturedGroups) {\n        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);\n        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup); // Example: an Argentinian (AR) phone number `0111523456789`.\n        // `prefixMatch[0]` is `01115`, and `$1` is `11`,\n        // and the rest of the phone number is `23456789`.\n        // The national number is transformed via `9$1` to `91123456789`.\n        // National prefix `0` is detected being present at the start.\n        // if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\n\n        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\n          nationalPrefix = metadata.numberingPlan.nationalPrefix();\n        }\n      } else {\n        nationalPrefix = prefixMatch[0];\n      }\n\n      return {\n        nationalNumber: nationalNumber,\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode\n      };\n    }\n  }\n\n  return {\n    nationalNumber: number\n  };\n}\n//# sourceMappingURL=extractNationalNumberFromPossiblyIncompleteNumber.js.map","import stripIddPrefix from './stripIddPrefix.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport Metadata from '../metadata.js';\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants.js';\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCodeSource: string?, countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\nexport default function extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  }\n\n  var isNumberWithIddPrefix; // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      isNumberWithIddPrefix = true;\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),\n            countryCallingCode = _extractCountryCallin.countryCallingCode,\n            shorterNumber = _extractCountryCallin.number;\n\n        if (countryCallingCode) {\n          return {\n            countryCallingCodeSource: 'FROM_NUMBER_WITHOUT_PLUS_SIGN',\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n\n      return {\n        // No need to set it to `UNSPECIFIED`. It can be just `undefined`.\n        // countryCallingCodeSource: 'UNSPECIFIED',\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(_countryCallingCode);\n      return {\n        countryCallingCodeSource: isNumberWithIddPrefix ? 'FROM_NUMBER_WITH_IDD' : 'FROM_NUMBER_WITH_PLUS_SIGN',\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n} // The possible values for the returned `countryCallingCodeSource` are:\n//\n// Copy-pasted from:\n// https://github.com/google/libphonenumber/blob/master/resources/phonenumber.proto\n//\n// // The source from which the country_code is derived. This is not set in the\n// // general parsing method, but in the method that parses and keeps raw_input.\n// // New fields could be added upon request.\n// enum CountryCodeSource {\n//  // Default value returned if this is not set, because the phone number was\n//  // created using parse, not parseAndKeepRawInput. hasCountryCodeSource will\n//  // return false if this is the case.\n//  UNSPECIFIED = 0;\n//\n//  // The country_code is derived based on a phone number with a leading \"+\",\n//  // e.g. the French number \"+33 1 42 68 53 00\".\n//  FROM_NUMBER_WITH_PLUS_SIGN = 1;\n//\n//  // The country_code is derived based on a phone number with a leading IDD,\n//  // e.g. the French number \"011 33 1 42 68 53 00\", as it is dialled from US.\n//  FROM_NUMBER_WITH_IDD = 5;\n//\n//  // The country_code is derived based on a phone number without a leading\n//  // \"+\", e.g. the French number \"33 1 42 68 53 00\" when defaultCountry is\n//  // supplied as France.\n//  FROM_NUMBER_WITHOUT_PLUS_SIGN = 10;\n//\n//  // The country_code is derived NOT based on the phone number itself, but\n//  // from the defaultCountry parameter provided in the parsing function by the\n//  // clients. This happens mostly for numbers written in the national format\n//  // (without country code). For example, this would be set when parsing the\n//  // French number \"01 42 68 53 00\", when defaultCountry is supplied as\n//  // France.\n//  FROM_DEFAULT_COUNTRY = 20;\n// }\n//# sourceMappingURL=extractCountryCallingCode.js.map","import Metadata from '../metadata.js';\nimport { VALID_DIGITS } from '../constants.js';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // If there're any digits after an IDD prefix,\n  // then those digits are a country calling code.\n  // Since no country code starts with a `0`,\n  // the code below validates that the next digit (if present) is not `0`.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}\n//# sourceMappingURL=stripIddPrefix.js.map","import Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport extractNationalNumber from './extractNationalNumber.js';\nimport checkNumberLength from './checkNumberLength.js';\nimport getCountryCallingCode from '../getCountryCallingCode.js';\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;\n\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n\n    var _extractNationalNumbe = extractNationalNumber(possibleShorterNumber, metadata),\n        possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;\n\n    var _extractNationalNumbe2 = extractNationalNumber(number, metadata),\n        nationalNumber = _extractNationalNumbe2.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n\n    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLength(nationalNumber, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n\n  return {\n    number: number\n  };\n}\n//# sourceMappingURL=extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nexport var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nexport var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nexport var VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nexport var WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nexport var VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nexport var PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","import extractPhoneContext, { isPhoneContextValid, PLUS_SIGN, RFC3966_PREFIX_, RFC3966_PHONE_CONTEXT_, RFC3966_ISDN_SUBADDRESS_ } from './extractPhoneContext.js';\nimport ParseError from '../ParseError.js';\n/**\r\n * @param  {string} numberToParse\r\n * @param  {string} nationalNumber\r\n * @return {}\r\n */\n\nexport default function extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(numberToParse, _ref) {\n  var extractFormattedPhoneNumber = _ref.extractFormattedPhoneNumber;\n  var phoneContext = extractPhoneContext(numberToParse);\n\n  if (!isPhoneContextValid(phoneContext)) {\n    throw new ParseError('NOT_A_NUMBER');\n  }\n\n  var phoneNumberString;\n\n  if (phoneContext === null) {\n    // Extract a possible number from the string passed in.\n    // (this strips leading characters that could not be the start of a phone number)\n    phoneNumberString = extractFormattedPhoneNumber(numberToParse) || '';\n  } else {\n    phoneNumberString = ''; // If the phone context contains a phone number prefix, we need to capture\n    // it, whereas domains will be ignored.\n\n    if (phoneContext.charAt(0) === PLUS_SIGN) {\n      phoneNumberString += phoneContext;\n    } // Now append everything between the \"tel:\" prefix and the phone-context.\n    // This should include the national number, an optional extension or\n    // isdn-subaddress component. Note we also handle the case when \"tel:\" is\n    // missing, as we have seen in some of the phone number inputs.\n    // In that case, we append everything from the beginning.\n\n\n    var indexOfRfc3966Prefix = numberToParse.indexOf(RFC3966_PREFIX_);\n    var indexOfNationalNumber; // RFC 3966 \"tel:\" prefix is preset at this stage because\n    // `isPhoneContextValid()` requires it to be present.\n\n    /* istanbul ignore else */\n\n    if (indexOfRfc3966Prefix >= 0) {\n      indexOfNationalNumber = indexOfRfc3966Prefix + RFC3966_PREFIX_.length;\n    } else {\n      indexOfNationalNumber = 0;\n    }\n\n    var indexOfPhoneContext = numberToParse.indexOf(RFC3966_PHONE_CONTEXT_);\n    phoneNumberString += numberToParse.substring(indexOfNationalNumber, indexOfPhoneContext);\n  } // Delete the isdn-subaddress and everything after it if it is present.\n  // Note extension won't appear at the same time with isdn-subaddress\n  // according to paragraph 5.3 of the RFC3966 spec.\n\n\n  var indexOfIsdn = phoneNumberString.indexOf(RFC3966_ISDN_SUBADDRESS_);\n\n  if (indexOfIsdn > 0) {\n    phoneNumberString = phoneNumberString.substring(0, indexOfIsdn);\n  } // If both phone context and isdn-subaddress are absent but other\n  // parameters are present, the parameters are left in nationalNumber.\n  // This is because we are concerned about deleting content from a potential\n  // number string when there is no strong evidence that the number is\n  // actually written in RFC3966.\n\n\n  if (phoneNumberString !== '') {\n    return phoneNumberString;\n  }\n}\n//# sourceMappingURL=extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js.map","// When phone numbers are written in `RFC3966` format — `\"tel:+12133734253\"` —\n// they can have their \"calling code\" part written separately in a `phone-context` parameter.\n// Example: `\"tel:12133734253;phone-context=+1\"`.\n// This function parses the full phone number from the local number and the `phone-context`\n// when the `phone-context` contains a `+` sign.\nimport { VALID_DIGITS // PLUS_CHARS\n} from '../constants.js';\nexport var PLUS_SIGN = '+';\nvar RFC3966_VISUAL_SEPARATOR_ = '[\\\\-\\\\.\\\\(\\\\)]?';\nvar RFC3966_PHONE_DIGIT_ = '(' + '[' + VALID_DIGITS + ']' + '|' + RFC3966_VISUAL_SEPARATOR_ + ')';\nvar RFC3966_GLOBAL_NUMBER_DIGITS_ = '^' + '\\\\' + PLUS_SIGN + RFC3966_PHONE_DIGIT_ + '*' + '[' + VALID_DIGITS + ']' + RFC3966_PHONE_DIGIT_ + '*' + '$';\n/**\r\n * Regular expression of valid global-number-digits for the phone-context\r\n * parameter, following the syntax defined in RFC3966.\r\n */\n\nvar RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_ = new RegExp(RFC3966_GLOBAL_NUMBER_DIGITS_, 'g'); // In this port of Google's library, we don't accept alpha characters in phone numbers.\n// const ALPHANUM_ = VALID_ALPHA_ + VALID_DIGITS\n\nvar ALPHANUM_ = VALID_DIGITS;\nvar RFC3966_DOMAINLABEL_ = '[' + ALPHANUM_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*';\nvar VALID_ALPHA_ = 'a-zA-Z';\nvar RFC3966_TOPLABEL_ = '[' + VALID_ALPHA_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*';\nvar RFC3966_DOMAINNAME_ = '^(' + RFC3966_DOMAINLABEL_ + '\\\\.)*' + RFC3966_TOPLABEL_ + '\\\\.?$';\n/**\r\n * Regular expression of valid domainname for the phone-context parameter,\r\n * following the syntax defined in RFC3966.\r\n */\n\nvar RFC3966_DOMAINNAME_PATTERN_ = new RegExp(RFC3966_DOMAINNAME_, 'g');\nexport var RFC3966_PREFIX_ = 'tel:';\nexport var RFC3966_PHONE_CONTEXT_ = ';phone-context=';\nexport var RFC3966_ISDN_SUBADDRESS_ = ';isub=';\n/**\r\n * Extracts the value of the phone-context parameter of `numberToExtractFrom`,\r\n * following the syntax defined in RFC3966.\r\n *\r\n * @param {string} numberToExtractFrom\r\n * @return {string|null} the extracted string (possibly empty), or `null` if no phone-context parameter is found.\r\n */\n\nexport default function extractPhoneContext(numberToExtractFrom) {\n  var indexOfPhoneContext = numberToExtractFrom.indexOf(RFC3966_PHONE_CONTEXT_); // If no phone-context parameter is present\n\n  if (indexOfPhoneContext < 0) {\n    return null;\n  }\n\n  var phoneContextStart = indexOfPhoneContext + RFC3966_PHONE_CONTEXT_.length; // If phone-context parameter is empty\n\n  if (phoneContextStart >= numberToExtractFrom.length) {\n    return '';\n  }\n\n  var phoneContextEnd = numberToExtractFrom.indexOf(';', phoneContextStart); // If phone-context is not the last parameter\n\n  if (phoneContextEnd >= 0) {\n    return numberToExtractFrom.substring(phoneContextStart, phoneContextEnd);\n  } else {\n    return numberToExtractFrom.substring(phoneContextStart);\n  }\n}\n/**\r\n * Returns whether the value of phoneContext follows the syntax defined in RFC3966.\r\n *\r\n * @param {string|null} phoneContext\r\n * @return {boolean}\r\n */\n\nexport function isPhoneContextValid(phoneContext) {\n  if (phoneContext === null) {\n    return true;\n  }\n\n  if (phoneContext.length === 0) {\n    return false;\n  } // Does phone-context value match pattern of global-number-digits or domainname.\n\n\n  return RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_.test(phoneContext) || RFC3966_DOMAINNAME_PATTERN_.test(phoneContext);\n}\n//# sourceMappingURL=extractPhoneContext.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_DIGITS, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN } from './constants.js';\nimport ParseError from './ParseError.js';\nimport Metadata from './metadata.js';\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber.js';\nimport extractExtension from './helpers/extension/extractExtension.js';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber.js';\nimport getCountryCallingCode from './getCountryCallingCode.js';\nimport { isPossibleNumber } from './isPossible.js'; // import { parseRFC3966 } from './helpers/RFC3966.js'\n\nimport PhoneNumber from './PhoneNumber.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js';\nimport extractNationalNumber from './helpers/extractNationalNumber.js';\nimport stripIddPrefix from './helpers/stripIddPrefix.js';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js';\nimport extractFormattedPhoneNumberFromPossibleRfc3966NumberUri from './helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js'; // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // Examples:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\n/**\r\n * Parses a phone number.\r\n *\r\n * parse('123456789', { defaultCountry: 'RU', v2: true }, metadata)\r\n * parse('123456789', { defaultCountry: 'RU' }, metadata)\r\n * parse('123456789', undefined, metadata)\r\n *\r\n * @param  {string} input\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {object|PhoneNumber?} If `options.v2: true` flag is passed, it returns a `PhoneNumber?` instance. Otherwise, returns an object of shape `{ phone: '...', country: '...' }` (or just `{}` if no phone number was parsed).\r\n */\n\nexport default function parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n\n  var _parseInput = parseInput(text, options.v2, options.extract),\n      formattedPhoneNumber = _parseInput.number,\n      ext = _parseInput.ext,\n      error = _parseInput.error; // If the phone number is not viable then return nothing.\n\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      if (error === 'TOO_SHORT') {\n        throw new ParseError('TOO_SHORT');\n      }\n\n      throw new ParseError('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n      country = _parsePhoneNumber.country,\n      nationalNumber = _parsePhoneNumber.nationalNumber,\n      countryCallingCode = _parsePhoneNumber.countryCallingCode,\n      countryCallingCodeSource = _parsePhoneNumber.countryCallingCodeSource,\n      carrierCode = _parsePhoneNumber.carrierCode;\n\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    phoneNumber.__countryCallingCodeSource = countryCallingCodeSource;\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  } // isInternational: countryCallingCode !== undefined\n\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\nfunction _extractFormattedPhoneNumber(text, extract, throwOnError) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new ParseError('TOO_LONG');\n    }\n\n    return;\n  }\n\n  if (extract === false) {\n    return text;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (startsAt < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\n\nfunction parseInput(text, v2, extract) {\n  // // Parse RFC 3966 phone number URI.\n  // if (text && text.indexOf('tel:') === 0) {\n  // \treturn parseRFC3966(text)\n  // }\n  // let number = extractFormattedPhoneNumber(text, extract, v2)\n  var number = extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(text, {\n    extractFormattedPhoneNumber: function extractFormattedPhoneNumber(text) {\n      return _extractFormattedPhoneNumber(text, extract, v2);\n    }\n  }); // If the phone number is not viable, then abort.\n\n  if (!number) {\n    return {};\n  }\n\n  if (!isViablePhoneNumber(number)) {\n    if (isViablePhoneNumberStart(number)) {\n      return {\n        error: 'TOO_SHORT'\n      };\n    }\n\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var withExtensionStripped = extractExtension(number);\n\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n      countryCallingCodeSource = _extractCountryCallin.countryCallingCodeSource,\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.\n\n\n  var country;\n\n  if (countryCallingCode) {\n    metadata.selectNumberingPlan(countryCallingCode);\n  } // If `formattedPhoneNumber` is passed in \"national\" format\n  // then `number` is defined and `countryCallingCode` is `undefined`.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n    metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n\n    if (defaultCountry) {\n      country = defaultCountry;\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n          country = '001';\n        }\n      }\n    }\n\n    countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);\n  } else return {};\n\n  if (!number) {\n    return {\n      countryCallingCodeSource: countryCallingCodeSource,\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var _extractNationalNumbe = extractNationalNumber(parseIncompletePhoneNumber(number), metadata),\n      nationalNumber = _extractNationalNumbe.nationalNumber,\n      carrierCode = _extractNationalNumbe.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = getCountryByCallingCode(countryCallingCode, nationalNumber, metadata);\n\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    countryCallingCodeSource: countryCallingCodeSource,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n//# sourceMappingURL=parse.js.map","import getCountryByNationalNumber from './getCountryByNationalNumber.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  }\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return getCountryByNationalNumber(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\n//# sourceMappingURL=getCountryByCallingCode.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Metadata from '../metadata.js';\nimport getNumberType from './getNumberType.js';\nexport default function getCountryByNationalNumber(possibleCountries, nationalPhoneNumber, metadata) {\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(possibleCountries), _step; !(_step = _iterator()).done;) {\n    var country = _step.value;\n    metadata.country(country); // \"Leading digits\" patterns are only defined for about 20% of all countries.\n    // By definition, matching \"leading digits\" is a sufficient but not a necessary\n    // condition for a phone number to belong to a country.\n    // The point of \"leading digits\" check is that it's the fastest one to get a match.\n    // https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n      phone: nationalPhoneNumber,\n      country: country\n    }, undefined, metadata.metadata)) {\n      return country;\n    }\n  }\n}\n//# sourceMappingURL=getCountryByNationalNumber.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from '../constants.js';\nimport createExtensionPattern from './extension/createExtensionPattern.js'; //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nexport var VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*'; // This regular expression isn't present in Google's `libphonenumber`\n// and is only used to determine whether the phone number being input\n// is too short for it to even consider it a \"valid\" number.\n// This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nvar VALID_PHONE_NUMBER_START_REG_EXP = new RegExp('^' + '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){1,2}' + '$', 'i');\nexport var VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER + // Phone number extensions\n'(?:' + createExtensionPattern() + ')?'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER_WITH_EXTENSION + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nexport default function isViablePhoneNumber(number) {\n  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n} // This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nexport function isViablePhoneNumberStart(number) {\n  return VALID_PHONE_NUMBER_START_REG_EXP.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","import parsePhoneNumberWithError_ from './parsePhoneNumberWithError_.js';\nimport normalizeArguments from './normalizeArguments.js';\nexport default function parsePhoneNumberWithError() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumberWithError_(text, options, metadata);\n}\n//# sourceMappingURL=parsePhoneNumberWithError.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n// Extracts the following properties from function arguments:\n// * input `text`\n// * `options` object\n// * `metadata` JSON\nexport default function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n    if (arg_3) {\n      options = arg_2;\n      metadata = arg_3;\n    } else {\n      metadata = arg_2;\n    }\n  } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return _typeof(_) === 'object';\n};\n//# sourceMappingURL=normalizeArguments.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parse from './parse.js';\nexport default function parsePhoneNumberWithError(text, options, metadata) {\n  return parse(text, _objectSpread(_objectSpread({}, options), {}, {\n    v2: true\n  }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumberWithError_.js.map","import withMetadataArgument from './withMetadataArgument.js'\r\nimport { parsePhoneNumberWithError as _parsePhoneNumberWithError } from '../../core/index.js'\r\n\r\nexport function parsePhoneNumberWithError() {\r\n\treturn withMetadataArgument(_parsePhoneNumberWithError, arguments)\r\n}\r\n","import isViablePhoneNumber from '../helpers/isViablePhoneNumber.js';\nimport parseNumber from '../parse.js';\nimport _isValidNumberForRegion from './isValidNumberForRegion_.js'; // This function has been deprecated and is not exported as\n// `isValidPhoneNumberForCountry()` or `isValidPhoneNumberForRegion()`.\n//\n// The rationale is:\n//\n// * We don't use the \"region\" word, so \"country\" would be better.\n//\n// * It could be substituted with:\n//\n// ```js\n// export default function isValidPhoneNumberForCountry(phoneNumberString, country) {\n// \tconst phoneNumber = parsePhoneNumber(phoneNumberString, {\n// \t\tdefaultCountry: country,\n// \t\t// Demand that the entire input string must be a phone number.\n// \t\t// Otherwise, it would \"extract\" a phone number from an input string.\n// \t\textract: false\n// \t})\n// \tif (!phoneNumber) {\n// \t\treturn false\n// \t}\n// \tif (phoneNumber.country !== country) {\n// \t\treturn false\n// \t}\n// \treturn phoneNumber.isValid()\n// }\n// ```\n//\n// * Same function could be used for `isPossiblePhoneNumberForCountry()`\n//   by replacing `isValid()` with `isPossible()`.\n//\n// * The reason why this function is not exported is because its result is ambiguous.\n//   Suppose `false` is returned. It could mean any of:\n//   * Not a phone number.\n//   * The phone number is valid but belongs to another country or another calling code.\n//   * The phone number belongs to the correct country but is not valid digit-wise.\n//   All those three cases should be handled separately from a \"User Experience\" standpoint.\n//   Simply showing \"Invalid phone number\" error in all of those cases would be lazy UX.\n\nexport default function isValidNumberForRegion(number, country, metadata) {\n  if (typeof number !== 'string') {\n    throw new TypeError('number must be a string');\n  }\n\n  if (typeof country !== 'string') {\n    throw new TypeError('country must be a string');\n  } // `parse` extracts phone numbers from raw text,\n  // therefore it will cut off all \"garbage\" characters,\n  // while this `validate` function needs to verify\n  // that the phone number contains no \"garbage\"\n  // therefore the explicit `isViablePhoneNumber` check.\n\n\n  var input;\n\n  if (isViablePhoneNumber(number)) {\n    input = parseNumber(number, {\n      defaultCountry: country\n    }, metadata);\n  } else {\n    input = {};\n  }\n\n  return _isValidNumberForRegion(input, country, undefined, metadata);\n}\n//# sourceMappingURL=isValidNumberForRegion.js.map","import isValidNumber from '../isValid.js';\n/**\r\n * Checks if a given phone number is valid within a given region.\r\n * Is just an alias for `phoneNumber.isValid() && phoneNumber.country === country`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n */\n\nexport default function isValidNumberForRegion(input, country, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  return input.country === country && isValidNumber(input, options, metadata);\n}\n//# sourceMappingURL=isValidNumberForRegion_.js.map","import withMetadataArgument from '../min/exports/withMetadataArgument.js'\r\n\r\nimport _isValidNumberForRegion from '../es6/legacy/isValidNumberForRegion.js'\r\n\r\nexport function isValidNumberForRegion() {\r\n\treturn withMetadataArgument(_isValidNumberForRegion, arguments)\r\n}\r\n","// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":4,\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"880\":[\"BD\"],\"886\":[\"TW\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[135-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[135-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\"],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([457]\\\\d{6})$|1\",\"268$1\",0,\"268\"],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2457]\\\\d{6})$|1\",\"264$1\",0,\"264\"],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\"],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\"],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]]],\"AR\":[\"54\",\"00\",\"(?:11|[89]\\\\d\\\\d)\\\\d{8}|[2368]\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\"],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"([267]\\\\d{6})$|1\",\"684$1\",0,\"684\"],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7}(?:\\\\d(?:\\\\d{2})?)?|8[0-24-9]\\\\d{7})|[2-478]\\\\d{8}|1\\\\d{4,7}\",[5,6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|4\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"(183[12])|0\",0,0,0,[[\"(?:(?:2(?:[0-26-9]\\\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\\\d|2[0-8]))\\\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\\\d)\\\\d{3}|9(?:[02-9]\\\\d{3}|1(?:(?:[0-58]\\\\d|6[0135-9])\\\\d|7(?:0[0-24-9]|[1-9]\\\\d)|9(?:[0-46-9]\\\\d|5[0-79])))))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"163\\\\d{2,6}\",[5,6,7,8,9]],[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",0,\"00\"],\"AZ\":[\"994\",\"00\",\"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[28]|2|365|46\",\"1[28]|2|365[45]|46\",\"1[28]|2|365(?:4|5[02])|46\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[13-9]\"],\"0$1\"]],\"0\"],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\"],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"246$1\",0,\"246\"],\"BD\":[\"880\",\"00\",\"[1-469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-79]\\\\d{8}|[2-9]\\\\d{7}|[3-9]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-8]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]|22\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\"],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\"],\"BF\":[\"226\",\"00\",\"[025-7]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[025-7]\"]]]],\"BG\":[\"359\",\"00\",\"00800\\\\d{7}|[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9,12],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[047]\"]]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]]],\"BJ\":[\"229\",\"00\",\"[24-689]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-689]\"]]]],\"BL\":[\"590\",\"00\",\"590\\\\d{6}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:395|76[018])\\\\d|475[0-2])\\\\d{4}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"441$1\",0,\"441\"],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"(?:[2-467]\\\\d\\\\d|8001)\\\\d{5}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[23]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\"],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\"],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"(?:[1-46-9]\\\\d\\\\d|5(?:[0-46-9]\\\\d|5[0-46-9]))\\\\d{8}|[1-9]\\\\d{9}|[3589]\\\\d{8}|[34]\\\\d{7}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37)\",\"4(?:02|37)0|[34]00\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\"],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([3-8]\\\\d{6})$|1\",\"242$1\",0,\"242\"],\"BT\":[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]]],\"BW\":[\"267\",\"00\",\"(?:0800|(?:[37]|800)\\\\d)\\\\d{6}|(?:[2-6]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-6]|3[15-79]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,0,\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]]],\"CA\":[\"1\",\"011\",\"(?:[2-8]\\\\d|90)\\\\d{8}|3\\\\d{6}\",[7,10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|54|6[578]|82)|4(?:03|1[68]|[26]8|3[178]|50|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|[18]3|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\",[10]],[\"\",[10]],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\",[10]],[\"900[2-9]\\\\d{6}\",[10]],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|(?:5(?:00|2[125-9]|33|44|66|77|88)|622)[2-9]\\\\d{6}\",[10]],0,[\"310\\\\d{4}\",[7]],0,[\"600[2-9]\\\\d{6}\",[10]]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CD\":[\"243\",\"00\",\"[189]\\\\d{8}|[1-68]\\\\d{6}\",[7,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\"],\"CI\":[\"225\",\"00\",\"[02]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d)(\\\\d{5})\",\"$1 $2 $3 $4\",[\"2\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]]],\"CK\":[\"682\",\"00\",\"[2-578]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"219\",\"2196\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[1-36]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]]],\"CM\":[\"237\",\"00\",\"[26]\\\\d{8}|88\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]|88\"]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79)\\\\d\\\\d00\",\"1[127]\\\\d{8,9}|2\\\\d{9}(?:\\\\d{2})?|[12]\\\\d{6,7}|86\\\\d{6}|(?:1[03-689]\\\\d|6)\\\\d{7,9}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{6,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]\",\"(?:10|2[0-57-9])(?:10|9[56])\",\"10(?:10|9[56])|2[0-57-9](?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"(1(?:[12]\\\\d|79)\\\\d\\\\d)|0\",0,0,0,0,\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:60\\\\d\\\\d|9101)\\\\d{6}|(?:1\\\\d|3)\\\\d{9}\",[10,11],[[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"6\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3[0-357]|91\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0(4(?:[14]4|56)|[579])?\"],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|(?:[24-8]\\\\d{3}|3005)\\\\d{4}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],\"CU\":[\"53\",\"119\",\"[27]\\\\d{6,7}|[34]\\\\d{5,7}|(?:5|8\\\\d\\\\d)\\\\d{7}\",[6,7,8,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\"],\"CV\":[\"238\",\"0\",\"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\"],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"96\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[34]0|69|8\\\\d)\\\\d\\\\d?|49(?:37|49|60|7[089]|9\\\\d)\\\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\\\d{1,8}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}|49(?:[015]\\\\d|2[13]|31|[46][1-8])\\\\d{1,9}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[0568]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\"],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"767$1\",0,\"767\"],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8001|8[024]9\"],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\"],\"EC\":[\"593\",\"00\",\"1\\\\d{9,10}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-49])\",\"[45]|8(?:00[1-9]|[1-49])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[189]\"],\"0$1\"]],\"0\"],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\"],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\"],\"ES\":[\"34\",\"00\",\"[5-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-579]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-579]\"],\"0$1\"]],\"0\"],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[12]00|[368]|70[07-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[1245]|7[135]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",0,\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,0,\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5]],\"FM\":[\"691\",\"00\",\"(?:[39]\\\\d\\\\d|820)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[389]\"]]]],\"FO\":[\"298\",\"00\",\"[2-9]\\\\d{5}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\"],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\"],\"GA\":[\"241\",\"00\",\"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"]],0,0,\"0(11\\\\d{6}|60\\\\d{6}|61\\\\d{6}|6[256]\\\\d{6}|7[467]\\\\d{6})\",\"$1\"],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[02-9])\",\"[25]|7(?:0|6(?:[03-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1(?:3(?:[0-58]\\\\d\\\\d|73[0235])|4(?:[0-5]\\\\d\\\\d|69[7-9]|70[0-579])|(?:(?:5[0-26-9]|[78][0-49])\\\\d|6(?:[0-4]\\\\d|50))\\\\d)|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d\\\\d|1(?:[0-7]\\\\d\\\\d|8(?:[02]\\\\d|1[0-46-9])))|(?:3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"473$1\",0,\"473\"],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\"],\"GF\":[\"594\",\"00\",\"[56]94\\\\d{6}|(?:80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[56]|9[47]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[89]\"],\"0$1\"]],\"0\"],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"([25-9]\\\\d{5})$|0\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\"],\"GI\":[\"350\",\"00\",\"(?:[25]\\\\d|60)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d|70)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-9]\"]]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"GN\":[\"224\",\"00\",\"722\\\\d{6}|(?:3|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]]],\"GP\":[\"590\",\"00\",\"590\\\\d{6}|(?:69|80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1289]|5[3-579]|[68][0-689]|7[08]|9\\\\d)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:395|76[018])\\\\d|475[0-2])\\\\d{4}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]]],\"GR\":[\"30\",\"00\",\"5005000\\\\d{3}|8\\\\d{9,11}|(?:[269]\\\\d|70)\\\\d{8}\",[10,11,12],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{5})\",\"$1 $2 $3\",[\"8\"]]]],\"GT\":[\"502\",\"00\",\"(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"([3-9]\\\\d{6})$|1\",\"671$1\",0,\"671\"],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]]],\"GY\":[\"592\",\"001\",\"9008\\\\d{3}|(?:[2-467]\\\\d\\\\d|862)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46-9]\"]]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4,7}|(?:[2-7]|9\\\\d{3})\\\\d{7}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,0,\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]]],\"HR\":[\"385\",\"00\",\"(?:[24-69]\\\\d|3[0-79])\\\\d{7}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{5,6}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-5]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"HT\":[\"509\",\"00\",\"(?:[2-489]\\\\d|55)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"HU\":[\"36\",\"00\",\"[235-7]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"06 $1\"]],\"06\"],\"ID\":[\"62\",\"00[89]\",\"(?:(?:00[1-9]|8\\\\d)\\\\d{4}|[1-36])\\\\d{6}|00\\\\d{10}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\"],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\"],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([25-8]\\\\d{5})$|0\",\"1624$1\",0,\"74576|(?:16|7[56])24\"],\"IN\":[\"91\",\"00\",\"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\"],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\"],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,0,\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,10}|1\\\\d{8,10}|3(?:[0-8]\\\\d{7,10}|9\\\\d{7,8})|(?:55|70)\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?\",[6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[2-5])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1(?:44|[679])|[378]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]|14\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d{3}|89(?:2\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\d\\\\d)|5[0-4]))\\\\d\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([0-24-8]\\\\d{5})$|0\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97[7-9]))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\"],\"JO\":[\"962\",\"00\",\"(?:(?:[2689]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[289][2-9]|5[3-9]|7[2-4679]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[257-9]\"],\"0$1\"]],\"0\"],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|(?:[235-8]\\\\d|99)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\"],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"869$1\",0,\"869\"],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|[2-7])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\"],\"KW\":[\"965\",\"00\",\"18\\\\d{5}|(?:[2569]\\\\d|41)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[245]\"]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"345$1\",0,\"345\"],\"KZ\":[\"7\",\"810\",\"(?:33622|8\\\\d{8})\\\\d{5}|[78]\\\\d{9}\",[10,14],0,\"8\",0,0,0,0,\"33|7\",0,\"8~10\"],\"LA\":[\"856\",\"00\",\"[23]\\\\d{9}|3\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"30[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\"],\"LB\":[\"961\",\"00\",\"[27-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27-9]\"]]],\"0\"],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-8]\\\\d{6})$|1\",\"758$1\",0,\"758\"],\"LI\":[\"423\",\"00\",\"[68]\\\\d{8}|(?:[2378]\\\\d|90)\\\\d{5}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2379]|8(?:0[09]|7)\",\"[2379]|8(?:0(?:02|9)|7)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"(1001)|0\"],\"LK\":[\"94\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\"],\"LR\":[\"231\",\"00\",\"(?:[25]\\\\d|33|77|88)\\\\d{7}|(?:2\\\\d|[4-6])\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[4-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23578]\"],\"0$1\"]],\"0\"],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-7]\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"8 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(8-$1)\",1]],\"8\",0,\"[08]\"],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\"],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]]],\"LY\":[\"218\",\"00\",\"[2-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{5})(\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29[1289]|389)\",\"529(?:1[1-46-9]|2[013-8]|90)|5(?:298|389)[0-46-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|9)|892\",\"5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5293[01]\\\\d{4}|5(?:2(?:[0-25-7]\\\\d|3[1-578]|4[02-46-8]|8[0235-7]|9[0-289])|3(?:[0-47]\\\\d|5[02-9]|6[02-8]|8[0189]|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:[017]\\\\d|2[0-2]|6[0-8]|8[0-3]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"592(?:4[0-2]|93)\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"(?:[3489]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[389]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\"],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\"],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MF\":[\"590\",\"00\",\"590\\\\d{6}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:395|76[018])\\\\d|475[0-2])\\\\d{4}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"([24-9]\\\\d{6})$|0\",\"20$1\"],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\"],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2|34[47]|4(?:[37]7|5[47]|64)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\"],\"ML\":[\"223\",\"00\",\"[24-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[5-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\"],\"MO\":[\"853\",\"00\",\"0800\\\\d{3}|(?:28|[68]\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"670$1\",0,\"670\"],\"MQ\":[\"596\",\"00\",\"596\\\\d{6}|(?:69|80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]]],\"MS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|664|900)\\\\d{7}\",[10],0,\"1\",0,\"([34]\\\\d{6})$|1\",\"664$1\",0,\"664\"],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:[57]|8\\\\d\\\\d)\\\\d{7}|[2-468]\\\\d{6}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57]\"]],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,0,\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[34679]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,0,\"00\"],\"MW\":[\"265\",\"00\",\"(?:[1289]\\\\d|31|77)\\\\d{7}|1\\\\d{6}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[137-9]\"],\"0$1\"]],\"0\"],\"MX\":[\"52\",\"0[09]\",\"1(?:(?:[27]2|44|99)[1-9]|65[0-689])\\\\d{7}|(?:1(?:[01]\\\\d|2[13-9]|[35][1-9]|4[0-35-9]|6[0-46-9]|7[013-9]|8[1-79]|9[1-8])|[2-9]\\\\d)\\\\d{8}\",[10,11],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"],0,1],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 $3 $4\",[\"1(?:33|5[56]|81)\"],0,1],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 $3 $4\",[\"1\"],0,1]],\"01\",0,\"0(?:[12]|4[45])|1\",0,0,0,0,\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[378][1-9]|53)|8\",\"1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1(?:[367]|80)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-79]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"NC\":[\"687\",\"00\",\"(?:050|[2-57-9]\\\\d\\\\d)\\\\d{3}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[02-57-9]\"]]]],\"NE\":[\"227\",\"00\",\"[027-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[013]|7[04]\"]]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1[0-3]\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"[13]\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\"],\"NG\":[\"234\",\"009\",\"(?:[124-7]|9\\\\d{3})\\\\d{6}|[1-9]\\\\d{7}|[78]\\\\d{9,13}\",[7,8,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"78\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|9(?:0[3-9]|[1-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-7]|8[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\"],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|8\\\\d{6,9}|9\\\\d{6,10}|1\\\\d{4,5}\",[5,6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-578]|91\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[489]|59\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\"],\"NP\":[\"977\",\"00\",\"(?:1\\\\d|9)\\\\d{9}|[1-9]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"1[01]|[2-8]|9(?:[1-59]|[67][2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\"],\"NR\":[\"674\",\"00\",\"(?:444|(?:55|8\\\\d)\\\\d|666)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-68]\"]]]],\"NU\":[\"683\",\"00\",\"(?:[47]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"[29]\\\\d{7,9}|50\\\\d{5}(?:\\\\d{2,3})?|6[0-35-9]\\\\d{6}|7\\\\d{7,8}|8\\\\d{4,9}|(?:11\\\\d|[34])\\\\d{7}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,8})\",\"$1 $2\",[\"8[1-579]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"50[036-8]|[89]0\",\"50(?:[0367]|88)|[89]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[59]|80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1|2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7|86\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\"],\"OM\":[\"968\",\"00\",\"(?:1505|[279]\\\\d{3}|500)\\\\d{4}|800\\\\d{5,6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[179]\"]]]],\"PA\":[\"507\",\"00\",\"(?:00800|8\\\\d{3})\\\\d{6}|[68]\\\\d{7}|[1-57-9]\\\\d{6}\",[7,8,10,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[68]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]]],\"PE\":[\"51\",\"00|19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,0,\"00\",\" Anexo \"],\"PF\":[\"689\",\"00\",\"4\\\\d{5}(?:\\\\d{2})?|8\\\\d{7,8}\",[6,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4|8[7-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,0,\"00\"],\"PH\":[\"63\",\"00\",\"(?:[2-7]|9\\\\d)\\\\d{8}|2\\\\d{5}|(?:1800|8)\\\\d{7,9}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\"],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[06-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,7})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\"],\"PL\":[\"48\",\"00\",\"(?:6|8\\\\d\\\\d)\\\\d{7}|[1-9]\\\\d{6}(?:\\\\d{2})?|[26]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|20|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-7]|8[1-79]|9[145]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"8\"]]]],\"PM\":[\"508\",\"00\",\"[45]\\\\d{5}|(?:708|80\\\\d)\\\\d{6}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\"],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"PT\":[\"351\",\"00\",\"1693\\\\d{5}|(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"16|[236-9]\"]]]],\"PW\":[\"680\",\"01[12]\",\"(?:[24-8]\\\\d\\\\d|345|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|9\\\\d{5,10}|(?:[2-46-8]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9(?:[5-79]|8[1-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"]]],\"0\"],\"QA\":[\"974\",\"00\",\"800\\\\d{4}|(?:2|800)\\\\d{6}|(?:0080|[3-7])\\\\d{7}\",[7,8,9,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[16]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[3-7]\"]]]],\"RE\":[\"262\",\"00\",\"(?:26|[689]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"26(?:2\\\\d\\\\d|3(?:0\\\\d|1[0-3]))\\\\d{4}\"],[\"(?:69(?:2\\\\d\\\\d|3(?:0[0-46]|1[013]|2[0-2]|3[0-39]|4\\\\d|5[0-5]|6[0-6]|7[0-27]|8[0-8]|9[0-479]))|9(?:399[0-3]|479[0-2]|76(?:2[27]|3[0-37]|9\\\\d)))\\\\d{4}\"],[\"80\\\\d{7}\"],[\"89[1-37-9]\\\\d{6}\"],0,0,0,0,0,[\"8(?:1[019]|2[0156]|84|90)\\\\d{6}\"]]],\"RO\":[\"40\",\"00\",\"(?:[2378]\\\\d|90)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[237-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\"],\"RU\":[\"7\",\"810\",\"8\\\\d{13}|[347-9]\\\\d{9}\",[10,14],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[349]|8(?:[02-7]|1[1-8])\"],\"8 ($1)\",1],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"8\"],\"8 ($1)\"]],\"8\",0,0,0,0,\"3[04-689]|[489]\",0,\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]]],\"0\"],\"SA\":[\"966\",\"00\",\"92\\\\d{7}|(?:[15]|8\\\\d)\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\"],\"SB\":[\"677\",\"0[01]\",\"(?:[1-6]|[7-9]\\\\d\\\\d)\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"800\\\\d{4}|(?:[249]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]|9[57]\"]]],0,0,0,0,0,0,0,\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44|9)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\"],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8(?:0[1-6]|[1-9])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\"],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,0,\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[489]\\\\d|[57]9)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\"],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\"],\"SL\":[\"232\",\"00\",\"(?:[237-9]\\\\d|66)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[236-9]\"],\"(0$1)\"]],\"0\"],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\"],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d|93)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|[1-5]\\\\d{6}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"(?:2|90)4|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3478]|64|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6(?:0[5-7]|[1-35-9])|9[2-9]\"]]],\"0\"],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-8]\"]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|[89]00\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"(5\\\\d{6})$|1\",\"721$1\",0,\"721\"],\"SY\":[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\"],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\"],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-479]\\\\d{6})$|1\",\"649$1\",0,\"649\"],\"TD\":[\"235\",\"00|16\",\"(?:22|[69]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2679]\"]]],0,0,0,0,0,0,0,\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]]],\"TH\":[\"66\",\"00[1-9]\",\"(?:001800|[2-57]|[689]\\\\d)\\\\d{7}|1\\\\d{7,9}\",[8,9,10,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"TJ\":[\"992\",\"810\",\"[0-57-9]\\\\d{8}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[34]7|91[78]\"]],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3[1-5]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0-57-9]\"]]],0,0,0,0,0,0,0,\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]]],\"TM\":[\"993\",\"810\",\"[1-6]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"6\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]]],\"TO\":[\"676\",\"00\",\"(?:0800|(?:[5-8]\\\\d\\\\d|999)\\\\d)\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]]]],\"TR\":[\"90\",\"00\",\"4\\\\d{6}|8\\\\d{11,12}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\",[7,10,12,13],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[01589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|616)\",\"5(?:[0-59]|6161)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{6,7})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\"],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-46-8]\\\\d{6})$|1\",\"868$1\",0,\"868\"],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[25-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\"],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])\",\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|89|9[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\"],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}|3\\\\d{6}\",[10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"310\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"(?:4722(?:0[0-35]|27)|505(?:[2-57-9]\\\\d\\\\d|6(?:[0-35-9]\\\\d|4[46])))\\\\d{4}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[0-2]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[179]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[068]|3[0-2589]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"(?:0004|4)\\\\d{9}|[1249]\\\\d{7}|(?:[49]\\\\d|80)\\\\d{5}\",[7,8,10,13],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"405|8|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[124]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]],\"0\",0,0,0,0,0,0,\"00\",\" int. \"],\"UZ\":[\"998\",\"810\",\"(?:33|[5-79]\\\\d|88)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[35-9]\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],0,0,0,0,0,0,\"06698\"],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"784$1\",0,\"784\"],\"VE\":[\"58\",\"00\",\"[68]00\\\\d{7}|(?:[24]\\\\d|[59]0)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24-689]\"],\"0$1\"]],\"0\"],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-578]\\\\d{6})$|1\",\"284$1\",0,\"284\"],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"340$1\",0,\"340\"],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[69]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\"],\"VU\":[\"678\",\"00\",\"[57-9]\\\\d{6}|(?:[238]\\\\d|48)\\\\d{3}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]]]],\"WF\":[\"681\",\"00\",\"(?:40|72)\\\\d{4}|8\\\\d{5}(?:\\\\d{3})?\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[478]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"WS\":[\"685\",\"0\",\"(?:[2-6]|8\\\\d{5})\\\\d{4}|[78]\\\\d{6}|[68]\\\\d{5}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-5]|6[1-9]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[68]\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"XK\":[\"383\",\"00\",\"[23]\\\\d{7,8}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[23]\"],\"0$1\"]],\"0\"],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7(?:[24-6]|8[0-7])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"YT\":[\"262\",\"00\",\"(?:(?:(?:26|63)9|80\\\\d)\\\\d|9398)\\\\d{5}\",[9],0,\"0\",0,0,0,0,\"269|63|9398\"],\"ZA\":[\"27\",\"00\",\"[1-79]\\\\d{8}|8\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"ZM\":[\"260\",\"00\",\"800\\\\d{6}|(?:21|63|[79]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[79]\"],\"0$1\"]],\"0\"],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\"]},\"nonGeographic\":{\"800\":[\"800\",0,\"(?:00|[1-9]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"\\\\d\"]]],0,0,0,0,0,0,[0,0,[\"(?:00|[1-9]\\\\d)\\\\d{6}\"]]],\"808\":[\"808\",0,\"[1-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[1-9]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\"[1-9]\\\\d{7}\"]]],\"870\":[\"870\",0,\"7\\\\d{11}|[35-7]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[35-7]\"]]],0,0,0,0,0,0,[0,[\"(?:[356]|774[45])\\\\d{8}|7[6-8]\\\\d{7}\"]]],\"878\":[\"878\",0,\"10\\\\d{10}\",[12],[[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"10\\\\d{10}\"]]],\"881\":[\"881\",0,\"[0-36-9]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"[0-36-9]\"]]],0,0,0,0,0,0,[0,[\"[0-36-9]\\\\d{8}\"]]],\"882\":[\"882\",0,\"[13]\\\\d{6}(?:\\\\d{2,5})?|[19]\\\\d{7}|(?:[25]\\\\d\\\\d|4)\\\\d{7}(?:\\\\d{2})?\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"16|342\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"49\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"1[36]|9\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"3[23]\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"16\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|23|3(?:[15]|4[57])|4|51\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34\"]],[\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\",\"$1 $2 $3\",[\"[1-35]\"]]],0,0,0,0,0,0,[0,[\"342\\\\d{4}|(?:337|49)\\\\d{6}|(?:3(?:2|47|7\\\\d{3})|50\\\\d{3})\\\\d{7}\",[7,8,9,10,12]],0,0,0,0,0,0,[\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|(?:345\\\\d|9[89])\\\\d{6}|(?:10|2(?:3|85\\\\d)|3(?:[15]|[69]\\\\d\\\\d)|4[15-8]|51)\\\\d{8}\"]]],\"883\":[\"883\",0,\"(?:[1-4]\\\\d|51)\\\\d{6,10}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,8})\",\"$1 $2 $3\",[\"[14]|2[24-689]|3[02-689]|51[24-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"510\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"21\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"51[13]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[235]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"(?:2(?:00\\\\d\\\\d|10)|(?:370[1-9]|51\\\\d0)\\\\d)\\\\d{7}|51(?:00\\\\d{5}|[24-9]0\\\\d{4,7})|(?:1[013-79]|2[24-689]|3[02-689]|4[0-4])0\\\\d{5,9}\"]]],\"888\":[\"888\",0,\"\\\\d{11}\",[11],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\"\\\\d{11}\"]]],\"979\":[\"979\",0,\"[1359]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1359]\"]]],0,0,0,0,0,0,[0,0,0,[\"[1359]\\\\d{8}\"]]]}}","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// https://stackoverflow.com/a/46971044/970769\n// \"Breaking changes in Typescript 2.1\"\n// \"Extending built-ins like Error, Array, and Map may no longer work.\"\n// \"As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\"\n// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\nvar ParseError = /*#__PURE__*/function (_Error) {\n  _inherits(ParseError, _Error);\n\n  var _super = _createSuper(ParseError);\n\n  function ParseError(code) {\n    var _this;\n\n    _classCallCheck(this, ParseError);\n\n    _this = _super.call(this, code); // Set the prototype explicitly.\n    // Any subclass of FooError will have to manually set the prototype as well.\n\n    Object.setPrototypeOf(_assertThisInitialized(_this), ParseError.prototype);\n    _this.name = _this.constructor.name;\n    return _this;\n  }\n\n  return _createClass(ParseError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexport { ParseError as default };\n//# sourceMappingURL=ParseError.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport Metadata from './metadata.js';\nimport isPossibleNumber from './isPossible.js';\nimport isValidNumber from './isValid.js'; // import checkNumberLength from './helpers/checkNumberLength.js'\n\nimport getNumberType from './helpers/getNumberType.js';\nimport getPossibleCountriesForNumber from './helpers/getPossibleCountriesForNumber.js';\nimport formatNumber from './format.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar PhoneNumber = /*#__PURE__*/function () {\n  /**\r\n   * @param  {string} countryOrCountryCallingCode\r\n   * @param  {string} nationalNumber\r\n   * @param  {object} metadata — Metadata JSON\r\n   * @return {PhoneNumber}\r\n   */\n  function PhoneNumber(countryOrCountryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryOrCountryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n\n    if (!metadata) {\n      throw new TypeError('`metadata` not passed');\n    }\n\n    var _getCountryAndCountry = getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadata),\n        country = _getCountryAndCountry.country,\n        countryCallingCode = _getCountryAndCountry.countryCallingCode;\n\n    this.country = country;\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"setExt\",\n    value: function setExt(ext) {\n      this.ext = ext;\n    }\n  }, {\n    key: \"getPossibleCountries\",\n    value: function getPossibleCountries() {\n      if (this.country) {\n        return [this.country];\n      }\n\n      return getPossibleCountriesForNumber(this.countryCallingCode, this.nationalNumber, this.metadata);\n    }\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.metadata);\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // This function was originally meant to be an equivalent for `validatePhoneNumberLength()`,\n    // but later it was found out that it doesn't include the possible `TOO_SHORT` result\n    // returned from `parsePhoneNumberWithError()` in the original `validatePhoneNumberLength()`,\n    // so eventually I simply commented out this method from the `PhoneNumber` class\n    // and just left the `validatePhoneNumberLength()` function, even though that one would require\n    // and additional step to also validate the actual country / calling code of the phone number.\n    // validateLength() {\n    // \tconst metadata = new Metadata(this.metadata)\n    // \tmetadata.selectNumberingPlan(this.countryCallingCode)\n    // \tconst result = checkNumberLength(this.nationalNumber, metadata)\n    // \tif (result !== 'IS_POSSIBLE') {\n    // \t\treturn result\n    // \t}\n    // }\n\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread(_objectSpread({}, options), {}, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport { PhoneNumber as default };\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};\n\nfunction getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadataJson) {\n  var country;\n  var countryCallingCode;\n  var metadata = new Metadata(metadataJson); // If country code is passed then derive `countryCallingCode` from it.\n  // Also store the country code as `.country`.\n\n  if (isCountryCode(countryOrCountryCallingCode)) {\n    country = countryOrCountryCallingCode;\n    metadata.selectNumberingPlan(country);\n    countryCallingCode = metadata.countryCallingCode();\n  } else {\n    countryCallingCode = countryOrCountryCallingCode;\n    /* istanbul ignore if */\n\n    if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n      if (metadata.isNonGeographicCallingCode(countryCallingCode)) {\n        country = '001';\n      }\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode\n  };\n}\n//# sourceMappingURL=PhoneNumber.js.map","import * as Yup from \"yup\";\nimport {\n  isValidNumberForRegion,\n  CountryCode,\n  parsePhoneNumberWithError,\n} from \"libphonenumber-js\";\n\ndeclare module \"yup\" {\n  export interface StringSchema {\n    /**\n     * Check for phone number validity.\n     *\n     * @param {CountryCode} [countryCode] The country code to check against.\n     * @param {Boolean} [strict=false] How strictly should it check.\n     * @param {String} [errorMessage=DEFAULT_MESSAGE] The error message to return if the validation fails.\n     */\n    phone(\n      countryCode?: CountryCode,\n      strict?: boolean,\n      errorMessage?: string\n    ): StringSchema;\n  }\n}\n\nconst YUP_PHONE_METHOD = \"phone\";\n\nYup.addMethod(\n  Yup.string,\n  YUP_PHONE_METHOD,\n  function yupPhone(\n    countryCode?: CountryCode,\n    strict: boolean = false,\n    errorMessage: string = \"\"\n  ) {\n    const errMsg =\n      typeof errorMessage === \"string\" && errorMessage\n        ? errorMessage\n        : countryCode\n        ? `\\${path} must be a valid phone number for region ${countryCode}`\n        : \"${path} must be a valid phone number.\";\n\n    // @ts-ignore\n    return this.test(YUP_PHONE_METHOD, errMsg, (value: string) => {\n      try {\n        const phoneNumber = parsePhoneNumberWithError(value, countryCode);\n\n        if (!phoneNumber.isPossible()) {\n          return false;\n        }\n\n        /* check if the countryCode provided should be used as\n          default country code or strictly followed\n        */\n        if (strict && countryCode) {\n          return isValidNumberForRegion(value, countryCode);\n        }\n\n        return phoneNumber.isValid();\n      } catch {\n        return false;\n      }\n    });\n  }\n);\n"],"names":["withMetadataArgument","func","_arguments","args","Array","prototype","slice","call","push","metadata","apply","compare","a","b","pa","pb","i","na","Number","nb","isNaN","getType","types","type","getCountryCallingCode","country","Metadata","countryCallingCode","Error","concat","setVersion","version","v1","v2","v3","v4","V3","V4","createExtensionPattern","purpose","rfcExtn","RFC3966_EXTN_PREFIX","getExtensionDigitsPattern","extLimitAfterExplicitLabel","explicitExtn","possibleSeparatorsBetweenNumberAndExtLabel","optionalExtnSuffix","ambiguousExtn","extLimitAfterAmbiguousChar","americanStyleExtnWithSuffix","ambiguousSeparator","extLimitWhenNotSure","autoDiallingExtn","possibleSeparatorsNumberExtLabelNoComma","extLimitAfterLikelyLabel","onlyCommasExtn","extractExtension","number","start","EXTN_PATTERN","numberWithoutExtension","matches","length","ext","parseIncompletePhoneNumber","string","result","_iterator","_createForOfIteratorHelperLoose","_step","done","character","value","parsePhoneNumberCharacter","DIGITS","mergeArrays","merged","element","sort","checkNumberLengthForType","nationalNumber","type_info","possible_lengths","possibleLengths","mobile_type","actual_length","minimum_length","isPossibleNumber","undefined","matchesEntirely","text","regular_expression","test","RegExp","getNumberType","input","options","phone","nationalNumberPattern","isNumberTypeEqualTo","NON_FIXED_LINE_PHONE_TYPES","pattern","isValidNumber","hasTypes","getPossibleCountriesForNumber","callingCode","possibleCountries","_metadata","filter","couldNationalNumberBelongToCountry","formatNumber","format","_objectSpread","DEFAULT_OPTIONS","formatNationalNumber","carrierCode","formatExtension","formattedNumber","formatRFC3966","fromCountry","countryMetadata","defaultIDDPrefix","SINGLE_IDD_PREFIX_REG_EXP","IDDPrefix","iddPrefix","formatAs","formats","availableFormats","lastLeadingDigitsPattern","nationalNnumber","useInternationalFormat","internationalFormat","withNationalPrefix","VALID_PUNCTUATION","trim","formatNationalNumberUsingFormat","extractNationalNumber","nationalPrefixForParsing","prefixPattern","prefixMatch","capturedGroupsCount","hasCapturedGroups","nationalPrefixTransformRule","possiblePositionOfTheFirstCapturedGroup","nationalPrefix","shouldHaveExtractedNationalPrefix","isPossibleIncompleteNationalNumber","extractCountryCallingCode","IDDPrefixPattern","matchedGroups","CAPTURING_DIGIT_PATTERN","numberWithoutIDD","isNumberWithIddPrefix","possibleShorterNumber","possibleShorterNationalNumber","checkNumberLength","countryCallingCodeSource","MAX_LENGTH_COUNTRY_CODE","_countryCallingCode","extractFormattedPhoneNumberFromPossibleRfc3966NumberUri","numberToParse","_ref","extractFormattedPhoneNumber","indexOfPhoneContext","numberToExtractFrom","RFC3966_PHONE_CONTEXT_","phoneContextStart","phoneContextEnd","phoneContext","RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_","RFC3966_DOMAINNAME_PATTERN_","isPhoneContextValid","ParseError","phoneNumberString","PLUS_SIGN","indexOfRfc3966Prefix","RFC3966_PREFIX_","indexOfNationalNumber","indexOfIsdn","RFC3966_ISDN_SUBADDRESS_","parse","defaultCountry","_parseInput","parseInput","extract","formattedPhoneNumber","error","defaultCallingCode","_extractCountryCallin","_extractNationalNumbe","leadingDigits","nationalPhoneNumber","exactCountry","hasSelectedNumberingPlan","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","phoneNumber","PhoneNumber","valid","extended","possible","MAX_INPUT_STRING_LENGTH","startsAt","PHONE_NUMBER_START_PATTERN","replace","AFTER_PHONE_NUMBER_END_PATTERN","VALID_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER_START_REG_EXP","withExtensionStripped","parsePhoneNumberWithError$1","parsePhoneNumberWithError","_Array$prototype$slic","arguments","arg_1","_Array$prototype$slic2","arg_2","arg_3","arg_4","TypeError","_typeof","_parsePhoneNumberWithError","isValidNumberForRegion$1","isValidNumberForRegion","parseNumber","_isValidNumberForRegion","code","instance","_this","_super","Object","name","constructor","DASHES","SLASHES","DOTS","WHITESPACE","BRACKETS","TILDES","CALLING_CODE_REG_EXP","_classCallCheck","validateMetadata","countries","is_object","getCountries","keys","_","getCountryMetadata","countryCode","nonGeographic","nonGeographical","hasCountry","hasCallingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","isNonGeographicCallingCode","selectNumberingPlan","numberingPlan","NumberingPlan","getNumberingPlanMetadata","getCountryCodeForCallingCode","_type","country_phone_code_to_countries","country_calling_codes","chooseCountryByCountryCallingCode","globalMetadataObject","getDefaultCountryMetadataForRegion","_getFormats","map","Format","_getNationalPrefixFormattingRule","nationalPrefixFormattingRule","_nationalPrefixForParsing","_getNationalPrefixIsOptionalWhenFormatting","nationalPrefixIsOptionalWhenFormattingInNationalFormat","_type2","Type","DEFAULT_EXT_PREFIX","_format","leadingDigitsPatterns","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","maxLength","VALID_DIGITS","VALID_PHONE_NUMBER_WITH_EXTENSION","FIRST_GROUP_PATTERN","extension","countryOrCountryCallingCode","setExt","getPossibleCountries","isPossible","isValid","isNonGeographic","isEqual","formatNational","formatInternational","getURI","addMethod","Yup","YUP_PHONE_METHOD","yupPhone","strict","errorMessage","errMsg"],"mappings":"iPAIeA,QAASA,EAAT,CAA8BC,CAA9B,CAAoCC,CAApC,CAAgD,CAC1DC,CAAAA,CAAOC,KAAMC,CAAAA,SAAUC,CAAAA,KAAMC,CAAAA,IAAtBH,CAA2BF,CAA3BE,CACXD,EAAKK,CAAAA,IAALL,CAAUM,EAAVN,QACOF,EAAKS,CAAAA,KAALT,CAAW,IAAXA,CAAiBE,CAAjBF,CAHuD;;;;;gJCIhDU,WAAAC,EAAAC,EAAe,CAC1BD,CAAAA,CAAIA,CAAAA,CAAAA,KAAAA,CAAJA,GAAIA,CACJC,EAAAA,CAAIA,CAAAA,CAAAA,KAAAA,CAAJA,GAAIA,UACAC,EAAKF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAT,GAASA,EACLG,EAAKF,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAT,GAASA,EACAG,EAAT,EAAA,EAAgBA,EAAOA,CAAAA,GAAK,KACpBC,EAAKC,MAAAA,CAAOJ,CAAAA,CAAhBE,CAAgBF,CAAPI,EACLC,EAAKD,MAAAA,CAAOH,CAAAA,CAAhBC,CAAgBD,CAAPG,KACLD,EAAJE,EAAa,MAAA,MACTA,EAAJF,EAAa,MAAO,CAAP,KACT,CAACG,KAAAA,CAADH,CAACG,GAAaA,KAAAA,CAAlBD,CAAkBC,EAAW,MAAA,MACzBA,KAAAA,CAAAA,CAAAA,GAAa,CAACA,KAAAA,CAAlBD,CAAkBC,EAAW,MAAO,CAAP,CANL,OAQxBR,EAAAA,CAAAA,CAAAA,GAAQC,CAAAA,CAAZ,CAAYA,EACDD,CAAAA,CAAAA,CAAAA,CAAAA,CAAOC,CAAAA,CAAPD,CAAOC,CAAPD,CAAAA,CAAAA,CAAmBA,CAAAA,CAAAA,CAAAA,CAAAA,CAAOC,CAAAA,CAAPD,CAAOC,CAAPD,CAAc,CAAdA,CAAAA,CAA1B,EAEG,CAACA,CAAAA,CAAD,CAACA,CAAD,EAASC,CAAAA,CAAT,CAASA,CAAT,CAAA,CAAA,CAAqBD,CAAAA,CAAAA,CAAAA,CAAAA,EAAQ,CAACC,CAAAA,CAATD,CAASC,CAATD,CAAgB,CAAhBA,CAAAA,CAA5B,CAhB0B;;yECoa9BS,QAAAA,EAAA,CAAAC,CAAA,CAAAC,CAAA,CAA8B,QAC7BA,QACC,mBACQD,EAAAA,CAAP,CAAOA,OACR,eACQA,EAAAA,CAAP,CAAOA,OACR,kBACQA,EAAAA,CAAP,CAAOA,OACR,qBACQA,EAAAA,CAAP,CAAOA,OACR,wBACQA,EAAAA,CAAP,CAAOA,OACR,kBACQA,EAAAA,CAAP,CAAOA,OACR,YACQA,EAAAA,CAAP,CAAOA,OACR,cACQA,EAAAA,CAAP,CAAOA,OACR,aACQA,EAAAA,CAAP,CAAOA,OACR,oBACQA,EAAAA,CAAP,CAAOA,EArBoB,CA0EvBE,QAAAA,EAAA,CAAAC,CAAA,CAAAhB,CAAA,CAAkD,CACxDA,CAAAA,CAAW,IAAAiB,CAAA,CAAXjB,CAAW,KACPA,CAAAA,CAAAA,UAAAA,CAAJgB,CAAIhB,QACIA,EAAAA,CAAAA,OAAAA,CAAAA,CAAAA,CAAPkB,CAAAA,kBAAOlB,QAEFmB,MAAA,CAAA,mBAAAC,CAAAA,MAAA,CAANJ,CAAM,CAAA;AALkD,CAczDK,QAAAA,EAAA,CAAArB,CAAA,CAA8B,CACrBsB,CAAAA,CAAYtB,CAApBsB,CAAAA,OACA,YAAI,MAAAA,QACHC,CAAAA,GAAA,IAAUD,MACVE,CAAAA,GAAA,IAAUF,MACVG,CAAAA,GAAA,IAAUH,MACVI,CAAAA,GAAA,IAAUJ,GAEVA,EAEoC,CAA7B,CAAA,GAAIpB,CAAAA,CAAOoB,CAAPpB,CAvgBbyB,OAugBazB,CAAJ,KACNsB,CAAAA,EADM,CACN,CAAA,CADM,CAE6B,CAA7B,CAAA,GAAItB,CAAAA,CAAOoB,CAAPpB,CAtgBb0B,QAsgBa1B,CAAJ,KACNuB,CAAAA,EADM,CACN,CAAA,CADM,KAGNC,CAAAA,EAHM,CAGN,CAAA,MANAH,CAAAA,GAAA,CAAA,CAT2B,CCjffM,QAAAA,EAAA,CAAAC,CAAA,CAAyC,CA+CnDC,CAAAA,CA/DLC,OA+DKD,CACGE,CAAAA,CAzCPC,IAyCOD,MAEHE,EAAeC,sIAAfD,CAEGF,CAAAA,CA7CPC,IA6COD,CAFHE,CAlDmDE,KAuDnDC,EAAgBF,8FAAhBE,CAEFL,CAAAA,CA9CFM,GA8CEN,CAFEK,CAvDmDD,KA4DnDG,EA5DmDC,OA4DnDD,CACFP,CAAAA,CAhDFS,GAgDET,CADEO,CAAJ;AAIIG,EAAmBC,qDAAnBD,CAEGV,CAAAA,CAzDPY,IAyDOZ,CAFHU,CAhEmDN,KAqEnDS,EAAiBF,iDAAjBE,CAEEb,CAAAA,CA5DNM,GA4DMN,CAFFa,CArEmDT,WAsFhDN,GAAAA,IAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,IAAPe,CAtFuD,CCVzCC,QAAAA,GAAA,CAAAC,CAAA,CAAkC,KAC1CC,EAAQD,CAAAA,CAAAA,MAAAA,CAAdE,CAAcF,KACd,EAAIC,QACH,EAIKE,EAAAA,CAAyBH,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAA/BC,CAA+BD,CACzBI,EAAAA,CAAUJ,CAAAA,CAAAA,KAAAA,CAAhBE,CAAgBF,UACZzC,EAAJ,EACOA,EAAI6C,CAAXC,CAAAA,QAA2B,IACtBD,CAAAA,CAAJ7C,CAAI6C,QACI,CACNJ,OADMG,CAAA,CAENG,IAAKF,CAAAA,CAAO7C,CAAP6C,CAFC,CAKR7C,EAAAA,EAP0B,CAVqB;;wGCQlCgD,QAAAA,EAAA,CAAAC,CAAA,CAA4C,KACtDC,EADsD,EAQ1DC,EAAAA,CAAAC,EAAAA,CAAwBH,CAAAA,CAAAA,KAAAA,CAAxB,EAAwBA,CAAxBG,MAAA,IAAAC,EAAA,CAAAC,CAAAD,CAAAC,CAAAH,CAAA,EAAAG,EAAAA,MAA0C,KAA/BC,EAA+BF,CAAAG,CAAAA,KACzCN,EAAAA,CAAAA,IAkBD,MAlBoCK,EAAzBE,SAwBV,ICAMC,EAAAA,CDxB6BH,CCwB7BG,CDxBNR,EAAAA,CAAAA,CAAAA,EAAUO,CAAVP,EAAAA,EAAAA,CADyC,OAG1CA,EAX0D;;2DEX5CS,QAAAA,GAAA,CAAA/D,CAAA,CAAAC,CAAA,CAA2B,KACnC+D,EAAShE,CAAfN,CAAAA,KAAeM,EAEfuD,EAAAA,CAAAC,EAAAA,CAAAvD,CAAAuD,MAAA,IAAAC,EAAA,CAAAC,CAAAD,CAAAC,CAAAH,CAAA,EAAAG,EAAAA,MAAWO,EAAcR,CAAAG,CAAAA,MACxB,EAAI5D,CAAAA,CAAAA,OAAAA,CAAAA,CAAAA,GACHgE,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,QAIKA,EAAAE,CAAAA,IAAA,CAAY,SAAAlE,EAAAC,EAAA,OAAUD,GAAVC,CAAA,CAAZ,CATkC,CCEnCkE,QAAAA,EAAA,CAAAC,CAAA,CAAAzD,CAAA,CAAAd,CAAA,CAAkE,KAClEwE,EAAYxE,CAAAA,CAAAA,IAAAA,CADsDc,CACtDd,EASdyE,EAAmBD,CAAnBC,EAAgCD,CAAbA,CAAAA,eAAaA,EAAhCC,EAA+DzE,CAVK0E,CAAAA,eAUL1E,MAI/D,CAAJyE,QACC,iBAGD,yBAAI3D,EAAiC,IAGhC,CAACd,CAAAA,CAAAA,IAAAA,CAAL,YAAKA,QAGGsE,EAAAA,CAAwBC,CAAxBD,CAAwB,QAAxBA,CAAPtE,CAAOsE,GAGFK,EAAc3E,CAAAA,CAAAA,IAAAA,CAApB,QAAoBA,KAOnByE,EAAmBP,EAAAA,CAAWO,CAAXP,CAA8BS,CANjCD,CAAAA,eAMiCC,EAA9BT,EAhBgB,KA6BhC,IAAIpD,CAAJ,EAAY,CAAZ0D,CAAA,OACJ,gBAGKI,EAAAA,CAAgBL,CAnDkDlB,CAAAA,MA6DlEwB,EAAAA,CAAiBJ,CAAAA,CAAvB,CAAuBA,QAEnBI;AAAJD,EACC,cAGGC,EAAJD,EACC,YAGGH,CAAAA,CAAiBA,CAAAA,CAAAA,MAAjBA,CAAAA,CAAAA,EAAJG,EACC,WAIMH,CAAAA,EAAAA,CAAAA,CAAAA,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,aAAAA,CAAP,gBA5EwE,CC0DlEK,QAAAA,EAAA,CAAAP,CAAA,CAAAvE,CAAA,CAAoD,QD/DnDsE,CAAAA,CCgEkBC,CDhElBD,CAAwBS,IAAAA,EAAxBT,CCgEPtE,CDhEOsE,QCiEN,oBACC,CAAA,gBAMA,CAAA,EATwD,CC7D5CU,QAAAA,EAAA,CAAAC,CAAA,CAAAC,CAAA,CAAmD,OAI1DC,CAAA,IAAAC,MAAA,CAAW,MAAX,CAAWF,CAAX,CAAA,IAAA,CAAAC,EAAAA,IAAA,CADAF,CACA,EADPA,EACO,CAJ0D;;2ECWnDI,QAAAA,EAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAvF,CAAA,CACf,CAGCuF,CAAAA,CAAUA,CAAVA,EAHD,MAOMD,CAALtE,CAAAA,UAIAhB,CAUKgF,CAVM,IAAA/D,CAAA,CAAXjB,CAAW,CAUNgF,CARLhF,CAAAA,CAAAA,mBAAAA,CAA6BsF,CAA7BtF,CAAAA,OAAAA,CAA4CsF,CAA5CtF,CAAAA,kBAAAA,CAQKgF,CANCT,CAMDS,CANkBO,CAAAA,CAAAA,EAAAA,CAAaD,CAAbC,CAAAA,cAAAA,CAAoCD,CAf5DE,CAAAA,KAqBMR,CAAAA,CAAAA,CAAeT,CAAfS,CAAgChF,CAArCyF,CAAAA,qBAAqCzF,EAAhCgF,OAKDU,CAAAA,CAAmBnB,CAAnBmB,CAAmB,YAAnBA,CAAJ1F,CAAI0F,QAKC1F,EAAAA,CAAAA,IAAAA,CAAAA,QAAAA,GAAJ,KAA+BA,CAAAA,CAAAA,IAAAA,CAAAA,QAAAA,CAAAA,CAAAA,OAAAA,IAW3B,CAACA,CAAAA,CAAAA,IAAAA,CAAL,QAAKA,GAOD0F,CAAAA,CAAmBnB,CAAnBmB,CAAmB,QAAnBA,CAAJ1F,CAAI0F,EACH,uBAGD,YAGDhC,EAAAA,CAAAC,EAAAA,CAAAgC,EAAAhC,MAAA,IAAAC,EAAA,CAAAC,CAAAD,CAAAC,CAAAH,CAAA,EAAAG,EAAAA,SAAW/C,CACN4E,CAD0C9B,CAAAG,CAAAA,KAC1C2B,CAAAA,CAAAA,CAAmBnB,CAAnBmB,CAAmB5E,CAAnB4E,CAAJ1F,CAAI0F,QACH5E,GA1DH,CA+DO4E,QAAAA,EAAA,CAAAnB,CAAA,CAAAzD,CAAA,CAAAd,CAAA,CAA6D,CACnEc,CAAAA,CAAOd,CAAAA,CAAAA,IAAAA,CAAPc,CAAOd,QACH,CAAAc;AAAS,CAACA,CAAd8E,CAAAA,OAAc9E,IASVA,CAAAA,CAAAA,eAAAA,IAAJ,EACCA,CAAAA,CAAAA,eAAAA,EAAAA,CAAAA,OAAAA,CAA+ByD,CAA/BzD,CAAAA,MAAAA,EACA,CAAA,EAEMkE,CAAAA,CAAeT,CAAfS,CAAgClE,CAAvC8E,CAAAA,OAAuC9E,EAAhCkE,CAf4D,CC1CrDa,QAAAA,GAAA,CAAAP,CAAA,CAAAC,CAAA,CAAAvF,CAAA,CACf,CAGCuF,CAAAA,CAAUA,CAAVA,EAAAA,EAEAvF,EAAAA,CAAW,IAAAiB,CAAA,CAAXjB,CAAW,CAWXA,EAAAA,CAAAA,mBAAAA,CAA6BsF,CAA7BtF,CAAAA,OAAAA,CAA4CsF,CAhB7CpE,CAAAA,kBAgBClB,QAIIA,EAAJ8F,CAAAA,QAAI9F,GACH+E,IAAAA,KAAOM,CAAAA,CAAaC,CAAbD,CAAaE,CAAbF,CAA8BrF,CAA9BqF,CAAAA,QAAAA,EAMDL,CAAAA,CADgBO,CAAAA,CAAAA,EAAAA,CAAaD,CAAbC,CAAAA,cAAAA,CAAoCD,CAA3DE,CAAAA,KACOR,CAAgChF,CAAvCyF,CAAAA,qBAAuCzF,EAAhCgF,CA3BR,CC9Bee,QAAAA,GAAA,CAAAC,CAAA,CAAAzB,CAAA,CAAAvE,CAAA,CAA8E,QAExFiG,EAAoBC,CADNA,IAAAjF,CAAAiF,CAAlBlG,CAAkBkG,CACMA,EAAAA,6BAAAA,CAAxBF,CAAwBE,GAIjBD,CAAAE,CAAAA,MAAA,CAAyB,SAAAnF,EAAa,KAMvCkF,EAAY,IAAAjF,CAAA,CALjBjB,CAKiB,CAClBkG,EAAAA,CAAAA,mBAAAA,CAN0ClF,CAM1CkF,IACA,GAAIA,CAAAA,CAAAA,aAAAA,CAAAA,eAAAA,EAAAA,CAAAA,OAAAA,CAPsC3B,CAOtC2B,CAAAA,MAAAA,EACH,CAAA,EAED,CAAA,QAVQE,EADqC,CAAtC;AAFN,EAJ2F;;weCqB9EC,QAAAA,GAAA,CAAAf,CAAA;AAAAgB,CAAA,CAAAf,CAAA,CAAAvF,CAAA,CAAwD,CAGrEuF,CAAAA,CADDA,EACQgB,EAAAA,CAAAA,EAAAA,CAAA,EAAAA,CAAAC,EAAAD,CAAAA,CAAPhB,CAAOgB,EAEPhB,EAGDvF,EAAAA,CAAW,IAAAiB,CAAA,CAAXjB,CAAW,KAEPsF,CAAAA,CAAAA,SAAJ,QAAqBA,CAAAA,CAAAA,QAAyB,IAEzC,CAACtF,CAAAA,CAAAA,UAAAA,CAAoBsF,CAAzBtE,CAAAA,OAAKhB,OACEmB,MAAA,CAAA,mBAAAC,CAAAA,MAAA,CAA8BkE,CAApCtE,CAAAA,OAAM,CAAA,EAEPhB,CAAAA,CAAAA,OAAAA,CAAiBsF,CAAjBtF,CAAAA,OAAAA,CAL6C,KAOzC,IAAIsF,CAAJpE,CAAAA,kBAAA,CACJlB,CAAAA,CAAAA,mBAAAA,CAA6BsF,CAA7BtF,CAAAA,kBAAAA,CADI,KAGA,OAAOsF,EAAAA,CAAAA,KAAP,EAAA,OAECpE,EAAqBlB,CAA3BkB,CAAAA,kBAA2BlB,GAErBuE,EAAiBgB,CAAAA,CAAAA,EAAAA,CAAaD,CAAbC,CAAAA,cAAAA,CAAoCD,CAxBWE,CAAAA,aA8BtEc,QACC,cAGK,CAAJ/B,QACC,EAGkBvB,EAAAA,CADnBA,CACmBA,CADVyD,CAAAA,CAAoBlC,CAApBkC,CAAqCnB,CAAjBoB,CAAAA,WAApBD,CAAoB,UAApBA,CAAoBzG,CAApByG,CAATzD,CAASyD,QAoFJnD,CAnFcA,CAmFdA,CAnFuBgC,CAAThC,CAAAA,GAmFdA,EAAMqD,GAnFsCpB,CAAjDoB,CAAAA,eAmFWA,EAAeC,CAAfD,CAAerD,CAAfqD,CAnFQ3G,CAmFR2G,CAANrD,CAAPsD,OAjFC,mBAGK,CAAJrC,QACC,GAAAnD,CAAAA,MAAA,CAAAF,CAAA,CAED8B;CAAAA,CAASyD,CAAAA,CAAoBlC,CAApBkC,CAAoB,IAApBA,CAAoB,eAApBA,CAAoBzG,CAApByG,CAATzD,CAASyD,CAEUzD,EAAAA,CADnBA,CACmBA,CADb,GAAA5B,CAAAA,MAAA,CAAAF,CAAA,CAAA,GAAA,CAAAE,CAAAA,MAAA,CAAN4B,CAAM,QA0EDM,CAzEcA,CAyEdA,CAzEuBgC,CAAThC,CAAAA,GAyEdA,EAAMqD,GAzEsCpB,CAAjDoB,CAAAA,eAyEWA,EAAeC,CAAfD,CAAerD,CAAfqD,CAzEQ3G,CAyER2G,CAANrD,CAAPsD,OAvEC,cAEC,GAAAxF,CAAAA,MAAA,CAAAF,CAAA,CAAAE,CAAAA,MAAA,CAAAmD,CAAA,OAED,UAEQ,CAAA,CAAA,GAAAnD,CAAAA,MAAA,CAAAF,CAAA,CAAAE,CAAAA,MAAA,CADcmD,CACd,CCpC8BjB,EAAAA,CDqC/BgC,CAAMhC,CAAAA,OCrCiBN,MAI/B,MAJ+BA,CAI3BA,CAAAA,CAAAA,OACG7B,MAAA,CAAN,2DAAM,IAEP,MAAAC,CAAAA,MAAA,CAP+B4B,CAO/B,CAAA5B,CAAAA,MAAA,CAAuBkC,CAAAA,CAAM,OAANA,CAAGA,CAAHA,CAAvB,EAAA,SALC,SDiCQuD,QASR,SACK,CAACtB,CAALuB,CAAAA,iBAIiCJ,KAAAA,EAEhCpB,CAFgCoB,CAAAA,WAAAA,CAAAI,EAIhCvB,CAJgCuB,CAAAA,WAAjC9G,EAAAA,CAAAA,CA8D6Be,EAAAA,CAAqB+F,CAArB/F,CAAmCf,CADjEA,CAAAA,QAC8Be,IA9DIG,GAiE5B0F,EAAkBH,CAAAA,CAjEUlC,CAiEVkC,CAAoBC,CAApBD,CAAoB,UAApBA,CAD0BzG,CAC1ByG,IAGxB,MApEkCvF,EAAAA,EAqE1BA,IAAP0F,EAWDA,IEnKKG,EAAkB,IAAA9F,CAAA,CFqK+BjB,CAAvDA,CAAAA,QErKwB;AACxB+G,CAAAA,CAAAA,mBAAAA,CFoK8BD,CEpK9BC,CFoK8BhC,IAAAA,EEpK9BgC,IACIA,CAAJC,CAAAA,gBAAID,GACIA,CAAPC,CAAAA,gBAAOD,GAEJE,EAAAA,CAAAA,IAAAA,CAA+BF,CAAnCG,CAAAA,SAAmCH,EAA/BE,EACIF,CAAPG,CAAAA,SAAOH,GAP4D,IAAA,KFuKpEI,EACC,EAAA/F,CAAAA,MAAA,CAAA+F,CAAA,CAAA,GAAA,CAAA/F,CAAAA,MAAA,CApFkCF,CAoFlC,CAAA,GAAA,CAAAE,CAAAA,MAAA,CAA6CqF,CAAAA,CApFXlC,CAoFWkC,CAAoB,IAApBA,CAAoB,eAApBA,CAA7CzG,CAA6CyG,CAA7C,EAvBA,IAAA,UATMnD,CA7CcA,CA6CdA,CA7CgCgC,CAAlBhC,CAAAA,GA6CdA,EAAMqD,GA7C+CpB,CAA1DoB,CAAAA,eA6CWA,EAAeC,CAAfD,CAAerD,CAAfqD,CA7CQ3G,CA6CR2G,CAANrD,CAAPsD,eA1CQzF,MAAA,CAAA,yDAAAC,CAAAA,MAAA,CAAAkF,CAAA,CAAN,GAAM,CAAA,GA/E8D,CAmFvEG,QAAAA,EAAA,CAAAzD,CAAA,CAAA0D,CAAA,CAAAU,CAAA,CAAApH,CAAA,CAAAuF,CAAA,CAAgF,KACzEe,CAgBkE,EAAA,CAAA,CAhBnCtG,IAAAA,EAAAA,CAADqH,CAAAA,OAACrH,OAiBrC0D,EAAAC,EAAAA,CAAA2D,CAAA3D,EAAA,CAAAE,CAAAD,CAAAC,CAAAH,CAAA,EAAAG,EAAAA,MAAuC,CAA5ByC,CAAAA,CAA4B1C,CAAAG,CAAAA,SAItC,EAAIuC,CAAAA,CAAAA,qBAAAA,EAAAA,CAAAA,OAA2C,KAExCiB,EAA2BjB,CAAAA,CAAAA,qBAAAA,EAAAA,CAA+BA,CAAAA,CAAAA,qBAAAA,EAAAA,CAAAA,MAA/BA;AAFa,CAEbA,KAEjC,IAzBFtD,CAyBMwE,CAAAA,MAAAA,CAAAA,CAAAA,UAJ0C,IAS3CxC,CAAAA,CA9BLhC,CA8BKgC,CAAiCsB,CAArCV,CAAAA,OAAqCU,EAAjCtB,SAbkC,CADiC,CAAA,CAAA,IAAA,EAAA,IAfpE,CAAJsB,QACCtD,EAEqCsD,EAAAA,CAAAA,CAIZc,EAAAA,CADzB,eACyBA,GAAAA,CACJd,EAAAA,CAAAA,CAAAA,CAAAA,sDAAAA,EAAAA,EAAoEf,CAApEe,EAAAA,CAAAA,CAAAA,GAA+Ef,CAAAA,CAAAA,cAA/Ee,CAAAA,CAAAA,CAAAA,CAFrB,CAAA,CAAAI,EAIC1G,EG3GI4G,EAAAA,CHoGgC5D,CGpGdA,CAAAA,OAAAA,CACvB,IAAAoC,MAAA,CAAWkB,CADYtD,CAAAA,OACZsD,EAAX,CADuBtD,CANvByE,CAQAA,CACGnB,CADmBoB,CAAAA,mBACnBpB,EADHmB,CAPAE,CAuBEA,EAAsBrB,CAAtBqB,CAAAA,4BAAsBrB,EAAtBqB,CACGrB,CAAAA,CAAAA,MAAAA,EAAAA,CAAAA,OAAAA,CAAAA,EAAAA,CAA6CA,CADhDqB,CAAAA,4BACgDrB,EAA7CA,CADHqB,CAEGrB,CApBNA,CAAAA,MAoBMA,EApBkBtD,IANvByE,EA8BAb,CCTMA,CAAAA,OAAAA,CAAwB,IAAAxB,MAAA,CAAA,GAAAhE,CAAAA,MAAA,CAAAwG,CAAA,CAAA,IAAA,CAAA,CAAxBhB,GAAwB,CAAxBA,CAAAA,GAAAA,CAAPiB,CAAAA,IAAOjB,GDWPA,QH0EOkB,EALwE;;yUKpGjEC,QAAAA,EAAA,CAAA/E,CAAA,CAAAhD,CAAA,CAAiD,CAAA,IAAA,CAAA,CAAA,CCA4B,EAAA,CAAA,IDatCgD,GAHrDhD,CCTcA,CAAAA,aAAdgI,CAAAA,wBAAchI,GAAmD,KAI1DiI,EAAgB,IAAA7C,MAAA,CAAW,MAAX,CDKvBpF,CCL2CA,CAAAA,aAATgI,CAAAA,wBAAShI,EAApB,CAAtB,GAAsB,KAChBkI,EAAcD,CAAAA,CAAAA,IAAAA,CDOgCjF,CCPhCiF,EACH,KAmBVE,EAAsBD,CAAAA,CAAAA,MAAtBC;AAAN,EACMC,EAAoBD,CAApBC,CAAoBD,CAApBC,EAA+CF,CAAAA,CAArDC,CAAqDD,CDjBvDlI,ECkBMA,CAAAA,2BAAAA,IAAJoI,GACC7D,EDhBkDvB,CCgBjCA,CAAAA,OAAAA,CAAAA,CAAAA,CDnBpBhD,CCkBmEqI,CAAAA,2BAG/DrI,EAFgBgD,EAMjB,EAAImF,IACHzB,EAAcwB,CAAAA,CAAdxB,CAAcwB,KAgBf3D,EDvCkDvB,CCuCjCA,CAAAA,KAAAA,CADkBkF,CAAAA,CAAnC,CAAmCA,CAN/B7E,CAAAA,MAOaL,EAGjBoF,IACC1B,EAAcwB,CAAAA,CAAdxB,CAAcwB,GAShBE,KACOE,EDrD4CtF,CCqDFA,CAAAA,OAAAA,CAAekF,CAAAA,CAA/D,CAA+DA,CAAflF,EDrDEA,CCsDnBA,CAAAA,KAAAA,CAAAA,CAAAA,CAFTsF,CAEStF,IDzDlChD,CCgEkCA,CAAAA,aAA/BuI,CAAAA,cAA+BvI,IDhElCA,CCiEqBA,CAAAA,aAAjBuI,CAAAA,cAAiBvI,MAKZuE,SAzES,CAN+C,GDYZvB,UCbsC,IDkBvFuB,IAAJvB,EAA+B,GA2C3BgC,CAAAA,CA1CmChC,CA0CnCgC,CA1CHhF,CA0CGgF,CAAAA,qBAAsChF,EAAtCgF,GACH,CAACA,CAAAA,CA3CqCT,CA2CrCS,CA3CDhF,CA0CDyF,CAAAA,qBACuCzF,EAArCgF,EACD,CAAA,EAeD,CAAA,KA3DK,CAACwD,QAEG,CAAEjE,eAAgBvB,CAAlB,KAIJhD,CAAJ0E,CAAAA,eAAI1E,GAA4B,CAwDoC,CAAA,QX3F9DsE,CAAAA,CW4CkCC,CX5ClCD,CAAwBS,IAAAA,EAAxBT,CW4CLtE,CX5CKsE,QW6FN,iBACA,mBAIC,CAAA;AAEA,CAAA,KAxDI,CAACmE,QAEG,CAAElE,eAAgBvB,CAAlB,CAXuB,CAPF,OAuBxB,CAAEuB,eAAFA,CAAA,CAAkBmC,YAAAA,CAAlB,CAzCwD,CEUjDgC,QAAAA,GAAA,CAAA1F,CAAA,CAAAhC,CAAA,CAAAgF,CAAA,CAAAhG,CAAA,CAKb,IACG,CAAJgD,QACC,MAYD,MAAIA,CAAAA,CAAAA,CAAAA,EAAmB,CAGiBA,IAAAA,EAAAA,KAAAhC,GCnClC+F,IAAAA,EAAkB,IAAA9F,CAAA,CDgCDjB,CChCC,CACxB+G,EAAAA,CAAAA,mBAAAA,CDkCwC/F,CClCxC+F,CDkCwCf,CClCxCe,CACM4B,EAAAA,CAAmB,IAAAvD,MAAA,CAAW2B,CAApCG,CAAAA,SAAoCH,EAAX,CACzB,KAAI/D,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,YAIJA,EAASA,CAAAA,CAAAA,KAAAA,CAAaA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAZwDK,CAAAA,MAYrEL,KAKH4F,EAAgB5F,CAAAA,CAAAA,KAAAA,CAAtB6F,EAAsB7F,IAClB4F,MAAiBA,CAAAA,CAAAA,CAAAA,GAArB,EAAiDA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,QAChD,MAAIA,CAAAA,CAAAA,CAAAA,SAIL5F,oBDqBK8F,GAAoBA,IAAxB9F,EACC+F,CACA/F,CADA+F,CAAAA,CACA/F,CAAAA,CAAAA,CAAS,GAATA,CAAAA,MACM,IAKFhC,GAAJgF,EAA4B,CErC7B,CAAA,CAAA,CFyCqEhD,CAAAA,CAAAA,CExChE9B,EAAAA,CFwCgEF,CExC3CA,CAAUD,CAAAA,CFwCiCC,CExCjCD,CAAHf,CAAGe,CAAVC,CFwC2CgF,KEvCtE,IAAIhD,CAAAA,CAAAA,OAAAA,CAAAA,CAAAA,EAA0C,CAC7ChD,CAAAA,CAAW,IAAAiB,CAAA,CAAXjB,CAAW,CACXA,EAAAA,CAAAA,mBAAAA,CFqCqEgB,CErCrEhB,CFqCqEgG,CErCrEhG,CACMgJ,EAAAA,CAAwBhG,CAAAA,CAAAA,KAAAA,CAAa9B,CAA3CmC,CAAAA,MAA8BL,CAEbiG,EAAAA,CACblB,CAAAA,CAAqBiB,CAArBjB,CAFJ/H,CAEI+H,CAFJxD,CAAAA;IAOCA,EACGwD,CAAAA,CAAqB/E,CAArB+E,CAFJ/H,CAEI+H,CAZyCxD,CAAAA,kBA0B3C,CAACS,CAAAA,CAAeT,CAAfS,CAAgChF,CAAjCyF,CAAAA,qBAAiCzF,EAAhCgF,GAEDA,CAAAA,CAAeiE,CAAfjE,CAA+ChF,CAHhDyF,CAAAA,qBAGgDzF,EAA/CgF,GAJF,af3CMV,CAAAA,CekDYC,CflDZD,CAAwBS,IAAAA,EAAxBT,CekDL4E,CflDK5E,EemDJ,GACMpD,SADN,CAhC2C,GAuCrC8B,UAzCR,IF+CE9B,QACQ,CACNiI,yBADM,+BAAA,CAENjI,mBAFMA,CAAA,CAGN8B,OAbFA,CAUQ,CAXmB,OAkBrB,CAGNA,OAAAA,CAHM,CAvBD,CAVe,IA0CvB,MAAIA,CAAAA,CAAAA,CAAAA,QACH,EAGDhD,EAAAA,CAAW,IAAAiB,CAAA,CA5DVjB,CA4DU,MAWPO,EAAJ,EG3FM6I,GH4FC7I,EAAAA,GAAoCA,GAAKyC,CAAhDK,CAAAA,QAA+D,CACxDnC,CAAAA,CAAqB8B,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAA3BzC,CAA2ByC,KACvBhD,CAAAA,CAAAA,cAAAA,CAAJqJ,CAAIrJ,QACHA,EAAAA,CAAAA,mBAAAA,CAAAA,CAAAA,CACO,CAAA,CACNmJ,yBAA0BJ,CAAAA,CAAqB,sBAArBA,CADpB,4BAAA,CAEN7H,mBAFMmI,CAAA;AAGNrG,OAAQA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAHF,CAMRzC,EAAAA,EAV8D,OAa/D,EArFC;yWIba+I,QAAAA,GAAA,CAAAC,CAAA,CAAAC,CAAA,CAEZ,CADFC,CAAAA,CACED,CADFC,CAAAA,2BC+CMC,KAAAA,ED7CNH,CC6C4BI,CAAAA,OAAAA,CAXtBC,iBAWsBD,KAE5B,EAAID,IACH,aAGyBA,CAEtBG,EAT4DxG,EAS5DwG,CAAAA,CAAAA,EDrDJN,CCqDAlG,CAAAA,SACC,YAGKyG;ADzDNP,CCyDwBI,CAAAA,OAAAA,CAAAA,GAAAA,CAbwCE,CAaxCF,IAExB,GAAIG,ED3DJP,CC4DQI,CAAAA,SAAAA,CAAAA,CAAAA,CAAPG,CAAOH,ED5DRJ,CC8DQI,CAAAA,SAAAA,CAAPE,CAAOF,IAWR,ODxEAI,ECyEC,CAAA,EAGD,ID5EAA,CC4EIA,CAAAA,OACH,CAAA,EAIMC,EAAAA,CAAAA,IAAAA,CDjFPD,CCiFOC,GACNC,EAAAA,CAAAA,IAAAA,CDlFDF,CCkFCE,KDlFG,CAACC,OACE,KAAAC,CAAA,CAAN,cAAM,EAKP,OAAIJ,EAGHK,EAAoBX,CAAAA,CAAAA,CAAAA,GAApBW,IAEAA,CAwBAA,CAzBM,EAyBNA,CC3CKC,GD2CLD,GApBIL,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAoBJK,GAnBCA,CAmBDA,EAnBCA,CAmBDA,EAXME,CAWNF,CAX6Bb,CAAAA,CAAAA,OAAAA,CCQxBgB,MDRwBhB,CAW7Ba,CALCI,CAKDJ,CANA,GAAIE,EACqBA,EAAxBE,EAEAA,CAGDJ,CADMV,CACNU,CAD4Bb,CAAAA,CAAAA,OAAAA,CCDvBK,iBDCuBL,CAC5Ba,CAAAA,CAAAA,EAAqBb,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,CAArBa,CAAqBb,EAMhBkB,EAAAA,CAAcL,CAAAA,CAAAA,OAAAA,CCPdM,QDOcN,CACpB,GAAIK,IACHL,EAAoBA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,CAApBA,CAAoBA,MAQrB,KAAIA,QACHA,EAtDC,CEiDYO,QAAAA,GAAA,CAAA1F,CAAA,CAAAM,CAAA,CAAAvF,CAAA,CAAwC,CAGtDuF,IAAAA,CAAAA,EAAAA,CAAUA,CAAVA,EAAAA,EAEAvF,EAAAA,CAAW,IAAAiB,CAAA,CAL2CjB,CAK3C,KAGPuF,CAAAA,CAAAA,gBAA0B,CAACvF,CAAAA,CAAAA,UAAAA,CAAoBuF,CAAnDqF,CAAAA,cAA+B5K,EAA6C,IACvEuF,CAAJ/D,CAAAA,QACO,KAAA2I,CAAA,CAAN,iBAAM,OAEDhJ,MAAA,CAAA,mBAAAC,CAAAA,MAAA,CAA8BmE,CAApCqF,CAAAA,cAAM,CAAA;AAJqE,CAQ5EC,IAAAA,EAAqDC,EAAAA,CAAU7F,CAAV6F,CAAiBvF,CAAP/D,CAAAA,EAAVsJ,CAA6BvF,CAAlFwF,CAAAA,OAAqDD,CAhBC,KAgBtCE,EAAhBH,CAAA7H,CAAAA,MAAsCM,EAAAA,CAAtCuH,CAAAvH,CAAAA,GAA2C2H,EAAAA,CAA3CJ,CAhBsDI,CAAAA,SAmBlD,CAAJD,EAA2B,IACtBzF,CAAJ/D,CAAAA,GAAgB,IACf,cAAIyJ,OACG,KAAAd,CAAA,CAAN,WAAM,OAED,KAAAA,CAAA,CAAN,cAAM,EAJS,OAMhB,EAP0B,CA2M1B,CAAA,CAAA,CA3LmBS,IAAAA,EAEnBrF,CAFmBqF,CAAAA,cAAAM,KAAAA,EAGnB3F,CAHmB2F,CAAAA,kBANpBlL,KAAAA,EAAAA,CAmMAmL,KAAAA,EAA+DzC,EAAAA,CAC9DnF,CAAAA,CA9LmByH,CA8LnBzH,CAD8DmF,CAAyBkC,CAAzBlC,CAAyBwC,CAAzBxC,CAI9D1I,CAJDA,CAAAA,QAA+D0I,CAAzDS,EAAAA,CAANgC,CAAAhC,CAAAA,wBAAgCjI,EAAAA,CAAhCiK,CAAAjK,CAAAA,kBAAoD8B,EAAAA,CAApDmI,CAFCnI,CAAAA,UAWD9B,EACClB,CAAAA,CAAAA,mBAAAA,CAAAA,CAAAA,MAII,IAAIgD,CAAJ,GAAe4H,CAAf,EAAAM,CAAA,EACJlL,CAAAA,CAAAA,mBAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAWAkB,CAVA0J,CAUA1J,GATCF,CASDE,CATCF,CASDE,EAAAA,CAAAA,CAAqBgK,CAArBhK,EAA2CH,CAAAA,CAAqB6J,CAArB7J,CAAsCf,CAAjFkB,CAAAA,QAA2CH,CAZvC,KAcA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,EAAA,OAAA,CAAA,IAELiC,GAOAoI,CAAAA,CAGIrD,CAAAA,CACHxE,CAAAA,CADwBP,CACxBO,CADGwE,CAHJ/H,CAGI+H,CAFHxD,EAAAA,CADD6G,CAAA7G,CAAAA,cAECmC,EAAAA,CAFD0E,CAvCC1E,CAAAA;ICrRKT,ED8UNjG,CC9U0BA,CAAAA,6BAAAA,CD8UkBkB,CC9UlBlB,KAC1BiG,6BCToG,EAAA,CAAA,aAEpGjG,EAAAA,CAAW,IAAAiB,CAAA,CAAXjB,CAAW,CACX0D,EAAAA,CAAAC,EAAA,EAAA,MAAA,IAAAC,EAAA,CAAAC,CAAAD,CAAAC,CAAAH,CAAA,EAAAG,EAAAA,SAAW7C,CAONhB,CAPoC4D,CAAAG,CAAAA,KAOpC/D,CANJA,CAAAA,CAAAA,OAAAA,CADwCgB,CACxChB,CAMIA,CAAAA,CAAJqL,CAAAA,aAAIrL,UACH,KACCsL,CAAAA,MAAAA,CAA2BtL,CAA3BsL,CAAAA,aAA2BtL,EAA3BsL,EAA4D,GAC5DtK,SAD4D,MAMzD,IAAIqE,CAAAA,CAAc,CAAEG,OAAF,CAA8BxE,QAAAA,CAA9B,CAAdqE,CAAaN,IAAAA,EAAbM,CAAkErF,CAAtEA,CAAAA,QAAIqF,CAAJ,CAA0F,GAC9FrE,SAD8F,CAlBI,CAAA,CAAA,IAAA,EAAA,KDCT,EAAA,CAAA,IAAA,EDsV3FuK,KACCvK,EAAAA,EAEA,QAAIuK,GAKHvL,CAAAA,CAAAA,OAAAA,CAAAA,CAAAA,KAIKgB,IAAAmI,IAAA5E,IAKNmC,SA1COyC,cAjCP,CAhMAnI,CAAAA,CADDA,CAECuD,EAAAA,CAFDA,KAaI,CAACvE,CAALwL,CAAAA,wBAAKxL,GAAqC,IACrCuF,CAAJ/D,CAAAA,QACO,KAAA2I,CAAA,CAAN,iBAAM,QAEP,EAJyC,IAQtC,CAAA5F,GHnHEkH,EGmHiBlH,CAAAA,CAAAA,OAA4C,IAG9DgB,CAAJ/D,CAAAA,QACO,KAAA2I,CAAA,CAAN,WAAM;MAGP,EAPkE,IH/G7DuB,GGkIFnH,CAAAA,CAAAA,OAA4C,IAC3CgB,CAAJ/D,CAAAA,QACO,KAAA2I,CAAA,CAAN,UAAM,QAGP,EAL+C,IAQ5C5E,CAAJ/D,CAAAA,SACOmK,EAeNA,CAfoB,IAAAC,EAAA,CAAA1K,CAAA,CAAAqD,CAAA,CAGnBvE,CAHDA,CAAAA,QAAoB,CAepB2L,CAVA3K,CAUA2K,GATCA,CAAAA,CAAAA,OASDA,CATCA,CASDA,EAPAjF,CAOAiF,GANCA,CAAAA,CAAAA,WAMDA,CANCA,CAMDA,EAJArI,CAIAqI,GAHCA,CAAAA,CAAAA,GAGDA,CAHCA,CAGDA,EADAA,CAAAA,CAAAA,0BACAA,CADAA,CACAA,CAAAA,CAMKE,EAAAA,CAAQ,CAACtG,CAAAA,CAAAA,QAAAA,CAAmBvF,CAAnBuF,CAAAA,wBAAmBvF,EAAnBuF,CAADvE,CAAA,EACbgE,CAAAA,CAAeT,CAAfS,CAAgChF,CADnByF,CAAAA,qBACmBzF,EAAhCgF,CADa,CAAd,CAAA,QAIKO,EAALuG,CAAAA,SAMO,CACN9K,QADMA,CAAA,CAENE,mBAFMA,CAAA,CAGNwF,YAHMA,CAAA,CAINmF,MAJMA,CAAA,CAKNE,SAAUF,CAAAA,CAAK,CAAA,CAALA,CACTtG,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,QAAAA,EACAvF,CADAuF,CAAAA,eACAvF,EADAuF,EAEAT,CAAAA,CAAgBP,CAAhBO,CAFAS,CAEAT,CAFAS,CAAAA,CAAAA,CAAAA,CANK,CAAA,CAAA,CAUNC,MAVMjB,CAAA,CAWNjB,IAAAA,CAXM,GALCuI,CAAAA,EA+FFpI,EAAS,CACdzC,QAhGeyC,CA+FD,CAEd+B,MAjGe/B,CA+FD,EA/FCA,IAoGfA,CAAAA,CAAAA,IApGeA,KAsGhBA,CAtGQoI,EAAP,CAAOA,CAAP,EAAOA,CAAAA,EAxG8C,CAuKvDf,QAAAA,GAAA,CAAA7F,CAAA,CAAAzD,CAAA,CAAAuJ,CAAA,CAAuC,CAMlC/H,CAAAA,CAASsG,EAAAA,CAAuDrE,CAAvDqE,CAA8D,CAC1EG,4BAA6BA,QAAA,CAAAxE,CAAA,CAAA,CAtCmC,CAAA,CAAA,IAsCEA,KAlNpE+G;AAkNoE/G,CAlC/DA,CAAAA,WAkC0BzD,OAhCtB,KAAA2I,CAAA,CAAN,UAAM,WAIR,CAAA,IA4BmEY,cAxB7DkB,EAwB6DhH,CAxBlDA,CAAAA,MAAAA,CAAjBiH,EAAiBjH,KACbgH,EAAJ,CAAIA,CAAAA,CAAAA,KAuB+DhH,CApB5DpF,CAAAA,KAAA,CAAAoM,CAAA,CAAAE,CAAAA,OAAA,CAAAC,EAAA,CAAP,EAAO,WAlB0D,CAAA,CAAA,IAAA,EAAA,OAsCzB3C,EAAV,CAD6C,CAA9DH,KAIT,CAAJtG,QACC,MAEG,EHrPEyI,CGqPF,EAAJzI,CGvJOA,CAAAA,MHuJH,EGtJHqJ,EAAAA,CAAAA,IAAAA,CHsJDrJ,CGtJCqJ,CHsJG,QG5IGC,GAAAA,CAAAA,IAAAA,CH6INtJ,CG7IMsJ,EH8IE,CAAErB,MAAO,WAAT,EAER,OAIKsB,EAAwBxJ,EAAAA,CAA9BC,CAA8BD,QAC1BwJ,EAAJjJ,CAAAA,IACCiJ,EAEM,CAAEvJ,OAAAA,CAAF,CAzB+B;;;sZItOxBwJ,QAAAC,GAAA,EAAqC,CCCH,IAChDC,EAAqC/M,KAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CDDrCgN,SCCqChN,CADW;;0RACzCiN,EAAAA,CAAPC,CAAA,CAAA,CAAA,CAAcC,EAAAA,CAAdD,CAAA,CAAA,CAAA,CAAqBE,EAAAA,CAArBF,CAAA,CAAA,CAAA,CAA4BG,EAAAA,CAA5BH,CAAA,CAAA,CAAA,MAGAtH,KAKA,WAAI,MAAAqH,GAGC,KAAM,KAAAK,SAAA,CAZqC,sCAYrC,CAAN,IAIDH,GAAJ,WAAc,MAAAA,GAgBT,GAoBY,QApBZ,GAoBgBI,CAAA,CApBhBJ,CAoBgB,CApBhB,CAEJC,EACCxH,EAAAA,EAGAvF,EAAAA,CANG,KASA,MAAMmB,MAAA,CAAA,2BAAAC,CAAAA,MAAA,CAAN0L,CAAM,CAAA,CAAN;IAvBJE,IACCzH,CACAvF,CADAuF,CACAvF,CAAAA,CAAAA,CAAAA,GAEAuF,EAAAA,IAAAA,GAIDuH,IACCvH,EAAOgB,EAAA,CAAA,CAAKqE,eAAgBkC,CAArB,CAAA,CAAPvH,CAAO,ED1BTvF,EAAAA,CC6CCA,QC/CM2K,GAAAA,CD4CA1F,CC5CA0F,CAAKpE,EAAAA,CAAAA,EAAAA,CAAA,EAAAA,CD4CLhB,CC5CKgB,CAAAA,CAAA,EAAAA,CAAA,CAAqB/E,GAAI,CAAA,CAAzB,CAAA+E,CAALoE,CAAP3K,CAAO2K,CFA4C,CGA7C8B,QAASA,GAAT,EAAqC,OACpClN,EAAAA,CAAqB4N,EAArB5N,CAAiDoN,SAAjDpN,CADoC,CCuC7B6N,QAAAC,GAAA,CAAArK,CAAA,CAAAhC,CAAA,CAAAhB,CAAA,CAA2D,IACzE,WAAI,MAAAgD,QACG,KAAAiK,SAAA,CAAN,yBAAM,KAEP,WAAI,MAAAjM,QACG,KAAAiM,SAAA,CAAN,0BAAM,EASN3H,CAAAA,CXvDKmG,GWsDNzI,CLwCOA,CAAAA,QACNqJ,EAAAA,CAAAA,IAAAA,CKzCDrJ,CLyCCqJ,EKxCQiB,EAAAA,CAAWtK,CAAXsK,CAAoB,CAAE1C,eAAgB5J,CAAlB,CAApBsM,CAARhI,CAAQgI,EAERhI,EChDDC,KAAAA,EAAAA,SDkD8BD,ECjDvBA,CAAAA,UDiDuBtE,GCjDM6E,EAAAA,CDiDNP,CCjDMO,CAAaN,CAAbM,CDiDpC7F,CCjDoC6F,CD+BqC,CEtCnEwH,QAASA,GAAT,EAAkC,OACjC9N,EAAAA,CAAqBgO,EAArBhO,CAA8CoN,SAA9CpN,CADiC;oOCD1B,SAAW,CAAX,uBAAqC,GAAK,4EAAA,CAAA,KAAA,CAAA,GAAA,CAAL,GAAwI,CAAC,IAAD,CAAM,IAAN,CAAxI,IAAyJ,CAAC,IAAD,CAAzJ,IAAqK,CAAC,IAAD,CAArK,IAAiL,CAAC,IAAD,CAAjL,IAA6L,CAAC,IAAD,CAA7L,IAAyM,CAAC,IAAD,CAAzM,IAAqN,CAAC,IAAD,CAArN,IAAiO,CAAC,IAAD,CAAjO,IAA6O,CAAC,IAAD,CAA7O,IAAyP,CAAC,IAAD,CAAM,IAAN,CAAzP,IAA0Q,CAAC,IAAD,CAA1Q,IAAsR,CAAC,IAAD,CAAtR,IAAkS,CAAC,IAAD,CAAlS,IAA8S,CAAC,IAAD,CAAM,IAAN;AAAW,IAAX,CAAgB,IAAhB,CAA9S,IAAyU,CAAC,IAAD,CAAzU,IAAqV,CAAC,IAAD,CAArV,IAAiW,CAAC,IAAD,CAAM,IAAN,CAAjW,IAAkX,CAAC,IAAD,CAAlX,IAA8X,CAAC,IAAD,CAA9X,IAA0Y,CAAC,IAAD,CAA1Y,IAAsZ,CAAC,IAAD,CAAtZ,IAAka,CAAC,IAAD,CAAla,IAA8a,CAAC,IAAD,CAA9a,IAA0b,CAAC,IAAD,CAA1b,IAAsc,CAAC,IAAD,CAAtc,IAAkd,CAAC,IAAD,CAAld,IAA8d,CAAC,IAAD,CAA9d,IAA0e,CAAC,IAAD,CAA1e,IAAsf,CAAC,IAAD,CAAM,IAAN,CAAW,IAAX,CAAtf,IAA4gB,CAAC,IAAD,CAA5gB,IAAwhB,CAAC,IAAD,CAAxhB,IAAoiB,CAAC,IAAD,CAApiB,IAAgjB,CAAC,IAAD,CAAhjB,IAA4jB,CAAC,IAAD,CAA5jB,IAAwkB,CAAC,IAAD,CAAxkB,IAAolB,CAAC,IAAD,CAAplB,IAAgmB,CAAC,IAAD,CAAhmB,IAA4mB,CAAC,IAAD,CAA5mB,IAAwnB,CAAC,IAAD,CAAxnB,IAAooB,CAAC,IAAD,CAApoB,IAAgpB,CAAC,IAAD,CAAhpB,IAA4pB,CAAC,IAAD,CAA5pB,IAAwqB,CAAC,IAAD,CAAxqB,IAAorB,CAAC,IAAD,CAAprB,IAAgsB,CAAC,IAAD,CAAhsB,KAA6sB,CAAC,IAAD,CAA7sB,KAA0tB,CAAC,IAAD,CAAM,IAAN,CAA1tB,KAA4uB,CAAC,IAAD,CAA5uB,KAAyvB,CAAC,IAAD,CAAzvB,KAAswB,CAAC,IAAD,CAAtwB,KAAmxB,CAAC,IAAD,CAAnxB,KAAgyB,CAAC,IAAD,CAAhyB,KAA6yB,CAAC,IAAD,CAA7yB,KAA0zB,CAAC,IAAD,CAA1zB,KAAu0B,CAAC,IAAD,CAAv0B,KAAo1B,CAAC,IAAD,CAAp1B,KAAi2B,CAAC,IAAD,CAAj2B,KAA82B,CAAC,IAAD,CAA92B,KAA23B,CAAC,IAAD,CAA33B,KAAw4B,CAAC,IAAD,CAAx4B;IAAq5B,CAAC,IAAD,CAAr5B,KAAk6B,CAAC,IAAD,CAAl6B,KAA+6B,CAAC,IAAD,CAA/6B,KAA47B,CAAC,IAAD,CAA57B,KAAy8B,CAAC,IAAD,CAAz8B,KAAs9B,CAAC,IAAD,CAAt9B,KAAm+B,CAAC,IAAD,CAAn+B,KAAg/B,CAAC,IAAD,CAAh/B,KAA6/B,CAAC,IAAD,CAA7/B,KAA0gC,CAAC,IAAD,CAA1gC,KAAuhC,CAAC,IAAD,CAAvhC,KAAoiC,CAAC,IAAD,CAApiC,KAAijC,CAAC,IAAD,CAAjjC,KAA8jC,CAAC,IAAD,CAA9jC,KAA2kC,CAAC,IAAD,CAA3kC,KAAwlC,CAAC,IAAD,CAAxlC,KAAqmC,CAAC,IAAD,CAArmC,KAAknC,CAAC,IAAD,CAAlnC,KAA+nC,CAAC,IAAD,CAA/nC,KAA4oC,CAAC,IAAD,CAA5oC,KAAypC,CAAC,IAAD,CAAzpC,KAAsqC,CAAC,IAAD,CAAtqC,KAAmrC,CAAC,IAAD,CAAnrC,KAAgsC,CAAC,IAAD,CAAhsC,KAA6sC,CAAC,IAAD,CAA7sC,KAA0tC,CAAC,IAAD,CAA1tC,KAAuuC,CAAC,IAAD,CAAvuC,KAAovC,CAAC,IAAD,CAApvC,KAAiwC,CAAC,IAAD,CAAjwC,KAA8wC,CAAC,IAAD,CAA9wC,KAA2xC,CAAC,IAAD,CAA3xC,KAAwyC,CAAC,IAAD,CAAM,IAAN,CAAxyC,KAA0zC,CAAC,IAAD,CAA1zC,KAAu0C,CAAC,IAAD,CAAv0C,KAAo1C,CAAC,IAAD,CAAp1C,KAAi2C,CAAC,IAAD,CAAj2C,KAA82C,CAAC,IAAD,CAA92C,KAA23C,CAAC,IAAD,CAA33C,KAAw4C,CAAC,IAAD,CAAx4C,KAAq5C,CAAC,IAAD,CAAM,IAAN,CAAr5C,KAAu6C,CAAC,IAAD,CAAv6C,KAAo7C,CAAC,IAAD,CAAp7C,KAAi8C,CAAC,IAAD,CAAj8C,KAA88C,CAAC,IAAD,CAA98C,KAA29C,CAAC,IAAD,CAA39C;IAAw+C,CAAC,IAAD,CAAx+C,KAAq/C,CAAC,IAAD,CAAr/C,KAAkgD,CAAC,IAAD,CAAlgD,KAA+gD,CAAC,IAAD,CAA/gD,KAA4hD,CAAC,IAAD,CAA5hD,KAAyiD,CAAC,IAAD,CAAziD,KAAsjD,CAAC,IAAD,CAAtjD,KAAmkD,CAAC,IAAD,CAAM,IAAN,CAAnkD,KAAqlD,CAAC,IAAD,CAArlD,KAAkmD,CAAC,IAAD,CAAlmD,KAA+mD,CAAC,IAAD,CAA/mD,KAA4nD,CAAC,IAAD,CAA5nD,KAAyoD,CAAC,IAAD,CAAzoD,KAAspD,CAAC,IAAD,CAAtpD,KAAmqD,CAAC,IAAD,CAAnqD,KAAgrD,CAAC,IAAD,CAAhrD,KAA6rD,CAAC,IAAD,CAA7rD,KAA0sD,CAAC,IAAD,CAA1sD,KAAutD,CAAC,IAAD,CAAvtD,KAAouD,CAAC,IAAD,CAApuD,KAAivD,CAAC,IAAD,CAAjvD,KAA8vD,CAAC,IAAD,CAA9vD,KAA2wD,CAAC,IAAD,CAA3wD,KAAwxD,CAAC,IAAD,CAAxxD,KAAqyD,CAAC,IAAD,CAAryD,KAAkzD,CAAC,IAAD,CAAlzD,KAA+zD,CAAC,IAAD,CAA/zD,KAA40D,CAAC,IAAD,CAA50D,KAAy1D,CAAC,IAAD,CAAz1D,KAAs2D,CAAC,IAAD,CAAt2D,KAAm3D,CAAC,IAAD,CAAn3D,KAAg4D,CAAC,IAAD,CAAh4D,KAA64D,CAAC,IAAD,CAA74D,KAA05D,CAAC,IAAD,CAA15D,KAAu6D,CAAC,IAAD,CAAv6D,KAAo7D,CAAC,IAAD,CAAp7D,KAAi8D,CAAC,IAAD,CAAj8D,KAA88D,CAAC,IAAD,CAA98D,KAA29D,CAAC,IAAD,CAA39D,KAAw+D,CAAC,IAAD,CAAM,IAAN,CAAW,IAAX,CAAx+D,KAA+/D,CAAC,IAAD,CAA//D,KAA4gE,CAAC,IAAD,CAA5gE,KAAyhE,CAAC,IAAD,CAAzhE,KAAsiE,CAAC,IAAD,CAAtiE,KAAmjE,CAAC,IAAD,CAAnjE;IAAgkE,CAAC,IAAD,CAAhkE,KAA6kE,CAAC,IAAD,CAA7kE,KAA0lE,CAAC,IAAD,CAA1lE,KAAumE,CAAC,IAAD,CAAM,IAAN,CAAvmE,KAAynE,CAAC,IAAD,CAAznE,KAAsoE,CAAC,IAAD,CAAtoE,KAAmpE,CAAC,IAAD,CAAnpE,KAAgqE,CAAC,IAAD,CAAhqE,KAA6qE,CAAC,IAAD,CAA7qE,KAA0rE,CAAC,IAAD,CAA1rE,KAAusE,CAAC,IAAD,CAAvsE,KAAotE,CAAC,IAAD,CAAptE,KAAiuE,CAAC,IAAD,CAAjuE,KAA8uE,CAAC,IAAD,CAA9uE,KAA2vE,CAAC,IAAD,CAA3vE,KAAwwE,CAAC,IAAD,CAAxwE,KAAqxE,CAAC,IAAD,CAArxE,KAAkyE,CAAC,IAAD,CAAlyE,KAA+yE,CAAC,IAAD,CAA/yE,KAA4zE,CAAC,IAAD,CAA5zE,KAAy0E,CAAC,IAAD,CAAz0E,KAAs1E,CAAC,IAAD,CAAt1E,KAAm2E,CAAC,IAAD,CAAn2E,KAAg3E,CAAC,IAAD,CAAh3E,KAA63E,CAAC,IAAD,CAA73E,KAA04E,CAAC,IAAD,CAA14E,KAAu5E,CAAC,IAAD,CAAv5E,KAAo6E,CAAC,IAAD,CAAp6E,KAAi7E,CAAC,IAAD,CAAj7E,KAA87E,CAAC,IAAD,CAA97E,KAA28E,CAAC,IAAD,CAA38E,KAAw9E,CAAC,IAAD,CAAx9E,KAAq+E,CAAC,IAAD,CAAr+E,KAAk/E,CAAC,IAAD,CAAl/E,KAA+/E,CAAC,IAAD,CAA//E,KAA4gF,CAAC,IAAD,CAA5gF,KAAyhF,CAAC,IAAD,CAAzhF,KAAsiF,CAAC,IAAD,CAAtiF,KAAmjF,CAAC,IAAD,CAAnjF,KAAgkF,CAAC,IAAD,CAAhkF,KAA6kF,CAAC,IAAD,CAA7kF,KAA0lF,CAAC,IAAD,CAA1lF,KAAumF,CAAC,IAAD,CAAvmF,KAAonF,CAAC,IAAD,CAApnF,KAAioF,CAAC,IAAD,CAAjoF,KAA8oF,CAAC,IAAD,CAA9oF;IAA2pF,CAAC,IAAD,CAA3pF,KAAwqF,CAAC,IAAD,CAAxqF,KAAqrF,CAAC,IAAD,CAArrF,KAAksF,CAAC,IAAD,CAAlsF,KAA+sF,CAAC,IAAD,CAA/sF,KAA4tF,CAAC,IAAD,CAA5tF,KAAyuF,CAAC,IAAD,CAAzuF,KAAsvF,CAAC,IAAD,CAAtvF,KAAmwF,CAAC,IAAD,CAAnwF,CAArC,WAA4zF,IAAM,CAAC,KAAD,CAAO,IAAP,CAAY,2BAAZ,CAAwC,CAAC,CAAD,CAAG,CAAH,CAAxC,CAAN,IAA0D,CAAC,KAAD,CAAO,IAAP,CAAY,gCAAZ,CAA6C,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAA7C,CAAqD,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,SAAD,CAA5B,CAAD,CAA0C,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAA1C,CAA6E,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA7E,CAArD,CAA1D,IAAiP,CAAC,KAAD,CAAO,IAAP,CAAY,wDAAZ,CAAqE,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT,CAAW,EAAX,CAAc,EAAd,CAAiB,EAAjB,CAArE,CAA0F,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,MAAD,CAA9B,CAAD,CAAyC,CAAC,uBAAD;AAAyB,UAAzB,CAAoC,CAAC,kBAAD,CAApC,CAAyD,KAAzD,CAAzC,CAAyG,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,OAAD,CAApC,CAAzG,CAAwJ,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAxJ,CAA1F,CAAuS,GAAvS,CAAjP,IAAkiB,CAAC,IAAD,CAAM,IAAN,CAAW,aAAX,CAAyB,CAAC,CAAD,CAAzB,CAA6B,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAiD,KAAjD,CAAD,CAA7B,CAAuF,GAAvF,CAAliB,IAAmoB,CAAC,GAAD,CAAK,KAAL,CAAW,8BAAX,CAA0C,CAAC,EAAD,CAA1C,CAA+C,CAA/C,CAAiD,GAAjD,CAAqD,CAArD,CAAuD,kBAAvD,CAA0E,OAA1E,CAAkF,CAAlF,CAAoF,KAApF,CAAnoB,IAAmuB,CAAC,GAAD,CAAK,KAAL,CAAW,8BAAX,CAA0C,CAAC,EAAD,CAA1C,CAA+C,CAA/C,CAAiD,GAAjD,CAAqD,CAArD,CAAuD,mBAAvD,CAA2E,OAA3E,CAAmF,CAAnF,CAAqF,KAArF,CAAnuB,IAAo0B,CAAC,KAAD,CAAO,IAAP,CAAY,wDAAZ,CAAqE,CAAC,CAAD;AAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAArE,CAA+E,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,MAAD,CAA9B,CAAuC,KAAvC,CAAD,CAA+C,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,QAAD,CAApC,CAA+C,KAA/C,CAA/C,CAAqG,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,eAAD,CAAvC,CAAyD,KAAzD,CAArG,CAAqK,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,SAAD,CAA5B,CAAwC,KAAxC,CAArK,CAAoN,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAApN,CAA/E,CAAwV,GAAxV,CAAp0B,IAAsqC,CAAC,KAAD,CAAO,IAAP,CAAY,+BAAZ,CAA4C,CAAC,CAAD,CAA5C,CAAgD,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAiD,MAAjD,CAAD,CAA0D,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,SAAD,CAA5B,CAAwC,OAAxC,CAA1D,CAA2G,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,MAAD,CAA5B,CAAqC,OAArC,CAA3G,CAAyJ,CAAC,kBAAD;AAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAsC,KAAtC,CAAzJ,CAAhD,CAAuP,GAAvP,CAAtqC,IAAu6C,CAAC,KAAD,CAAO,IAAP,CAAY,YAAZ,CAAyB,CAAC,CAAD,CAAzB,CAA6B,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAD,CAA7B,CAAv6C,IAA6/C,CAAC,IAAD,CAAM,IAAN,CAAW,sCAAX,CAAkD,CAAC,EAAD,CAAI,EAAJ,CAAlD,CAA0D,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,sFAAD,CAAwF,iNAAxF;AAA0S,iSAA1S,CAA4kB,6WAA5kB,CAAvC;AAAk+B,KAAl+B,CAAw+B,CAAx+B,CAAD,CAA4+B,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAmD,CAAnD,CAA5+B,CAAkiC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAAliC,CAAylC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAAsD,CAAtD,CAAzlC,CAAkpC,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,wBAAD,CAA0B,2FAA1B,CAAsH,uNAAtH;AAA8U,2SAA9U,CAA0nB,sXAA1nB,CAA/C;AAAiiC,KAAjiC,CAAuiC,CAAviC,CAAyiC,aAAziC,CAAlpC,CAA0sE,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,IAAD,CAA/C,CAAsD,KAAtD,CAA4D,CAA5D,CAA8D,aAA9D,CAA1sE,CAAuxE,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAvxE,CAA20E,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,GAAD,CAA/C,CAAqD,KAArD,CAA2D,CAA3D,CAA6D,aAA7D,CAA30E,CAA1D,CAAk9E,GAAl9E,CAAs9E,CAAt9E,CAAw9E,yjBAAx9E;AAAkhG,KAAlhG,CAA7/C,IAA2hJ,CAAC,GAAD,CAAK,KAAL,CAAW,8BAAX,CAA0C,CAAC,EAAD,CAA1C,CAA+C,CAA/C,CAAiD,GAAjD,CAAqD,CAArD,CAAuD,kBAAvD,CAA0E,OAA1E,CAAkF,CAAlF,CAAoF,KAApF,CAA3hJ,IAA2nJ,CAAC,IAAD,CAAM,IAAN,CAAW,kKAAX,CAA8K,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT,CAAW,CAAX,CAAa,EAAb,CAAgB,EAAhB,CAAmB,EAAnB,CAAsB,EAAtB,CAA9K,CAAwM,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,eAAD,CAA5B,CAA8C,KAA9C,CAAD,CAAsD,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,KAAD,CAA5B,CAAoC,KAApC,CAAtD,CAAiG,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,QAAD,CAA9B,CAAyC,KAAzC,CAAjG,CAAiJ,CAAC,qBAAD,CAAuB,OAAvB,CAA+B,CAAC,qDAAD,CAA/B;AAAuF,KAAvF,CAAjJ,CAA+O,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,gBAAD,CAA9B,CAAiD,KAAjD,CAA/O,CAAuS,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,GAAD,CAAzC,CAA+C,KAA/C,CAAvS,CAA6V,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,GAAD,CAAzC,CAA+C,KAA/C,CAA7V,CAAxM,CAA4lB,GAA5lB,CAA3nJ,IAAiuK,CAAC,IAAD,CAAM,qDAAN,CAA4D,8EAA5D,CAA2I,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT,CAAW,EAAX,CAAc,EAAd,CAA3I,CAA6J,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,IAAD,CAA9B,CAAqC,KAArC,CAAD,CAA6C,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,IAAD,CAAzC,CAAgD,KAAhD,CAA7C,CAAoG,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAApG,CAA2J,CAAC,uBAAD;AAAyB,UAAzB,CAAoC,CAAC,QAAD,CAApC,CAA+C,OAA/C,CAA3J,CAAmN,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,cAAD,CAAvC,CAAnN,CAA7J,CAA0a,GAA1a,CAA8a,CAA9a,CAAgb,aAAhb,CAA8b,CAA9b,CAAgc,CAAhc,CAAkc,CAAlc,CAAoc,CAAC,CAAC,6aAAD;AAA+a,CAAC,CAAD,CAA/a,CAAD,CAAqb,CAAC,iHAAD,CAAmH,CAAC,CAAD,CAAnH,CAArb,CAA6iB,CAAC,wBAAD,CAA0B,CAAC,CAAD,CAAG,EAAH,CAA1B,CAA7iB,CAA+kB,CAAC,iBAAD,CAAmB,CAAC,EAAD,CAAnB,CAA/kB,CAAwmB,CAAxmB,CAA0mB,CAA1mB,CAA4mB,CAA5mB,CAA8mB,CAAC,aAAD,CAAe,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT,CAAf,CAA9mB,CAA0oB,CAAC,0CAAD,CAA4C,CAAC,CAAD,CAA5C,CAA1oB,CAA2rB,CAAC,kDAAD,CAAoD,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAQ,EAAR,CAApD,CAA3rB,CAApc,CAAisC,MAAjsC,CAAjuK,IAA+6M,CAAC,KAAD,CAAO,IAAP,CAAY,6BAAZ,CAA0C,CAAC,CAAD,CAA1C,CAA8C,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,QAAD,CAA5B,CAAD,CAA9C,CAA/6M,IAA6gN,CAAC,KAAD,CAAO,qDAAP,CAA6D,2FAA7D;AAAyJ,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT,CAAW,EAAX,CAAc,EAAd,CAAiB,EAAjB,CAAzJ,CAA8K,CAA9K,CAAgL,GAAhL,CAAoL,CAApL,CAAsL,CAAtL,CAAwL,CAAxL,CAA0L,CAA1L,CAA4L,IAA5L,CAAiM,CAAjM,CAAmM,IAAnM,CAA7gN,IAA2tN,CAAC,KAAD,CAAO,IAAP,CAAY,uCAAZ,CAAoD,CAAC,CAAD,CAApD,CAAwD,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,IAAD,CAAlD,CAAyD,KAAzD,CAAD,CAAiE,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,gBAAD,CAAkB,oBAAlB,CAAuC,2BAAvC,CAAlD,CAAsH,OAAtH,CAAjE,CAAgM,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,QAAD,CAAlD,CAA6D,KAA7D,CAAhM,CAAxD,CAA6T,GAA7T,CAA3tN,IAAkiO,CAAC,KAAD,CAAO,IAAP,CAAY,oCAAZ,CAAiD,CAAC,CAAD,CAAG,CAAH,CAAjD,CAAuD,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,cAAD,CAAvC,CAAwD,KAAxD,CAAD,CAAgE,CAAC,0BAAD;AAA4B,UAA5B,CAAuC,CAAC,aAAD,CAAvC,CAAuD,KAAvD,CAAhE,CAA8H,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAwD,KAAxD,CAA9H,CAAvD,CAAqP,GAArP,CAAliO,IAAiyO,CAAC,GAAD,CAAK,KAAL,CAAW,8BAAX,CAA0C,CAAC,EAAD,CAA1C,CAA+C,CAA/C,CAAiD,GAAjD,CAAqD,CAArD,CAAuD,kBAAvD,CAA0E,OAA1E,CAAkF,CAAlF,CAAoF,KAApF,CAAjyO,IAAi4O,CAAC,KAAD,CAAO,IAAP,CAAY,iFAAZ,CAA8F,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,EAAT,CAA9F,CAA2G,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,gBAAD,CAA9B,CAAiD,KAAjD,CAAD,CAAyD,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,mLAAD,CAA9B;AAAoN,KAApN,CAAzD,CAAoR,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,WAAD,CAA9B,CAA4C,KAA5C,CAApR,CAAuU,CAAC,iBAAD,CAAmB,OAAnB,CAA2B,CAAC,GAAD,CAA3B,CAAiC,KAAjC,CAAvU,CAA3G,CAA2d,GAA3d,CAAj4O,IAAs2P,CAAC,IAAD,CAAM,IAAN,CAAW,qBAAX,CAAiC,CAAC,CAAD,CAAG,CAAH,CAAjC,CAAuC,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,WAAD,CAAvC,CAAqD,KAArD,CAAD,CAA6D,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,aAAD,CAA/C,CAA+D,KAA/D,CAA7D,CAAmI,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,QAAD,CAAlD,CAA6D,KAA7D,CAAnI,CAAuM,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAwD,KAAxD,CAAvM,CAAvC,CAA8S,GAA9S,CAAt2P,IAA8pQ,CAAC,KAAD,CAAO,IAAP,CAAY,eAAZ,CAA4B,CAAC,CAAD,CAA5B,CAAgC,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,SAAD,CAAlD,CAAD,CAAhC,CAA9pQ;GAAqwQ,CAAC,KAAD,CAAO,IAAP,CAAY,gDAAZ,CAA6D,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,EAAT,CAA7D,CAA0E,CAAC,CAAC,4BAAD,CAA8B,aAA9B,CAA4C,CAAC,GAAD,CAA5C,CAAkD,KAAlD,CAAD,CAA0D,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,iBAAD,CAA5B,CAAgD,KAAhD,CAA1D,CAAiH,CAAC,yBAAD,CAA2B,UAA3B,CAAsC,CAAC,GAAD,CAAtC,CAA4C,KAA5C,CAAjH,CAAoK,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,qCAAD,CAAzC,CAAiF,KAAjF,CAApK,CAA4P,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,WAAD,CAAvC,CAAqD,KAArD,CAA5P,CAAwT,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,WAAD,CAAvC,CAAqD,KAArD,CAAxT,CAAoX,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,YAAD,CAAzC;AAAwD,KAAxD,CAApX,CAAmb,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAnb,CAA1E,CAAkjB,GAAljB,CAArwQ,IAAi0R,CAAC,KAAD,CAAO,IAAP,CAAY,eAAZ,CAA4B,CAAC,CAAD,CAA5B,CAAgC,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,gBAAD,CAA5B,CAAD,CAAhC,CAAj0R,IAAy5R,CAAC,KAAD,CAAO,IAAP,CAAY,uBAAZ,CAAoC,CAAC,CAAD,CAApC,CAAwC,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,QAAD,CAAlD,CAAD,CAAxC,CAAz5R,IAAugS,CAAC,KAAD,CAAO,IAAP,CAAY,gBAAZ,CAA6B,CAAC,CAAD,CAA7B,CAAiC,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,UAAD,CAAlD,CAAD,CAAjC,CAAvgS,IAAgnS,CAAC,KAAD,CAAO,IAAP,CAAY,gCAAZ,CAA6C,CAAC,CAAD,CAA7C,CAAiD,CAAjD,CAAmD,GAAnD,CAAuD,CAAvD,CAAyD,CAAzD,CAA2D,CAA3D,CAA6D,CAA7D,CAA+D,CAA/D,CAAiE,CAAC,CAAC,8BAAD,CAAD,CAAkC,CAAC,wCAAD,CAAlC;AAA6E,CAAC,eAAD,CAA7E,CAA+F,CAA/F,CAAiG,CAAjG,CAAmG,CAAnG,CAAqG,CAArG,CAAuG,CAAvG,CAAyG,CAAC,wCAAD,CAAzG,CAAjE,CAAhnS,IAA40S,CAAC,GAAD,CAAK,KAAL,CAAW,8BAAX,CAA0C,CAAC,EAAD,CAA1C,CAA+C,CAA/C,CAAiD,GAAjD,CAAqD,CAArD,CAAuD,kBAAvD,CAA0E,OAA1E,CAAkF,CAAlF,CAAoF,KAApF,CAA50S,IAA46S,CAAC,KAAD,CAAO,IAAP,CAAY,eAAZ,CAA4B,CAAC,CAAD,CAA5B,CAAgC,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,SAAD,CAA5B,CAAD,CAAhC,CAA56S,IAA6/S,CAAC,KAAD,CAAO,aAAP,CAAqB,8BAArB,CAAoD,CAAC,CAAD,CAAG,CAAH,CAApD,CAA0D,CAAC,CAAC,eAAD,CAAiB,OAAjB,CAAyB,CAAC,YAAD,CAAzB,CAAD,CAA0C,CAAC,UAAD,CAAY,IAAZ,CAAiB,CAAC,MAAD,CAAjB,CAA1C,CAAqE,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAArE,CAA1D,CAA8K,GAA9K,CAAkL,CAAlL,CAAoL,UAApL,CAA7/S,IAAksT,CAAC,KAAD,CAAO,IAAP,CAAY,sBAAZ,CAAmC,CAAC,CAAD,CAAnC,CAAuC,CAAvC,CAAyC,CAAzC,CAA2C,CAA3C,CAA6C,CAA7C,CAA+C,CAA/C,CAAiD,CAAjD,CAAmD,OAAnD,CAAlsT;GAAmwT,CAAC,IAAD,CAAM,wCAAN,CAA+C,yFAA/C,CAAyI,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAQ,EAAR,CAAzI,CAAqJ,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,mBAAD,CAAqB,oBAArB,CAA5B,CAAD,CAAyE,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,eAAD,CAAzC,CAA2D,KAA3D,CAAzE,CAA2I,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,4DAAD,CAAvC,CAAsG,MAAtG,CAA3I,CAAyP,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,oBAAD,CAAvC,CAA8D,MAA9D,CAAzP,CAArJ,CAAqd,GAArd,CAAyd,CAAzd,CAA2d,6DAA3d;AAAyhB,IAAzhB,CAAnwT,IAAuyU,CAAC,GAAD,CAAK,KAAL,CAAW,8BAAX,CAA0C,CAAC,EAAD,CAA1C,CAA+C,CAA/C,CAAiD,GAAjD,CAAqD,CAArD,CAAuD,kBAAvD,CAA0E,OAA1E,CAAkF,CAAlF,CAAoF,KAApF,CAAvyU,IAAu4U,CAAC,KAAD,CAAO,IAAP,CAAY,wBAAZ,CAAqC,CAAC,CAAD,CAAG,CAAH,CAArC,CAA2C,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,eAAD,CAApC,CAAD,CAAwD,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,SAAD,CAAlD,CAAxD,CAA3C,CAAv4U,IAAgjV,CAAC,KAAD,CAAO,IAAP,CAAY,sDAAZ,CAAmE,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAnE,CAA4E,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,IAAD,CAA5B,CAAD,CAAqC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,iBAAD,CAA5B,CAArC,CAAsF,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAtF,CAAuI,CAAC,0BAAD;AAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAAvI,CAAqL,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAArL,CAA5E,CAAhjV,IAAs2V,CAAC,KAAD,CAAO,KAAP,CAAa,kIAAb,CAAgJ,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,EAAT,CAAY,EAAZ,CAAhJ,CAAgK,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,KAAD,CAA5B,CAAoC,MAApC,CAAD,CAA6C,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,KAAD,CAAzC,CAAiD,MAAjD,CAA7C,CAAsG,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,mDAAD,CAAqD,uFAArD,CAAvC;AAAqL,OAArL,CAAtG,CAAoS,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,yBAAD,CAAlD,CAA8E,OAA9E,CAApS,CAA2X,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,OAAD,CAAlD,CAA4D,OAA5D,CAA3X,CAAgc,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,MAAD,CAAzC,CAAkD,MAAlD,CAAhc,CAAhK,CAA2pB,GAA3pB,CAA+pB,CAA/pB,CAAiqB,OAAjqB,CAAyqB,CAAzqB,CAA2qB,CAA3qB,CAA6qB,CAA7qB,CAA+qB,CAA/qB,CAAirB,MAAjrB,CAAt2V,IAAoiX,CAAC,KAAD,CAAO,IAAP,CAAY,yBAAZ,CAAsC,CAAC,CAAD,CAAG,EAAH,CAAtC,CAA6C,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAD,CAAwC,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,GAAD,CAA/C,CAAxC,CAA7C,CAApiX,IAAsrX,CAAC,GAAD,CAAK,KAAL,CAAW,+BAAX,CAA2C,CAAC,CAAD,CAAG,EAAH,CAA3C,CAAkD,CAAlD,CAAoD,GAApD,CAAwD,CAAxD,CAA0D,CAA1D,CAA4D,CAA5D,CAA8D,CAA9D,CAAgE,CAAhE,CAAkE,CAAC,CAAC,0MAAD;AAA4M,CAAC,EAAD,CAA5M,CAAD,CAAmN,CAAC,EAAD,CAAI,CAAC,EAAD,CAAJ,CAAnN,CAA6N,CAAC,sCAAD,CAAwC,CAAC,EAAD,CAAxC,CAA7N,CAA2Q,CAAC,gBAAD,CAAkB,CAAC,EAAD,CAAlB,CAA3Q,CAAmS,CAAC,iPAAD,CAAmP,CAAC,EAAD,CAAnP,CAAnS,CAA4hB,CAA5hB,CAA8hB,CAAC,WAAD,CAAa,CAAC,CAAD,CAAb,CAA9hB,CAAgjB,CAAhjB,CAAkjB,CAAC,gBAAD,CAAkB,CAAC,EAAD,CAAlB,CAAljB,CAAlE,CAAtrX,IAAy0Y,CAAC,IAAD,CAAM,qDAAN,CAA4D,oEAA5D;AAAiI,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,EAAT,CAAY,EAAZ,CAAjI,CAAiJ,CAAjJ,CAAmJ,GAAnJ,CAAuJ,CAAvJ,CAAyJ,iBAAzJ,CAA2K,KAA3K,CAAiL,CAAjL,CAAmL,CAAnL,CAAqL,CAAC,CAAC,yIAAD,CAA2I,CAAC,CAAD,CAA3I,CAAD,CAAiJ,CAAC,iHAAD,CAAmH,CAAC,CAAD,CAAnH,CAAjJ,CAAyQ,CAAC,wBAAD,CAA0B,CAAC,CAAD,CAAG,EAAH,CAA1B,CAAzQ,CAA2S,CAAC,iBAAD,CAAmB,CAAC,EAAD,CAAnB,CAA3S,CAAoU,CAApU,CAAsU,CAAtU,CAAwU,CAAxU,CAA0U,CAA1U,CAA4U,CAAC,0CAAD,CAA4C,CAAC,CAAD,CAA5C,CAA5U,CAA6X,CAAC,kDAAD,CAAoD,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAQ,EAAR,CAApD,CAA7X,CAArL,CAAonB,MAApnB,CAAz0Y;GAA08Z,CAAC,KAAD,CAAO,IAAP,CAAY,0BAAZ,CAAuC,CAAC,CAAD,CAAG,CAAH,CAAvC,CAA6C,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAA8C,KAA9C,CAAD,CAAsD,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAsC,KAAtC,CAAtD,CAAmG,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAnG,CAAuJ,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAAvJ,CAA7C,CAA4P,GAA5P,CAA18Z,IAAgta,CAAC,KAAD,CAAO,IAAP,CAAY,2BAAZ,CAAwC,CAAC,CAAD,CAAxC,CAA4C,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,OAAD,CAAlD,CAAD,CAA5C,CAAhta,IAAi0a,CAAC,KAAD,CAAO,IAAP,CAAY,6BAAZ,CAA0C,CAAC,CAAD,CAA1C,CAA8C,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,GAAD,CAApC,CAAD,CAA4C,CAAC,0BAAD,CAA4B,UAA5B;AAAuC,CAAC,MAAD,CAAvC,CAA5C,CAA9C,CAAj0a,IAAm9a,CAAC,IAAD,CAAM,IAAN,CAAW,sBAAX,CAAkC,CAAC,CAAD,CAAlC,CAAsC,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,WAAD,CAAvC,CAAqD,KAArD,CAAD,CAA6D,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,WAAD,CAAlD,CAAgE,KAAhE,CAA7D,CAAoI,CAAC,0CAAD,CAA4C,gBAA5C,CAA6D,CAAC,GAAD,CAA7D,CAAmE,KAAnE,CAApI,CAAtC,CAAqP,GAArP,CAAn9a,IAAktb,CAAC,KAAD,CAAO,IAAP,CAAY,YAAZ,CAAyB,CAAC,EAAD,CAAzB,CAA8B,CAAC,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,GAAD,CAA/C,CAAD,CAAuD,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAvD,CAA9B,CAAltb,IAAu2b,CAAC,KAAD,CAAO,IAAP,CAAY,eAAZ,CAA4B,CAAC,CAAD,CAA5B,CAAgC,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,SAAD,CAA5B,CAAD,CAAhC,CAAv2b,IAAw7b,CAAC,IAAD,CAAM,wDAAN;AAA+D,oCAA/D,CAAoG,CAAC,CAAD,CAAG,EAAH,CAAM,EAAN,CAApG,CAA8G,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,KAAD,CAAO,MAAP,CAA5B,CAA2C,MAA3C,CAAD,CAAoD,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAApD,CAAmG,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,SAAD,CAApC,CAAgD,MAAhD,CAAnG,CAA2J,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,QAAD,CAApC,CAA3J,CAA2M,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,kDAAD,CAAvC,CAA4F,MAA5F,CAA3M,CAA+S,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,MAAD,CAAzC,CAA/S,CAAkW,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAAlW,CAAgZ,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,IAAD,CAAlD,CAAhZ,CAA9G,CAAx7b;GAAu/c,CAAC,KAAD,CAAO,IAAP,CAAY,uBAAZ,CAAoC,CAAC,CAAD,CAAG,CAAH,CAApC,CAA0C,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,IAAD,CAAlD,CAAD,CAA2D,CAAC,uCAAD,CAAyC,gBAAzC,CAA0D,CAAC,SAAD,CAA1D,CAA3D,CAA1C,CAAv/c,IAA0qd,CAAC,IAAD,CAAM,4BAAN,CAAmC,qHAAnC,CAAyJ,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,EAAP,CAAU,EAAV,CAAa,EAAb,CAAzJ,CAA0K,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,sBAAD,CAAwB,8BAAxB,CAAuD,uCAAvD,CAA9B,CAA8H,KAA9H,CAAD,CAAsI,CAAC,oBAAD;AAAsB,OAAtB,CAA8B,CAAC,8QAAD,CAAgR,2SAAhR;AAA4jB,oUAA5jB,CAAi4B,sUAAj4B,CAA9B;AAAuuC,KAAvuC,CAAtI,CAAo3C,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,WAAD,CAAvC,CAAp3C,CAA06C,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,0BAAD,CAA4B,0BAA5B,CAAuD,4DAAvD,CAAvC,CAA4J,KAA5J,CAAkK,CAAlK,CAA16C,CAA+kD,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,+LAAD,CAAvC,CAAyO,KAAzO,CAA+O,CAA/O,CAA/kD,CAAi0D,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,GAAD,CAA9B,CAAj0D;AAAs2D,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAA8C,KAA9C,CAAoD,CAApD,CAAt2D,CAA65D,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,SAAD,CAAvC,CAAmD,KAAnD,CAAyD,CAAzD,CAA75D,CAAy9D,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,QAAD,CAAvC,CAAz9D,CAA4gE,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,MAAD,CAAlD,CAA2D,KAA3D,CAAiE,CAAjE,CAA5gE,CAA1K,CAA2vE,GAA3vE,CAA+vE,CAA/vE,CAAiwE,2BAAjwE,CAA6xE,CAA7xE,CAA+xE,CAA/xE,CAAiyE,CAAjyE,CAAmyE,CAAnyE,CAAqyE,IAAryE,CAA1qd,IAA09hB,CAAC,IAAD,CAAM,2BAAN,CAAkC,0CAAlC,CAA6E,CAAC,EAAD,CAAI,EAAJ,CAA7E,CAAqF,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAkC,MAAlC,CAAD,CAA2C,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,aAAD,CAA5B,CAA3C,CAAwF,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,GAAD,CAApC;AAA0C,KAA1C,CAAgD,CAAhD,CAAkD,UAAlD,CAAxF,CAArF,CAA4O,GAA5O,CAAgP,CAAhP,CAAkP,yBAAlP,CAA19hB,IAA4uiB,CAAC,KAAD,CAAO,IAAP,CAAY,+CAAZ,CAA4D,CAAC,CAAD,CAAG,EAAH,CAA5D,CAAmE,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,cAAD,CAA5B,CAAD,CAA+C,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAA/C,CAAnE,CAAoK,CAApK,CAAsK,CAAtK,CAAwK,qCAAxK,CAA5uiB,IAAg8iB,CAAC,IAAD,CAAM,KAAN,CAAY,+CAAZ,CAA4D,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,EAAP,CAA5D,CAAuE,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,aAAD,CAA9B,CAA8C,OAA9C,CAAD,CAAwD,CAAC,iBAAD,CAAmB,OAAnB,CAA2B,CAAC,GAAD,CAA3B,CAAiC,OAAjC,CAAxD,CAAkG,CAAC,eAAD,CAAiB,OAAjB,CAAyB,CAAC,GAAD,CAAzB,CAA+B,KAA/B,CAAlG,CAAwI,CAAC,kBAAD,CAAoB,OAApB;AAA4B,CAAC,GAAD,CAA5B,CAAkC,KAAlC,CAAxI,CAAvE,CAAyP,GAAzP,CAAh8iB,IAAmsjB,CAAC,KAAD,CAAO,GAAP,CAAW,4BAAX,CAAwC,CAAC,CAAD,CAAxC,CAA4C,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,SAAD,CAAvC,CAAD,CAA5C,CAAnsjB,IAA2yjB,CAAC,KAAD,CAAO,IAAP,CAAY,kCAAZ,CAA+C,CAAC,CAAD,CAAG,CAAH,CAA/C,CAAqD,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,QAAD,CAA5B,CAAD,CAAyC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,QAAD,CAApC,CAAzC,CAArD,CAA+I,CAA/I,CAAiJ,CAAjJ,CAAmJ,CAAnJ,CAAqJ,CAArJ,CAAuJ,CAAvJ,CAAyJ,MAAzJ,CAA3yjB,IAAi9jB,CAAC,IAAD,CAAM,qDAAN,CAA4D,oEAA5D,CAAiI,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,EAAT,CAAY,EAAZ,CAAjI,CAAiJ,CAAjJ,CAAmJ,GAAnJ,CAAuJ,CAAvJ,CAAyJ,iBAAzJ,CAA2K,KAA3K,CAAiL,CAAjL,CAAmL,CAAnL,CAAqL,CAAC,CAAC,2JAAD;AAA6J,CAAC,CAAD,CAA7J,CAAD,CAAmK,CAAC,iHAAD,CAAmH,CAAC,CAAD,CAAnH,CAAnK,CAA2R,CAAC,wBAAD,CAA0B,CAAC,CAAD,CAAG,EAAH,CAA1B,CAA3R,CAA6T,CAAC,iBAAD,CAAmB,CAAC,EAAD,CAAnB,CAA7T,CAAsV,CAAtV,CAAwV,CAAxV,CAA0V,CAA1V,CAA4V,CAA5V,CAA8V,CAAC,0CAAD,CAA4C,CAAC,CAAD,CAA5C,CAA9V,CAA+Y,CAAC,kDAAD,CAAoD,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAQ,EAAR,CAApD,CAA/Y,CAArL,CAAsoB,MAAtoB,CAAj9jB,IAAomlB,CAAC,KAAD,CAAO,IAAP,CAAY,0BAAZ,CAAuC,CAAC,CAAD,CAAvC,CAA2C,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,SAAD,CAA5B,CAAD,CAA3C,CAApmlB,IAAgslB,CAAC,KAAD,CAAO,IAAP,CAAY,oCAAZ,CAAiD,CAAC,CAAD,CAAjD,CAAqD,CAAC,CAAC,0BAAD,CAA4B,UAA5B;AAAuC,CAAC,gBAAD,CAAvC,CAAD,CAA4D,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,IAAD,CAAlD,CAA5D,CAAsH,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAtH,CAA+K,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAA/K,CAArD,CAAhslB,IAAo+lB,CAAC,IAAD,CAAM,IAAN,CAAW,+LAAX,CAA2M,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT,CAAW,CAAX,CAAa,EAAb,CAAgB,EAAhB,CAAmB,EAAnB,CAAsB,EAAtB,CAAyB,EAAzB,CAA4B,EAA5B,CAA3M,CAA2O,CAAC,CAAC,qBAAD,CAAuB,OAAvB,CAA+B,CAAC,gBAAD,CAA/B,CAAkD,KAAlD,CAAD,CAA0D,CAAC,qBAAD;AAAuB,OAAvB,CAA+B,CAAC,qGAAD,CAAuG,8GAAvG,CAA/B,CAAsP,KAAtP,CAA1D,CAAuT,CAAC,qBAAD,CAAuB,OAAvB,CAA+B,CAAC,sGAAD,CAAwG,0bAAxG,CAA/B;AAAmkB,KAAnkB,CAAvT,CAAi4B,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,KAAD,CAA5B,CAAoC,KAApC,CAAj4B,CAA46B,CAAC,qBAAD,CAAuB,OAAvB,CAA+B,CAAC,GAAD,CAA/B,CAAqC,KAArC,CAA56B,CAAw9B,CAAC,qBAAD,CAAuB,OAAvB,CAA+B,CAAC,KAAD,CAA/B,CAAuC,KAAvC,CAAx9B,CAAsgC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,aAAD,CAAvC,CAAuD,KAAvD,CAAtgC,CAAokC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,OAAD,CAA9B,CAAwC,KAAxC,CAApkC,CAAmnC,CAAC,qBAAD,CAAuB,OAAvB,CAA+B,CAAC,GAAD,CAA/B,CAAqC,KAArC,CAAnnC,CAA+pC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,KAAD,CAAO,MAAP,CAAc,OAAd,CAA5B,CAAmD,KAAnD,CAA/pC,CAAytC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAztC,CAA6wC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,QAAD,CAA5B,CAAuC,KAAvC,CAA7wC,CAA2zC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,UAAD,CAA5B,CAAyC,KAAzC,CAA3zC,CAA22C,CAAC,kBAAD;AAAoB,OAApB,CAA4B,CAAC,UAAD,CAA5B,CAAyC,KAAzC,CAA32C,CAA25C,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,IAAD,CAA5B,CAAmC,KAAnC,CAA35C,CAAq8C,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,eAAD,CAAzC,CAA2D,KAA3D,CAAr8C,CAAugD,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,SAAD,CAAvC,CAAmD,KAAnD,CAAvgD,CAAikD,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAA8C,KAA9C,CAAjkD,CAA3O,CAAk2D,GAAl2D,CAAp+lB,IAAg1pB,CAAC,KAAD,CAAO,IAAP,CAAY,mBAAZ,CAAgC,CAAC,CAAD,CAAhC,CAAoC,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,MAAD,CAAlD,CAAD,CAApC,CAAh1pB,IAAw7pB,CAAC,IAAD,CAAM,IAAN,CAAW,aAAX,CAAyB,CAAC,CAAD,CAAzB,CAA6B,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,OAAD,CAAlD,CAAD,CAA7B,CAAx7pB,IAA0hqB,CAAC,GAAD,CAAK,KAAL,CAAW,8BAAX,CAA0C,CAAC,EAAD,CAA1C;AAA+C,CAA/C,CAAiD,GAAjD,CAAqD,CAArD,CAAuD,kBAAvD,CAA0E,OAA1E,CAAkF,CAAlF,CAAoF,KAApF,CAA1hqB,IAA0nqB,CAAC,GAAD,CAAK,KAAL,CAAW,0BAAX,CAAsC,CAAC,EAAD,CAAtC,CAA2C,CAA3C,CAA6C,GAA7C,CAAiD,CAAjD,CAAmD,CAAnD,CAAqD,CAArD,CAAuD,CAAvD,CAAyD,cAAzD,CAA1nqB,IAAwsqB,CAAC,KAAD,CAAO,IAAP,CAAY,8BAAZ,CAA2C,CAAC,CAAD,CAAG,CAAH,CAA3C,CAAiD,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,OAAD,CAAlD,CAA4D,KAA5D,CAAD,CAAoE,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAwD,KAAxD,CAApE,CAAmI,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,OAAD,CAAlD,CAA4D,KAA5D,CAAnI,CAAjD,CAAwP,GAAxP,CAAxsqB,IAA08qB,CAAC,KAAD,CAAO,IAAP,CAAY,iCAAZ,CAA8C,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAQ,EAAR,CAA9C,CAA0D,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,OAAD,CAApC,CAA8C,OAA9C,CAAsD,CAAtD,CAAwD,UAAxD,CAAD;AAAqE,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAArE,CAAyH,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,GAAD,CAAzC,CAAzH,CAA1D,CAAoO,GAApO,CAA18qB,IAAwrrB,CAAC,KAAD,CAAO,IAAP,CAAY,4CAAZ,CAAyD,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAzD,CAAkE,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,kDAAD,CAAoD,8EAApD,CAA5B,CAAD,CAAkK,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,qBAAD,CAAuB,0BAAvB,CAA9B,CAAlK,CAAoP,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAApP,CAAkS,CAAC,0BAAD,CAA4B,UAA5B;AAAuC,CAAC,GAAD,CAAvC,CAAlS,CAAlE,CAAxrrB,IAAilsB,CAAC,IAAD,CAAM,IAAN,CAAW,wCAAX,CAAoD,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAApD,CAA6D,CAAC,CAAC,iBAAD,CAAmB,OAAnB,CAA2B,CAAC,MAAD,CAA3B,CAAoC,KAApC,CAAD,CAA4C,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,8BAAD,CAA9B,CAA+D,KAA/D,CAA5C,CAAkH,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAiD,KAAjD,CAAlH,CAA7D,CAAwO,GAAxO,CAAjlsB,IAAm0sB,CAAC,KAAD,CAAO,IAAP,CAAY,aAAZ,CAA0B,CAAC,CAAD,CAA1B,CAA8B,CAA9B,CAAgC,GAAhC,CAAoC,CAApC,CAAsC,CAAtC,CAAwC,CAAxC,CAA0C,CAA1C,CAA4C,SAA5C,CAAn0sB,IAA+3sB,CAAC,KAAD,CAAO,IAAP,CAAY,aAAZ,CAA0B,CAAC,CAAD,CAA1B,CAA8B,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,OAAD,CAApC,CAA8C,KAA9C,CAAD,CAA9B,CAAqF,GAArF,CAA/3sB,IAA89sB,CAAC,IAAD,CAAM,IAAN,CAAW,aAAX,CAAyB,CAAC,CAAD,CAAzB,CAA6B,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,QAAD,CAAvC,CAAD,CAAoD,CAAC,kCAAD;AAAoC,aAApC,CAAkD,CAAC,OAAD,CAAlD,CAApD,CAA7B,CAA99sB,IAAmntB,CAAC,KAAD,CAAO,IAAP,CAAY,yBAAZ,CAAsC,CAAC,CAAD,CAAtC,CAA0C,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,SAAD,CAAvC,CAAmD,KAAnD,CAAD,CAA1C,CAAsG,GAAtG,CAAnntB,IAAmutB,CAAC,KAAD,CAAO,qDAAP,CAA6D,0EAA7D,CAAwI,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT,CAAW,EAAX,CAAc,EAAd,CAAiB,EAAjB,CAAxI,CAA6J,CAAC,CAAC,iBAAD,CAAmB,OAAnB,CAA2B,CAAC,iCAAD,CAA3B,CAA+D,KAA/D,CAAD,CAAuE,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,uBAAD,CAA9B,CAAwD,KAAxD,CAAvE,CAAsI,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,eAAD,CAA9B,CAAgD,KAAhD,CAAtI,CAA6L,CAAC,qBAAD;AAAuB,OAAvB,CAA+B,CAAC,GAAD,CAA/B,CAAqC,KAArC,CAA7L,CAA7J,CAAuY,GAAvY,CAA2Y,CAA3Y,CAA6Y,CAA7Y,CAA+Y,CAA/Y,CAAiZ,CAAjZ,CAAmZ,gBAAnZ,CAAoa,CAApa,CAAsa,IAAta,CAAnutB,IAAopuB,CAAC,KAAD,CAAO,WAAP,CAAmB,oCAAnB,CAAwD,CAAC,CAAD,CAAG,EAAH,CAAxD,CAA+D,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,YAAD,CAA5B,CAAD,CAA6C,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA7C,CAA/D,CAA2J,CAA3J,CAA6J,CAA7J,CAA+J,CAA/J,CAAiK,CAAjK,CAAmK,CAAnK,CAAqK,CAArK,CAAuK,CAAvK,CAAyK,IAAzK,CAAppuB,IAAw0uB,CAAC,KAAD,CAAO,IAAP,CAAY,aAAZ,CAA0B,CAAC,CAAD,CAA1B,CAAx0uB,IAA42uB,CAAC,KAAD,CAAO,IAAP,CAAY,0BAAZ,CAAuC,CAAC,CAAD,CAAvC,CAA2C,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAD,CAA3C,CAA52uB,IAAs8uB,CAAC,KAAD,CAAO,IAAP,CAAY,aAAZ,CAA0B,CAAC,CAAD,CAA1B,CAA8B,CAAC,CAAC,UAAD,CAAY,IAAZ,CAAiB,CAAC,OAAD,CAAjB,CAAD,CAA9B,CAA4D,CAA5D,CAA8D,CAA9D,CAAgE,qBAAhE,CAAt8uB,IAAkivB,CAAC,IAAD,CAAM,IAAN,CAAW,aAAX,CAAyB,CAAC,CAAD,CAAzB,CAA6B,CAAC,CAAC,kCAAD;AAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAwD,MAAxD,CAAD,CAAiE,CAAC,uCAAD,CAAyC,gBAAzC,CAA0D,CAAC,QAAD,CAA1D,CAAqE,KAArE,CAAjE,CAA7B,CAA2K,GAA3K,CAAlivB,IAAutvB,CAAC,KAAD,CAAO,IAAP,CAAY,mCAAZ,CAAgD,CAAC,CAAD,CAAG,CAAH,CAAhD,CAAsD,CAAC,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,OAAD,CAA/C,CAAyD,KAAzD,CAAD,CAAiE,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAjE,CAA0H,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,SAAD,CAAlD,CAA8D,KAA9D,CAA1H,CAAtD,CAAsP,CAAtP,CAAwP,CAAxP,CAA0P,yDAA1P,CAAoT,IAApT,CAAvtvB,IAAshwB,CAAC,IAAD,CAAM,IAAN,CAAW,oCAAX,CAAgD,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAhD,CAAyD,CAAC,CAAC,kBAAD;AAAoB,OAApB,CAA4B,CAAC,KAAD,CAAO,MAAP,CAAc,OAAd,CAAsB,QAAtB,CAA+B,SAA/B,CAA5B,CAAsE,KAAtE,CAAD,CAA8E,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,KAAD,CAAO,MAAP,CAAc,OAAd,CAAsB,QAAtB,CAAvC,CAAuE,KAAvE,CAA9E,CAA4J,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,KAAD,CAA5B,CAAoC,KAApC,CAA5J,CAAuM,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,wBAAD,CAA0B,oCAA1B,CAA+D,kDAA/D,CAA9B,CAAiJ,KAAjJ,CAAvM,CAA+V,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,wBAAD,CAA9B,CAAyD,KAAzD,CAA/V,CAA+Z,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,qBAAD,CAAuB,gCAAvB,CAAvC,CAAgG,KAAhG,CAA/Z,CAAsgB,CAAC,kBAAD;AAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAkC,KAAlC,CAAtgB,CAA+iB,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,QAAD,CAAvC,CAAkD,KAAlD,CAA/iB,CAAzD,CAAkqB,GAAlqB,CAAsqB,CAAtqB,CAAwqB,CAAxqB,CAA0qB,CAA1qB,CAA4qB,CAA5qB,CAA8qB,CAA9qB,CAAgrB,CAAC,CAAC,88CAAD;AAAg9C,CAAC,CAAD,CAAG,EAAH,CAAh9C,CAAD,CAAy9C,CAAC,2NAAD,CAA6N,CAAC,EAAD,CAA7N,CAAz9C,CAA4rD,CAAC,gCAAD,CAA5rD,CAA+tD,CAAC,6DAAD,CAA+D,CAAC,CAAD,CAAG,EAAH,CAA/D,CAA/tD,CAAsyD,CAAC,UAAD,CAAY,CAAC,EAAD,CAAZ,CAAtyD,CAAwzD,CAAxzD,CAA0zD,CAAC,sBAAD,CAAwB,CAAC,EAAD,CAAxB,CAA1zD,CAAw1D,CAAC,2FAAD,CAA6F,CAAC,EAAD,CAA7F,CAAx1D,CAA27D,CAAC,UAAD;AAAY,CAAC,EAAD,CAAZ,CAA37D,CAAhrB,CAA8nF,CAA9nF,CAAgoF,IAAhoF,CAAthwB,IAAiq1B,CAAC,GAAD,CAAK,KAAL,CAAW,8BAAX,CAA0C,CAAC,EAAD,CAA1C,CAA+C,CAA/C,CAAiD,GAAjD,CAAqD,CAArD,CAAuD,kBAAvD,CAA0E,OAA1E,CAAkF,CAAlF,CAAoF,KAApF,CAAjq1B,IAAiw1B,CAAC,KAAD,CAAO,IAAP,CAAY,4BAAZ,CAAyC,CAAC,CAAD,CAAzC,CAA6C,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAA8C,KAA9C,CAAD,CAAsD,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,IAAD,CAAlD,CAAyD,KAAzD,CAAtD,CAAsH,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,MAAD,CAAlD,CAAtH,CAAkL,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,OAAD,CAAlD,CAA4D,KAA5D,CAAlL,CAA7C,CAAmS,GAAnS,CAAjw1B,IAA8i2B,CAAC,KAAD,CAAO,IAAP,CAAY,gCAAZ,CAA6C,CAAC,CAAD,CAA7C,CAAiD,CAAC,CAAC,kCAAD,CAAoC,aAApC;AAAkD,CAAC,YAAD,CAAlD,CAAiE,KAAjE,CAAD,CAAyE,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,MAAD,CAAlD,CAA2D,KAA3D,CAAzE,CAAjD,CAA6L,GAA7L,CAA9i2B,IAAqv2B,CAAC,IAAD,CAAM,IAAN,CAAW,iDAAX,CAA6D,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAA7D,CAAsE,CAAtE,CAAwE,GAAxE,CAA4E,CAA5E,CAA8E,mBAA9E,CAAkG,QAAlG,CAA2G,CAA3G,CAA6G,CAA7G,CAA+G,CAAC,CAAC,kBAAD,CAAoB,CAAC,EAAD,CAApB,CAAD,CAA2B,CAAC,mCAAD,CAAqC,CAAC,EAAD,CAArC,CAA3B,CAAsE,CAAC,gCAAD,CAAtE,CAAyG,CAAC,4DAAD,CAA8D,CAAC,CAAD,CAAG,EAAH,CAA9D,CAAzG,CAA+K,CAAC,UAAD,CAAY,CAAC,EAAD,CAAZ,CAA/K,CAAiM,CAAjM,CAAmM,CAAC,sBAAD,CAAwB,CAAC,EAAD,CAAxB,CAAnM,CAAiO,CAAC,2FAAD;AAA6F,CAAC,EAAD,CAA7F,CAAjO,CAAoU,CAAC,UAAD,CAAY,CAAC,EAAD,CAAZ,CAApU,CAA/G,CAArv2B,IAAis3B,CAAC,KAAD,CAAO,IAAP,CAAY,2BAAZ,CAAwC,CAAC,CAAD,CAAG,CAAH,CAAxC,CAA8C,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAkC,KAAlC,CAAD,CAA0C,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAiD,KAAjD,CAA1C,CAA9C,CAAiJ,GAAjJ,CAAjs3B,IAA413B,CAAC,KAAD,CAAO,IAAP,CAAY,sBAAZ,CAAmC,CAAC,CAAD,CAAnC,CAAuC,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAD,CAAvC,CAA513B,IAA863B,CAAC,KAAD,CAAO,IAAP,CAAY,4BAAZ,CAAyC,CAAC,CAAD,CAAzC,CAA6C,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,UAAD,CAAvC,CAAD,CAA7C,CAA963B,IAAwh4B,CAAC,KAAD,CAAO,IAAP,CAAY,aAAZ,CAA0B,CAAC,CAAD,CAA1B,CAA8B,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAD,CAA9B,CAAxh4B,IAAqm4B,CAAC,KAAD,CAAO,IAAP,CAAY,4BAAZ,CAAyC,CAAC,CAAD,CAAG,CAAH,CAAzC,CAA+C,CAAC,CAAC,kCAAD;AAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAD,CAA0D,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,MAAD,CAAlD,CAA1D,CAA/C,CAArm4B,IAAix4B,CAAC,KAAD,CAAO,IAAP,CAAY,gCAAZ,CAA6C,CAAC,CAAD,CAA7C,CAAiD,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,OAAD,CAAlD,CAA4D,KAA5D,CAAD,CAAoE,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAwD,KAAxD,CAApE,CAAjD,CAAqL,GAArL,CAAyL,CAAzL,CAA2L,CAA3L,CAA6L,CAA7L,CAA+L,CAA/L,CAAiM,CAAjM,CAAmM,CAAC,CAAC,mFAAD,CAAD,CAAuF,CAAC,wCAAD,CAAvF,CAAkI,CAAC,eAAD,CAAlI,CAAoJ,CAApJ,CAAsJ,CAAtJ,CAAwJ,CAAxJ,CAA0J,CAA1J,CAA4J,CAA5J,CAA8J,CAAC,wCAAD,CAA9J,CAAnM,CAAjx4B,IAAoq5B,CAAC,KAAD,CAAO,IAAP,CAAY,mCAAZ;AAAgD,CAAC,CAAD,CAAhD,CAAoD,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAD,CAAmD,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,MAAD,CAA5B,CAAnD,CAApD,CAApq5B,IAAwz5B,CAAC,IAAD,CAAM,IAAN,CAAW,gDAAX,CAA4D,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAA5D,CAAuE,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAD,CAAkD,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,4DAAD,CAA5B,CAAlD,CAA8I,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,QAAD,CAAvC,CAA9I,CAAiM,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,GAAD,CAAzC,CAAjM,CAAvE,CAAxz5B,IAAun6B,CAAC,KAAD,CAAO,IAAP,CAAY,yBAAZ,CAAsC,CAAC,CAAD,CAAG,EAAH,CAAtC,CAA6C,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAD,CAAwC,CAAC,0BAAD;AAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAAxC,CAA7C,CAAvn6B,IAAiw6B,CAAC,GAAD,CAAK,KAAL,CAAW,8BAAX,CAA0C,CAAC,EAAD,CAA1C,CAA+C,CAA/C,CAAiD,GAAjD,CAAqD,CAArD,CAAuD,kBAAvD,CAA0E,OAA1E,CAAkF,CAAlF,CAAoF,KAApF,CAAjw6B,IAAi26B,CAAC,KAAD,CAAO,IAAP,CAAY,oBAAZ,CAAiC,CAAC,CAAD,CAAG,CAAH,CAAjC,CAAuC,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,IAAD,CAA5B,CAAD,CAAqC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAArC,CAAvC,CAAj26B,IAAq+6B,CAAC,KAAD,CAAO,KAAP,CAAa,wCAAb,CAAsD,CAAC,CAAD,CAAtD,CAA0D,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,UAAD,CAA5B,CAAD,CAA1D,CAAr+6B,IAAil7B,CAAC,KAAD,CAAO,yBAAP,CAAiC,qDAAjC,CAAuF,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT,CAAW,EAAX,CAAvF,CAAsG,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,KAAD,CAAO,MAAP,CAA9B,CAAD;AAA+C,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,gCAAD,CAA5B,CAA/C,CAA+G,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA/G,CAA6J,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAA7J,CAAtG,CAA6T,CAA7T,CAA+T,CAA/T,CAAiU,CAAjU,CAAmU,CAAnU,CAAqU,CAArU,CAAuU,CAAvU,CAAyU,CAAzU,CAA2U,IAA3U,CAAjl7B,IAAu67B,CAAC,KAAD,CAAO,IAAP,CAAY,wBAAZ,CAAqC,CAAC,CAAD,CAAG,EAAH,CAArC,CAA4C,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,SAAD,CAA5B,CAAD,CAA5C,CAAv67B,IAAog8B,CAAC,KAAD,CAAO,IAAP,CAAY,gEAAZ,CAA6E,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAA7E,CAAuF,CAAC,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,OAAD,CAAzC,CAAmD,KAAnD,CAAD,CAA2D,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,GAAD,CAAzC,CAA+C,KAA/C,CAA3D,CAAiH,CAAC,uBAAD;AAAyB,UAAzB,CAAoC,CAAC,GAAD,CAApC,CAA0C,KAA1C,CAAjH,CAAkK,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,MAAD,CAAzC,CAAkD,KAAlD,CAAlK,CAA2N,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,GAAD,CAAzC,CAA+C,KAA/C,CAA3N,CAAiR,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,OAAD,CAAzC,CAAmD,KAAnD,CAAjR,CAA2U,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAA3U,CAAvF,CAAud,GAAvd,CAApg8B,IAAq+8B,CAAC,KAAD,CAAO,IAAP,CAAY,yBAAZ,CAAsC,CAAC,CAAD,CAAtC,CAA0C,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,SAAD,CAAvC,CAAD,CAA1C,CAAr+8B,IAA2k9B,CAAC,IAAD,CAAM,IAAN,CAAW,2BAAX,CAAuC,CAAC,CAAD,CAAG,CAAH,CAAvC,CAA6C,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,GAAD,CAApC,CAA0C,SAA1C,CAAD,CAAsD,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,sDAAD,CAAvC;AAAgG,SAAhG,CAAtD,CAAiK,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,OAAD,CAAzC,CAAmD,OAAnD,CAAjK,CAA7C,CAA2Q,IAA3Q,CAA3k9B,IAAi29B,CAAC,IAAD,CAAM,QAAN,CAAe,8EAAf,CAA8F,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,EAAP,CAAU,EAAV,CAAa,EAAb,CAAgB,EAAhB,CAA9F,CAAkH,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,IAAD,CAApC,CAAD,CAA6C,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,cAAD,CAA9B,CAA+C,OAA/C,CAA7C,CAAqG,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,KAAD,CAA9B,CAAsC,KAAtC,CAArG,CAAkJ,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,QAAD,CAA9B,CAAyC,OAAzC,CAAlJ,CAAoM,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,WAAD,CAAzC,CAAuD,KAAvD,CAApM,CAAkQ,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,GAAD,CAA9B,CAAoC,KAApC,CAAlQ,CAA6S,CAAC,0BAAD;AAA4B,UAA5B,CAAuC,CAAC,KAAD,CAAvC,CAA+C,KAA/C,CAA7S,CAAmW,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,IAAD,CAA/C,CAAsD,KAAtD,CAAnW,CAAga,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,GAAD,CAAzC,CAA+C,KAA/C,CAAha,CAAlH,CAAykB,GAAzkB,CAAj29B,IAAo7+B,CAAC,KAAD,CAAO,IAAP,CAAY,qDAAZ,CAAkE,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,EAAP,CAAlE,CAA6E,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,gCAAD,CAA5B,CAA+D,OAA/D,CAAD,CAAyE,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAsC,OAAtC,CAAzE,CAAwH,CAAC,yBAAD,CAA2B,UAA3B,CAAsC,CAAC,GAAD,CAAtC,CAA4C,OAA5C,CAAxH,CAA6K,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,sBAAD,CAAzC,CAAkE,OAAlE,CAA7K,CAAwP,CAAC,0BAAD;AAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAA8C,KAA9C,CAAxP,CAA6S,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAA8C,OAA9C,CAA7S,CAAoW,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAApW,CAA2Z,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA3Z,CAAyc,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,OAA7C,CAAzc,CAA+f,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,GAAD,CAA/C,CAAqD,KAArD,CAA/f,CAA7E,CAAyoB,GAAzoB,CAAp7+B,IAAukgC,CAAC,KAAD,CAAO,eAAP,CAAuB,+CAAvB,CAAuE,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,EAAP,CAAU,EAAV,CAAa,EAAb,CAAvE,CAAwF,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,KAAD,CAA5B,CAAD,CAAsC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,KAAD,CAAvC,CAAtC,CAAsF,CAAC,uBAAD;AAAyB,UAAzB,CAAoC,CAAC,SAAD,CAApC,CAAgD,KAAhD,CAAtF,CAA6I,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAA7I,CAAoM,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAApM,CAAmP,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,KAAD,CAA5B,CAAnP,CAAwR,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,QAAD,CAA/C,CAAxR,CAAmV,CAAC,oCAAD,CAAsC,aAAtC,CAAoD,CAAC,IAAD,CAApD,CAAnV,CAAxF,CAAwe,GAAxe,CAAvkgC,IAAyjhC,CAAC,IAAD,CAAM,IAAN,CAAW,mCAAX,CAA+C,CAAC,EAAD,CAA/C,CAAoD,CAApD,CAAsD,GAAtD,CAA0D,CAA1D,CAA4D,mBAA5D,CAAgF,QAAhF,CAAyF,CAAzF,CAA2F,sBAA3F,CAAzjhC,IAAirhC,CAAC,IAAD,CAAM,IAAN,CAAW,yCAAX,CAAqD,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAQ,EAAR,CAAW,EAAX,CAAc,EAAd,CAArD,CAAuE,CAAC,CAAC,UAAD,CAAY,IAAZ;AAAiB,CAAC,6BAAD,CAA+B,2CAA/B,CAA2E,4CAA3E,CAAjB,CAA0I,CAA1I,CAA4I,CAA5I,CAAD,CAAgJ,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,KAAD,CAAO,MAAP,CAA9B,CAA6C,CAA7C,CAA+C,CAA/C,CAAhJ,CAAkM,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,KAAD,CAAvC,CAA+C,CAA/C,CAAiD,CAAjD,CAAlM,CAAsP,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,oCAAD,CAAsC,0DAAtC,CAAiG,0FAAjG,CAAvC,CAAoO,KAApO,CAA0O,CAA1O,CAAtP,CAAme,CAAC,0BAAD,CAA4B,UAA5B;AAAuC,CAAC,qYAAD,CAAuY,keAAvY;AAA02B,ukBAA12B,CAAvC;AAA09C,KAA19C,CAAg+C,CAAh+C,CAAne,CAAs8D,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,gKAAD,CAAkK,uSAAlK;AAA0c,iWAA1c,CAAvC,CAAo1B,KAAp1B,CAA01B,CAA11B,CAAt8D,CAAmyF,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAsC,KAAtC,CAA4C,CAA5C,CAAnyF,CAAk1F,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,cAAD,CAAgB,eAAhB,CAAzC,CAA0E,CAA1E,CAA4E,CAA5E,CAAl1F,CAAi6F,CAAC,kCAAD;AAAoC,aAApC,CAAkD,CAAC,IAAD,CAAlD,CAAyD,CAAzD,CAA2D,CAA3D,CAAj6F,CAAvE,CAAuiG,GAAviG,CAAjrhC,IAAkunC,CAAC,KAAD,CAAO,IAAP,CAAY,SAAZ,CAAsB,CAAC,CAAD,CAAtB,CAA0B,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAD,CAA1B,CAAlunC,IAAuynC,CAAC,KAAD,CAAO,IAAP,CAAY,mCAAZ,CAAgD,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAhD,CAAyD,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,GAAD,CAApC,CAA0C,KAA1C,CAAD,CAAkD,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,OAAD,CAAzC,CAAmD,KAAnD,CAAlD,CAA4G,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAA5G,CAAzD,CAA0N,GAA1N,CAAvynC,IAA2goC,CAAC,IAAD,CAAM,IAAN,CAAW,uCAAX,CAAmD,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,EAAT,CAAnD,CAAgE,CAAC,CAAC,YAAD,CAAc,IAAd,CAAmB,CAAC,IAAD,CAAnB,CAA0B,KAA1B,CAAD,CAAkC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,0EAAD,CAA9B;AAA2G,KAA3G,CAAlC,CAAoJ,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,GAAD,CAAzC,CAA+C,KAA/C,CAApJ,CAA0M,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAiD,KAAjD,CAA1M,CAAhE,CAAmU,GAAnU,CAA3goC,IAAw1oC,CAAC,KAAD,CAAO,2BAAP,CAAmC,uBAAnC,CAA2D,CAAC,CAAD,CAAG,CAAH,CAA3D,CAAiE,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAD,CAAwC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAAxC,CAAjE,CAAwJ,CAAxJ,CAA0J,CAA1J,CAA4J,CAA5J,CAA8J,CAA9J,CAAgK,CAAhK,CAAkK,CAAlK,CAAoK,CAApK,CAAsK,IAAtK,CAAx1oC,IAAygpC,CAAC,IAAD,CAAM,IAAN,CAAW,0FAAX,CAAsG,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,EAAT,CAAY,EAAZ,CAAtG,CAAsH,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,OAAD,CAA9B,CAAD,CAA0C,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,uCAAD;AAAyC,uDAAzC,CAA9B,CAA1C,CAA2K,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,gCAAD,CAA9B,CAA3K,CAA6O,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,KAAD,CAA5B,CAA7O,CAAkR,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,SAAD,CAAzC,CAAlR,CAAwU,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,qBAAD,CAAzC,CAAxU,CAA0Y,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,qBAAD,CAAzC,CAA1Y,CAA4c,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAA5c,CAA8f,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA9f,CAA4iB,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,GAAD,CAAzC,CAA5iB,CAAtH,CAAmtB,CAAntB,CAAqtB,CAArtB,CAAutB,CAAvtB,CAAytB,CAAztB,CAA2tB,CAA3tB;AAA6tB,CAA7tB,CAA+tB,CAAC,CAAC,6aAAD,CAAD,CAAib,CAAC,2BAAD,CAA6B,CAAC,CAAD,CAAG,EAAH,CAA7B,CAAjb,CAAsd,CAAC,uBAAD,CAAyB,CAAC,CAAD,CAAG,CAAH,CAAzB,CAAtd;AAAsf,CAAC,gHAAD,CAAkH,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,EAAP,CAAlH,CAAtf,CAAonB,CAAC,qBAAD,CAAuB,CAAC,CAAD,CAAG,EAAH,CAAvB,CAApnB,CAAmpB,CAAnpB,CAAqpB,CAArpB,CAAupB,CAAvpB,CAAypB,CAAC,UAAD,CAAY,CAAC,EAAD,CAAZ,CAAzpB,CAA2qB,CAAC,6BAAD,CAA+B,CAAC,CAAD,CAAG,CAAH,CAA/B,CAA3qB,CAA/tB,CAAzgpC,IAAg8rC,CAAC,IAAD,CAAM,IAAN,CAAW,mCAAX,CAA+C,CAAC,EAAD,CAA/C,CAAoD,CAApD,CAAsD,GAAtD,CAA0D,CAA1D,CAA4D,qBAA5D,CAAkF,QAAlF,CAA2F,CAA3F,CAA6F,CAA7F,CAA+F,CAAC,CAAC,oBAAD,CAAD,CAAwB,CAAC,uDAAD,CAAxB,CAAkF,CAAC,8BAAD,CAAlF,CAAmH,CAAC,uGAAD,CAAnH;AAA6N,CAAC,cAAD,CAA7N,CAA8O,CAA9O,CAAgP,CAAC,+GAAD,CAAhP,CAAkW,CAAC,2FAAD,CAAlW,CAAgc,CAAC,UAAD,CAAhc,CAA/F,CAAh8rC,IAAm/sC,CAAC,GAAD,CAAK,KAAL,CAAW,8BAAX,CAA0C,CAAC,EAAD,CAA1C,CAA+C,CAA/C,CAAiD,GAAjD,CAAqD,CAArD,CAAuD,CAAvD,CAAyD,CAAzD,CAA2D,CAA3D,CAA6D,SAA7D,CAAn/sC,IAAgktC,CAAC,KAAD,CAAO,IAAP,CAAY,oCAAZ,CAAiD,CAAC,CAAD,CAAG,CAAH,CAAjD,CAAuD,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,WAAD,CAApC,CAAkD,OAAlD,CAAD,CAA4D,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,MAAD,CAA9B,CAAuC,KAAvC,CAA5D,CAA0G,CAAC,kBAAD;AAAoB,OAApB,CAA4B,CAAC,IAAD,CAA5B,CAAmC,KAAnC,CAA1G,CAAoJ,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,GAAD,CAApC,CAA0C,KAA1C,CAApJ,CAAvD,CAA6P,GAA7P,CAAhktC,IAAu0tC,CAAC,IAAD,CAAM,KAAN,CAAY,yDAAZ,CAAsE,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAQ,EAAR,CAAW,EAAX,CAAc,EAAd,CAAiB,EAAjB,CAAoB,EAApB,CAAuB,EAAvB,CAA0B,EAA1B,CAAtE,CAAoG,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,eAAD,CAAvC,CAAyD,KAAzD,CAAD,CAAiE,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,yFAAD,CAA2F,2KAA3F;AAAuQ,iMAAvQ,CAApC,CAA8e,KAA9e,CAAjE,CAAsjB,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAA8C,KAA9C,CAAtjB,CAA2mB,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,uBAAD,CAAyB,yCAAzB,CAApC,CAAwG,KAAxG,CAA3mB,CAA0tB,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,oVAAD;AAAsV,+mBAAtV;AAAs8B,+rBAAt8B;AAAsoD,+tBAAtoD,CAAvC;AAA84E,KAA94E,CAA1tB,CAA+mG,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,kCAAD,CAAvC,CAA4E,KAA5E,CAA/mG,CAAksG,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,KAAD,CAAvC,CAA+C,KAA/C,CAAlsG,CAAwvG,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,SAAD,CAAvC,CAAmD,KAAnD,CAAxvG,CAApG,CAAu5G,GAAv5G,CAAv0tC,IAAwu0C,CAAC,KAAD,CAAO,KAAP,CAAa,0DAAb,CAAwE,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,EAAP,CAAxE,CAAmF,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,QAAD,CAA9B,CAAyC,KAAzC,CAAD,CAAiD,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,MAAD,CAA5B,CAAqC,KAArC,CAAjD,CAA6F,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,MAAD,CAAzC,CAAkD,KAAlD,CAA7F,CAAnF,CAA0O,GAA1O,CAAxu0C,IAA490C,CAAC,KAAD,CAAO,IAAP,CAAY,iCAAZ,CAA8C,CAAC,CAAD;AAAG,EAAH,CAA9C,CAAqD,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,qBAAD,CAA5B,CAAoD,KAApD,CAAD,CAA4D,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,aAAD,CAAvC,CAAuD,KAAvD,CAA5D,CAA0H,CAAC,iCAAD,CAAmC,aAAnC,CAAiD,CAAC,GAAD,CAAjD,CAAuD,KAAvD,CAA1H,CAArD,CAA8O,GAA9O,CAA590C,IAAot1C,CAAC,KAAD,CAAO,UAAP,CAAkB,uBAAlB,CAA0C,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAA1C,CAAmD,CAAC,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,OAAD,CAAzC,CAAmD,KAAnD,CAAD,CAA2D,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA3D,CAAnD,CAA6J,GAA7J,CAApt1C,IAA231C,CAAC,KAAD,CAAO,IAAP,CAAY,kDAAZ,CAA+D,CAAC,CAAD,CAAG,CAAH,CAA/D,CAAqE,CAArE,CAAuE,GAAvE,CAA331C,IAA481C,CAAC,KAAD,CAAO,IAAP,CAAY,cAAZ,CAA2B,CAAC,CAAD,CAA3B,CAA+B,CAAC,CAAC,0BAAD;AAA4B,UAA5B,CAAuC,CAAC,QAAD,CAAvC,CAAD,CAA/B,CAA581C,IAAsi2C,CAAC,GAAD,CAAK,KAAL,CAAW,0BAAX,CAAsC,CAAC,EAAD,CAAtC,CAA2C,CAA3C,CAA6C,GAA7C,CAAiD,CAAjD,CAAmD,kBAAnD,CAAsE,OAAtE,CAA8E,CAA9E,CAAgF,KAAhF,CAAti2C,IAAko2C,CAAC,KAAD,CAAO,OAAP,CAAe,gCAAf,CAAgD,CAAC,CAAD,CAAG,EAAH,CAAhD,CAAuD,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAD,CAAqD,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,OAAD,CAApC,CAA8C,KAA9C,CAArD,CAA0G,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAA1G,CAAvD,CAAsN,GAAtN,CAAlo2C,IAAk22C,CAAC,IAAD,CAAM,qDAAN,CAA4D,0GAA5D;AAAuK,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,EAAT,CAAY,EAAZ,CAAe,EAAf,CAAkB,EAAlB,CAAqB,EAArB,CAAvK,CAAgM,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,8BAAD,CAA9B,CAA+D,KAA/D,CAAD,CAAuE,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAvE,CAA0G,CAAC,yBAAD,CAA2B,UAA3B,CAAsC,CAAC,GAAD,CAAtC,CAA4C,KAA5C,CAA1G,CAA6J,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAA7J,CAAoN,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,eAAD,CAAzC,CAA2D,KAA3D,CAApN,CAAsR,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAAtR,CAA6U,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAA7U,CAAhM,CAAkkB,GAAlkB,CAAskB,CAAtkB,CAAwkB,2BAAxkB,CAAl22C,IAA483C,CAAC,KAAD,CAAO,IAAP,CAAY,iCAAZ,CAA8C,CAAC,CAAD,CAAG,CAAH,CAA9C;AAAoD,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,+BAAD,CAA9B,CAAD,CAAkE,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAlE,CAApD,CAA583C,IAAgn4C,CAAC,GAAD,CAAK,KAAL,CAAW,8BAAX,CAA0C,CAAC,EAAD,CAA1C,CAA+C,CAA/C,CAAiD,GAAjD,CAAqD,CAArD,CAAuD,kBAAvD,CAA0E,OAA1E,CAAkF,CAAlF,CAAoF,KAApF,CAAhn4C,IAAgt4C,CAAC,GAAD,CAAK,KAAL,CAAW,oCAAX,CAAgD,CAAC,EAAD,CAAI,EAAJ,CAAhD,CAAwD,CAAxD,CAA0D,GAA1D,CAA8D,CAA9D,CAAgE,CAAhE,CAAkE,CAAlE,CAAoE,CAApE,CAAsE,MAAtE,CAA6E,CAA7E,CAA+E,MAA/E,CAAht4C,IAA4y4C,CAAC,KAAD,CAAO,IAAP,CAAY,4CAAZ,CAAyD,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAzD,CAAkE,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,mBAAD,CAAvC,CAA6D,KAA7D,CAAD,CAAqE,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,WAAD,CAAlD,CAAgE,KAAhE,CAArE,CAA4I,CAAC,kCAAD;AAAoC,aAApC,CAAkD,CAAC,MAAD,CAAlD,CAA2D,KAA3D,CAA5I,CAAlE,CAAiR,GAAjR,CAA5y4C,IAAuk5C,CAAC,KAAD,CAAO,IAAP,CAAY,2BAAZ,CAAwC,CAAC,CAAD,CAAG,CAAH,CAAxC,CAA8C,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,+CAAD,CAApC,CAAsF,KAAtF,CAAD,CAA8F,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,QAAD,CAAvC,CAA9F,CAA9C,CAAgM,GAAhM,CAAvk5C,IAAix5C,CAAC,GAAD,CAAK,KAAL,CAAW,8BAAX,CAA0C,CAAC,EAAD,CAA1C,CAA+C,CAA/C,CAAiD,GAAjD,CAAqD,CAArD,CAAuD,kBAAvD,CAA0E,OAA1E,CAAkF,CAAlF,CAAoF,KAApF,CAAjx5C,IAAi35C,CAAC,KAAD,CAAO,IAAP,CAAY,mCAAZ,CAAgD,CAAC,CAAD,CAAG,CAAH,CAAhD,CAAsD,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,qBAAD,CAAuB,yBAAvB,CAAvC,CAAD,CAA2F,CAAC,0BAAD;AAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA3F,CAAyI,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAAzI,CAAwL,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAAxL,CAAtD,CAA6R,GAA7R,CAAiS,CAAjS,CAAmS,UAAnS,CAAj35C,IAAqq6C,CAAC,IAAD,CAAM,IAAN,CAAW,aAAX,CAAyB,CAAC,CAAD,CAAzB,CAA6B,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAD,CAAqD,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,SAAD,CAAvC,CAAmD,KAAnD,CAArD,CAA7B,CAA6I,GAA7I,CAArq6C,IAA4z6C,CAAC,KAAD,CAAO,IAAP,CAAY,iDAAZ,CAA8D,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAA9D,CAAsE,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,OAAD,CAApC,CAA8C,KAA9C,CAAD,CAAsD,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAtD,CAA0G,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,SAAD,CAAvC;AAAmD,KAAnD,CAA1G,CAAtE,CAA2O,GAA3O,CAA5z6C,IAAij7C,CAAC,KAAD,CAAO,IAAP,CAAY,2BAAZ,CAAwC,CAAC,CAAD,CAAxC,CAA4C,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,QAAD,CAA5B,CAAD,CAA5C,CAAjj7C,IAA6o7C,CAAC,KAAD,CAAO,IAAP,CAAY,8BAAZ,CAA2C,CAAC,CAAD,CAA3C,CAA+C,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,SAAD,CAApC,CAAgD,QAAhD,CAAyD,CAAzD,CAAD,CAA6D,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAiD,MAAjD,CAAwD,CAAxD,CAA7D,CAAwH,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,qBAAD,CAA5B,CAAoD,QAApD,CAA6D,CAA7D,CAAxH,CAAwL,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAsC,QAAtC,CAA+C,CAA/C,CAAxL,CAA/C,CAA0R,GAA1R,CAA8R,CAA9R,CAAgS,MAAhS,CAA7o7C,IAA077C,CAAC,KAAD,CAAO,IAAP,CAAY,wEAAZ,CAAqF,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT;AAAW,CAAX,CAAa,EAAb,CAAgB,EAAhB,CAArF,CAAyG,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,kEAAD,CAA5B,CAAD,CAAmG,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,kEAAD,CAAvC,CAAnG,CAAgN,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,WAAD,CAAvC,CAAhN,CAAsQ,CAAC,oCAAD,CAAsC,aAAtC,CAAoD,CAAC,oBAAD,CAApD,CAAtQ,CAAkV,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,gBAAD,CAAvC,CAAlV,CAA6Y,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,IAAD,CAAlD,CAA7Y,CAAuc,CAAC,0BAAD,CAA4B,UAA5B;AAAuC,CAAC,GAAD,CAAvC,CAAvc,CAAqf,CAAC,4CAAD,CAA8C,gBAA9C,CAA+D,CAAC,oBAAD,CAA/D,CAArf,CAA4kB,CAAC,oCAAD,CAAsC,aAAtC,CAAoD,CAAC,iDAAD,CAApD,CAA5kB,CAAzG,CAA+xB,CAA/xB,CAAiyB,CAAjyB,CAAmyB,mDAAnyB,CAA177C,IAAux9C,CAAC,KAAD,CAAO,IAAP,CAAY,uBAAZ,CAAoC,CAAC,CAAD,CAApC,CAAwC,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,aAAD,CAAvC,CAAD,CAAxC,CAAvx9C,IAA+39C,CAAC,KAAD,CAAO,IAAP,CAAY,aAAZ,CAA0B,CAAC,CAAD,CAA1B,CAA8B,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAsC,KAAtC,CAAD,CAA9B,CAA6E,GAA7E,CAA/39C,IAAs99C,CAAC,KAAD,CAAO,IAAP,CAAY,aAAZ,CAA0B,CAAC,CAAD,CAA1B,CAA8B,CAAC,CAAC,kBAAD,CAAoB,OAApB;AAA4B,CAAC,YAAD,CAAc,mBAAd,CAAkC,mDAAlC,CAA5B,CAAmH,KAAnH,CAAD,CAA2H,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,OAAD,CAAlD,CAA4D,KAA5D,CAA3H,CAA8L,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,4BAAD,CAA8B,wCAA9B,CAA5B,CAAoG,KAApG,CAA9L,CAAyS,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAkC,KAAlC,CAAzS,CAAkV,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAsC,KAAtC,CAAlV,CAA9B,CAA8Z,GAA9Z,CAAka,CAAla,CAAoa,CAApa,CAAsa,CAAta,CAAwa,CAAxa,CAA0a,CAA1a,CAA4a,CAAC,CAAC,qJAAD,CAAD;AAAyJ,CAAC,wEAAD,CAAzJ,CAAoO,CAAC,UAAD,CAApO,CAAiP,CAAC,UAAD,CAAjP,CAA8P,CAA9P,CAAgQ,CAAhQ,CAAkQ,CAAlQ,CAAoQ,CAApQ,CAAsQ,CAAC,wBAAD,CAAtQ,CAA5a,CAAt99C,IAA0q/C,CAAC,KAAD,CAAO,IAAP,CAAY,uBAAZ,CAAoC,CAAC,CAAD,CAAG,CAAH,CAApC,CAA0C,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAD,CAAqD,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,OAAD,CAAlD,CAArD,CAAkH,CAAC,uCAAD,CAAyC,gBAAzC,CAA0D,CAAC,GAAD,CAA1D,CAAgE,KAAhE,CAAlH,CAA1C,CAAoO,GAApO,CAA1q/C,IAAw5/C,CAAC,KAAD,CAAO,IAAP,CAAY,4BAAZ,CAAyC,CAAC,CAAD,CAAzC,CAA6C,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,MAAD,CAA5B,CAAqC,KAArC,CAAD,CAA6C,CAAC,0BAAD,CAA4B,UAA5B;AAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAA7C,CAAoG,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,QAAD,CAAvC,CAAkD,KAAlD,CAApG,CAA7C,CAA2M,GAA3M,CAAx5/C,IAA6mgD,CAAC,KAAD,CAAO,IAAP,CAAY,mCAAZ,CAAgD,CAAC,CAAD,CAAG,CAAH,CAAhD,CAAsD,CAAC,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,OAAD,CAAzC,CAAmD,KAAnD,CAAD,CAAtD,CAAkH,GAAlH,CAA7mgD,IAAyugD,CAAC,KAAD,CAAO,IAAP,CAAY,gCAAZ,CAA6C,CAAC,CAAD,CAA7C,CAAiD,CAAjD,CAAmD,GAAnD,CAAuD,CAAvD,CAAyD,CAAzD,CAA2D,CAA3D,CAA6D,CAA7D,CAA+D,CAA/D,CAAiE,CAAC,CAAC,mDAAD,CAAD,CAAuD,CAAC,wCAAD,CAAvD,CAAkG,CAAC,eAAD,CAAlG,CAAoH,CAApH,CAAsH,CAAtH,CAAwH,CAAxH,CAA0H,CAA1H,CAA4H,CAA5H,CAA8H,CAAC,wCAAD,CAA9H,CAAjE,CAAzugD,IAA09gD,CAAC,KAAD,CAAO,IAAP,CAAY,YAAZ,CAAyB,CAAC,CAAD,CAAzB,CAA6B,CAAC,CAAC,kCAAD;AAAoC,aAApC,CAAkD,CAAC,MAAD,CAAlD,CAA2D,KAA3D,CAAD,CAA7B,CAAiG,GAAjG,CAAqG,CAArG,CAAuG,mBAAvG,CAA2H,MAA3H,CAA19gD,IAAkmhD,CAAC,KAAD,CAAO,KAAP,CAAa,iCAAb,CAA+C,CAAC,CAAD,CAA/C,CAAmD,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAD,CAAnD,CAA4F,GAA5F,CAAlmhD,IAAwshD,CAAC,KAAD,CAAO,IAAP,CAAY,eAAZ,CAA4B,CAAC,CAAD,CAA5B,CAAgC,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,8BAAD,CAApC,CAAqE,KAArE,CAAD,CAA6E,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAiD,KAAjD,CAA7E,CAAqI,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,MAAD,CAA/C,CAAwD,KAAxD,CAArI,CAAhC,CAAqO,GAArO,CAAxshD,IAAu7hD,CAAC,KAAD,CAAO,IAAP,CAAY,cAAZ,CAA2B,CAAC,CAAD,CAA3B,CAA+B,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,QAAD,CAAlD,CAAD,CAA/B,CAAv7hD;GAA4hiD,CAAC,IAAD,CAAM,IAAN,CAAW,mEAAX,CAA+E,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,EAAT,CAA/E,CAA4F,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,MAAD,CAApC,CAA6C,KAA7C,CAAD,CAAqD,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,2DAAD,CAAvC,CAAqG,KAArG,CAArD,CAAiK,CAAC,yBAAD,CAA2B,UAA3B,CAAsC,CAAC,MAAD,CAAtC,CAA+C,KAA/C,CAAjK,CAAuN,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,eAAD,CAAzC,CAA2D,KAA3D,CAAvN,CAAyR,CAAC,yBAAD,CAA2B,UAA3B,CAAsC,CAAC,6BAAD,CAAtC,CAAsE,KAAtE,CAAzR,CAAsW,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,GAAD,CAApC,CAA0C,KAA1C,CAAtW;AAAuZ,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAvZ,CAA2c,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,IAAD,CAA/C,CAAsD,KAAtD,CAA3c,CAAwgB,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,GAAD,CAApC,CAA0C,KAA1C,CAAxgB,CAA5F,CAAspB,GAAtpB,CAA5hiD,IAA4rjD,CAAC,KAAD,CAAO,KAAP,CAAa,0BAAb,CAAwC,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAxC,CAAiD,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAiD,KAAjD,CAAD,CAAyD,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAzD,CAAgG,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,YAAD,CAA9B,CAA6C,KAA7C,CAAhG,CAAoJ,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,qCAAD,CAAuC,0CAAvC,CAA9B,CAAiH,KAAjH,CAApJ,CAA4Q,CAAC,oBAAD;AAAsB,OAAtB,CAA8B,CAAC,MAAD,CAA9B,CAAuC,KAAvC,CAA5Q,CAAjD,CAA4W,GAA5W,CAA5rjD,IAAkjkD,CAAC,KAAD,CAAO,IAAP,CAAY,iCAAZ,CAA8C,CAAC,CAAD,CAAG,CAAH,CAA9C,CAAoD,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAD,CAAoC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAApC,CAApD,CAAljkD,IAAwrkD,CAAC,GAAD,CAAK,KAAL,CAAW,6BAAX,CAAyC,CAAC,EAAD,CAAzC,CAA8C,CAA9C,CAAgD,GAAhD,CAAoD,CAApD,CAAsD,kBAAtD,CAAyE,OAAzE,CAAiF,CAAjF,CAAmF,KAAnF,CAAxrkD,IAAuxkD,CAAC,KAAD,CAAO,IAAP,CAAY,gCAAZ,CAA6C,CAAC,CAAD,CAA7C,CAAiD,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,OAAD,CAAlD,CAA4D,KAA5D,CAAD,CAAoE,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAwD,KAAxD,CAApE,CAAjD,CAAqL,GAArL,CAAvxkD,IAAs9kD,CAAC,KAAD,CAAO,IAAP,CAAY,2BAAZ,CAAwC,CAAC,CAAD,CAAxC,CAA4C,CAAC,CAAC,kCAAD;AAAoC,aAApC,CAAkD,CAAC,QAAD,CAAlD,CAAD,CAA5C,CAAt9kD,IAAwklD,CAAC,GAAD,CAAK,KAAL,CAAW,8BAAX,CAA0C,CAAC,EAAD,CAA1C,CAA+C,CAA/C,CAAiD,GAAjD,CAAqD,CAArD,CAAuD,iBAAvD,CAAyE,OAAzE,CAAiF,CAAjF,CAAmF,KAAnF,CAAxklD,IAAuqlD,CAAC,KAAD,CAAO,IAAP,CAAY,uCAAZ,CAAoD,CAAC,CAAD,CAApD,CAAwD,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,UAAD,CAA5B,CAAD,CAAxD,CAAvqlD,IAAixlD,CAAC,KAAD,CAAO,sBAAP,CAA8B,sCAA9B,CAAqE,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAArE,CAA8E,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,eAAD,CAA5B,CAAD,CAAgD,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,MAAD,CAA5B,CAAhD,CAAsF,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAtF,CAA9E,CAAwM,CAAxM,CAA0M,CAA1M,CAA4M,CAA5M,CAA8M,CAA9M,CAAgN,CAAhN,CAAkN,CAAlN,CAAoN,CAApN,CAAsN,KAAtN,CAAjxlD,IAAm/lD,CAAC,KAAD,CAAO,WAAP,CAAmB,0CAAnB;AAA8D,CAAC,CAAD,CAAG,EAAH,CAA9D,CAAqE,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,SAAD,CAA5B,CAAD,CAA0C,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAA1C,CAArE,CAAiK,CAAjK,CAAmK,CAAnK,CAAqK,CAArK,CAAuK,CAAvK,CAAyK,CAAzK,CAA2K,CAA3K,CAA6K,CAA7K,CAA+K,IAA/K,CAAn/lD,IAA6qmD,CAAC,KAAD,CAAO,IAAP,CAAY,mCAAZ,CAAgD,CAAC,CAAD,CAAG,CAAH,CAAhD,CAAsD,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,QAAD,CAApC,CAA+C,KAA/C,CAAD,CAAuD,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAvD,CAA2G,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,SAAD,CAAlD,CAA8D,KAA9D,CAA3G,CAAtD,CAAuO,GAAvO,CAA7qmD,IAA85mD,CAAC,IAAD,CAAM,OAAN,CAAc,yIAAd;AAAwJ,CAAC,EAAD,CAAI,EAAJ,CAAxJ,CAAgK,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,aAAD,CAAvC,CAAuD,CAAvD,CAAyD,CAAzD,CAAD,CAA6D,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAiD,CAAjD,CAAmD,CAAnD,CAA7D,CAAmH,CAAC,+BAAD,CAAiC,UAAjC,CAA4C,CAAC,kBAAD,CAA5C,CAAiE,CAAjE,CAAmE,CAAnE,CAAnH,CAAyL,CAAC,+BAAD,CAAiC,UAAjC,CAA4C,CAAC,GAAD,CAA5C,CAAkD,CAAlD,CAAoD,CAApD,CAAzL,CAAhK,CAAiZ,IAAjZ,CAAsZ,CAAtZ,CAAwZ,mBAAxZ,CAA4a,CAA5a,CAA8a,CAA9a,CAAgb,CAAhb,CAAkb,CAAlb,CAAob,IAApb,CAA95mD,IAA61nD,CAAC,IAAD,CAAM,IAAN,CAAW,gCAAX,CAA4C,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAA5C,CAAqD,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,QAAD,CAApC,CAA+C,KAA/C,CAAD,CAAuD,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,8BAAD,CAAgC,kDAAhC,CAAzC;AAA6H,KAA7H,CAAvD,CAA2L,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,GAAD,CAApC,CAA0C,KAA1C,CAA3L,CAA4O,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,eAAD,CAA/C,CAA5O,CAA8S,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAA8C,KAA9C,CAA9S,CAAmW,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAnW,CAArD,CAA6c,GAA7c,CAA71nD,IAAozoD,CAAC,KAAD,CAAO,IAAP,CAAY,kBAAZ,CAA+B,CAAC,CAAD,CAAG,CAAH,CAA/B,CAAqC,CAAC,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,WAAD,CAAzC,CAAD,CAAyD,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAAzD,CAArC,CAApzoD,IAAu8oD,CAAC,KAAD,CAAO,IAAP,CAAY,cAAZ,CAA2B,CAAC,CAAD,CAAG,CAAH,CAA3B,CAAiC,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAA8C,KAA9C,CAAD,CAAsD,CAAC,4BAAD,CAA8B,UAA9B;AAAyC,CAAC,GAAD,CAAzC,CAA+C,KAA/C,CAAtD,CAA4G,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAA8C,KAA9C,CAA5G,CAAiK,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAjK,CAAjC,CAAuP,GAAvP,CAAv8oD,IAAwspD,CAAC,KAAD,CAAO,IAAP,CAAY,8BAAZ,CAA2C,CAAC,CAAD,CAA3C,CAA+C,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,WAAD,CAAvC,CAAD,CAA/C,CAAxspD,IAAqzpD,CAAC,KAAD,CAAO,IAAP,CAAY,eAAZ,CAA4B,CAAC,CAAD,CAA5B,CAAgC,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAAD,CAAgD,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,oBAAD,CAAlD,CAAhD,CAAhC,CAArzpD,IAAs9pD,CAAC,KAAD,CAAO,IAAP,CAAY,YAAZ,CAAyB,CAAC,CAAD,CAAzB,CAA6B,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,QAAD,CAA5B,CAAD,CAAyC,CAAC,eAAD,CAAiB,OAAjB,CAAyB,CAAC,MAAD,CAAzB,CAAzC,CAA7B,CAA0G,CAA1G;AAA4G,CAA5G,CAA8G,kBAA9G,CAAiI,KAAjI,CAAt9pD,IAAmmqD,CAAC,KAAD,CAAO,KAAP,CAAa,qDAAb,CAAmE,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAQ,EAAR,CAAW,EAAX,CAAc,EAAd,CAAiB,EAAjB,CAAnE,CAAwF,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAA8C,KAA9C,CAAD,CAAsD,CAAC,yBAAD,CAA2B,UAA3B,CAAsC,CAAC,wBAAD,CAAtC,CAAiE,KAAjE,CAAtD,CAA8H,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,cAAD,CAAzC,CAA0D,KAA1D,CAA9H,CAA+L,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,OAAD,CAAzC,CAAmD,KAAnD,CAA/L,CAAyP,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,MAAD,CAAzC,CAAkD,KAAlD,CAAzP,CAAkT,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,MAAD,CAAzC,CAAkD,KAAlD,CAAlT,CAAxF,CAAoc,GAApc,CAAnmqD,IAAijrD,CAAC,KAAD,CAAO,IAAP;AAAY,6BAAZ,CAA0C,CAAC,CAAD,CAA1C,CAA8C,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,SAAD,CAA5B,CAAD,CAA9C,CAAjjrD,IAAgprD,CAAC,IAAD,CAAM,IAAN,CAAW,8EAAX,CAA0F,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT,CAAW,EAAX,CAAc,EAAd,CAA1F,CAA4G,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,OAAD,CAA9B,CAAwC,KAAxC,CAAD,CAAgD,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,IAAD,CAA5B,CAAmC,KAAnC,CAAhD,CAA0F,CAAC,eAAD,CAAiB,OAAjB,CAAyB,CAAC,GAAD,CAAzB,CAA+B,KAA/B,CAA1F,CAAgI,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,yCAAD,CAAvC,CAAmF,KAAnF,CAAhI,CAA0N,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,YAAD,CAAvC,CAAsD,KAAtD,CAA1N,CAAuR,CAAC,0BAAD,CAA4B,UAA5B;AAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAvR,CAA5G,CAAwb,GAAxb,CAAhprD,IAAklsD,CAAC,IAAD,CAAM,IAAN,CAAW,yBAAX,CAAqC,CAAC,CAAD,CAAG,CAAH,CAArC,CAA2C,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,UAAD,CAAvC,CAAD,CAAsD,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,SAAD,CAAlD,CAAtD,CAA3C,CAAiK,CAAjK,CAAmK,CAAnK,CAAqK,CAArK,CAAuK,CAAvK,CAAyK,CAAzK,CAA2K,iBAA3K,CAAllsD,IAAqxsD,CAAC,KAAD,CAAO,IAAP,CAAY,8BAAZ,CAA2C,CAAC,CAAD,CAAG,EAAH,CAAM,EAAN,CAA3C,CAAqD,CAAC,CAAC,eAAD,CAAiB,OAAjB,CAAyB,CAAC,QAAD,CAAzB,CAAoC,KAApC,CAAD,CAA4C,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,mCAAD,CAA5B,CAAkE,KAAlE,CAA5C,CAAqH,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAArH,CAArD,CAA8M,GAA9M,CAArxsD,IAA6+sD,CAAC,KAAD,CAAO,IAAP,CAAY,kCAAZ,CAA+C,CAAC,CAAD,CAA/C,CAAmD,CAAC,CAAC,kBAAD;AAAoB,OAApB,CAA4B,CAAC,QAAD,CAA5B,CAAD,CAAnD,CAA7+sD,IAAgltD,CAAC,KAAD,CAAO,IAAP,CAAY,uBAAZ,CAAoC,CAAC,CAAD,CAAG,CAAH,CAApC,CAA0C,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAD,CAA1C,CAAhltD,IAAqqtD,CAAC,IAAD,CAAM,YAAN,CAAmB,6FAAnB,CAAiH,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT,CAAW,EAAX,CAAjH,CAAgI,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,UAAD,CAA9B,CAA2C,KAA3C,CAAD,CAAmD,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,iBAAD,CAAmB,uBAAnB,CAAzC,CAAqF,KAArF,CAAnD,CAA+I,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,2BAAD,CAApC,CAAkE,KAAlE,CAA/I,CAAwN,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,oBAAD,CAAzC;AAAgE,KAAhE,CAAxN,CAA+R,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,UAAD,CAAzC,CAAsD,KAAtD,CAA/R,CAA4V,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,2BAAD,CAAzC,CAAuE,KAAvE,CAA5V,CAAhI,CAA2iB,GAA3iB,CAA+iB,CAA/iB,CAAijB,CAAjjB,CAAmjB,CAAnjB,CAAqjB,CAArjB,CAAujB,CAAvjB,CAAyjB,CAAzjB,CAA2jB,IAA3jB,CAArqtD,IAA2uuD,CAAC,KAAD,CAAO,IAAP,CAAY,4CAAZ,CAAyD,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAzD,CAAiE,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,MAAD,CAA9B,CAAD,CAAyC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAzC,CAA4E,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAA5E,CAAjE,CAA3uuD,IAAs6uD,CAAC,KAAD,CAAO,IAAP,CAAY,mDAAZ,CAAgE,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAQ,EAAR,CAAhE,CAA4E,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,UAAD,CAA5B,CAAD,CAA2C,CAAC,kBAAD,CAAoB,OAApB;AAA4B,CAAC,MAAD,CAA5B,CAA3C,CAAiF,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAAjF,CAA5E,CAAt6uD,IAAwnvD,CAAC,IAAD,CAAM,yBAAN,CAAgC,uBAAhC,CAAwD,CAAC,CAAD,CAAG,CAAH,CAAxD,CAA8D,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,IAAD,CAA5B,CAAmC,OAAnC,CAAD,CAA6C,CAAC,eAAD,CAAiB,OAAjB,CAAyB,CAAC,GAAD,CAAzB,CAA+B,OAA/B,CAA7C,CAAqF,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAsC,OAAtC,CAArF,CAAoI,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAApI,CAA9D,CAAiP,GAAjP,CAAqP,CAArP,CAAuP,CAAvP,CAAyP,CAAzP,CAA2P,CAA3P,CAA6P,CAA7P,CAA+P,CAA/P,CAAiQ,IAAjQ,CAAsQ,SAAtQ,CAAxnvD,IAA84vD,CAAC,KAAD,CAAO,IAAP,CAAY,8BAAZ,CAA2C,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAA3C,CAAmD,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAAD,CAAgD,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,UAAD,CAAlD,CAAhD,CAAgH,CAAC,kCAAD;AAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAhH,CAAnD,CAA94vD,IAAinwD,CAAC,KAAD,CAAO,aAAP,CAAqB,kDAArB,CAAwE,CAAC,CAAD,CAAG,CAAH,CAAxE,CAA8E,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,cAAD,CAA5B,CAAD,CAA+C,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,MAAD,CAA5B,CAA/C,CAA9E,CAAoK,CAApK,CAAsK,CAAtK,CAAwK,CAAxK,CAA0K,CAA1K,CAA4K,CAA5K,CAA8K,CAA9K,CAAgL,CAAhL,CAAkL,IAAlL,CAAjnwD,IAA8ywD,CAAC,IAAD,CAAM,IAAN,CAAW,iDAAX,CAA6D,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,EAAP,CAAU,EAAV,CAAa,EAAb,CAAgB,EAAhB,CAA7D,CAAiF,CAAC,CAAC,eAAD,CAAiB,OAAjB,CAAyB,CAAC,GAAD,CAAzB,CAA+B,OAA/B,CAAD,CAAyC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,oEAAD,CAAsE,qHAAtE,CAA9B;AAA2N,OAA3N,CAAzC,CAA6Q,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,uBAAD,CAAyB,+BAAzB,CAA5B,CAAsF,OAAtF,CAA7Q,CAA4W,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,GAAD,CAApC,CAA0C,OAA1C,CAA5W,CAA+Z,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,cAAD,CAAvC,CAAwD,OAAxD,CAA/Z,CAAge,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAAhe,CAAuhB,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAAvhB,CAAqkB,CAAC,oCAAD,CAAsC,aAAtC,CAAoD,CAAC,GAAD,CAApD,CAArkB,CAAjF,CAAktB,GAAltB,CAA9ywD,IAA0gyD,CAAC,IAAD,CAAM,IAAN,CAAW,iKAAX;AAA6K,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAQ,EAAR,CAAW,EAAX,CAA7K,CAA4L,CAAC,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,OAAD,CAAzC,CAAmD,KAAnD,CAAD,CAA2D,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAA3D,CAA8F,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,iJAAD,CAAmJ,qKAAnJ,CAA9B,CAAwV,OAAxV,CAA9F,CAA+b,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,4DAAD,CAA9B;AAA6F,OAA7F,CAA/b,CAAqiB,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,IAAD,CAA5B,CAAmC,OAAnC,CAAriB,CAAilB,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAkC,KAAlC,CAAjlB,CAA0nB,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,mDAAD,CAAlD,CAAwG,OAAxG,CAA1nB,CAA2uB,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,QAAD,CAAlD,CAA6D,OAA7D,CAA3uB,CAA5L,CAA8+B,GAA9+B,CAA1gyD,IAAkg0D,CAAC,IAAD,CAAM,IAAN,CAAW,uDAAX,CAAmE,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,EAAT,CAAnE,CAAgF,CAAC,CAAC,UAAD,CAAY,IAAZ,CAAiB,CAAC,IAAD,CAAjB,CAAD,CAA0B,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,UAAD,CAA5B,CAA1B,CAAoE,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,gFAAD;AAAkF,iFAAlF,CAAvC,CAApE,CAAiR,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,IAAD,CAAzC,CAAjR,CAAkU,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,gDAAD,CAAvC,CAAlU,CAA6Z,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,6BAAD,CAAlD,CAA7Z,CAAgf,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,GAAD,CAAzC,CAAhf,CAAhF,CAAlg0D,IAAyn1D,CAAC,KAAD,CAAO,IAAP,CAAY,gCAAZ,CAA6C,CAAC,CAAD,CAAG,CAAH,CAA7C,CAAmD,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAAD,CAAwD,CAAC,0BAAD,CAA4B,UAA5B;AAAuC,CAAC,GAAD,CAAvC,CAAxD,CAAsG,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAwD,KAAxD,CAAtG,CAAnD,CAAyN,GAAzN,CAAzn1D,IAA411D,CAAC,GAAD,CAAK,KAAL,CAAW,2BAAX,CAAuC,CAAC,EAAD,CAAvC,CAA4C,CAA5C,CAA8C,GAA9C,CAAkD,CAAlD,CAAoD,CAApD,CAAsD,CAAtD,CAAwD,CAAxD,CAA0D,SAA1D,CAA511D,IAAs61D,CAAC,KAAD,CAAO,IAAP,CAAY,gCAAZ,CAA6C,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAA7C,CAAsD,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,QAAD,CAApC,CAA+C,KAA/C,CAAD,CAAuD,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAvD,CAA2G,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA3G,CAAtD,CAAgN,GAAhN,CAAt61D,IAAgo2D,CAAC,KAAD,CAAO,IAAP,CAAY,mCAAZ,CAAgD,CAAC,CAAD,CAAhD,CAAoD,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAD,CAAmD,CAAC,0BAAD,CAA4B,UAA5B;AAAuC,CAAC,YAAD,CAAvC,CAAnD,CAApD,CAAho2D,IAAqy2D,CAAC,KAAD,CAAO,QAAP,CAAgB,gCAAhB,CAAiD,CAAC,CAAD,CAAjD,CAAqD,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAD,CAArD,CAAry2D,IAAy42D,CAAC,KAAD,CAAO,IAAP,CAAY,sDAAZ,CAAmE,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,EAAT,CAAY,EAAZ,CAAnE,CAAmF,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,QAAD,CAA9B,CAAyC,KAAzC,CAAD,CAAiD,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,uCAAD,CAA5B,CAAsE,OAAtE,CAAjD,CAAgI,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,wDAAD,CAA9B,CAAyF,OAAzF,CAAhI,CAAkO,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,sDAAD,CAAzC;AAAkG,OAAlG,CAAlO,CAA6U,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAA7U,CAA4X,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,oBAAD,CAA5B,CAAmD,KAAnD,CAA5X,CAAsb,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAiD,KAAjD,CAAtb,CAA8e,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA9e,CAAnF,CAAgnB,GAAhnB,CAAz42D,IAAmg4D,CAAC,KAAD,CAAO,IAAP,CAAY,gDAAZ,CAA6D,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,EAAP,CAA7D,CAAwE,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,SAAD,CAA5B,CAAD,CAA0C,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAA1C,CAAxE,CAAng4D,IAAmq4D,CAAC,KAAD,CAAO,IAAP,CAAY,uBAAZ,CAAoC,CAAC,CAAD,CAApC,CAAwC,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,QAAD,CAAlD,CAA6D,KAA7D,CAAD,CAAxC,CAA8G,GAA9G,CAAkH,CAAlH,CAAoH,CAApH;AAAsH,CAAtH,CAAwH,CAAxH,CAA0H,CAA1H,CAA4H,CAAC,CAAC,sCAAD,CAAD,CAA0C,CAAC,uJAAD,CAA1C,CAAoM,CAAC,UAAD,CAApM,CAAiN,CAAC,kBAAD,CAAjN,CAAsO,CAAtO,CAAwO,CAAxO,CAA0O,CAA1O,CAA4O,CAA5O,CAA8O,CAA9O,CAAgP,CAAC,iCAAD,CAAhP,CAA5H,CAAnq4D,IAA0j5D,CAAC,IAAD,CAAM,IAAN,CAAW,mCAAX,CAA+C,CAAC,CAAD,CAAG,CAAH,CAA/C,CAAqD,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,QAAD,CAAU,YAAV,CAA5B,CAAoD,KAApD,CAAD,CAA4D,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,QAAD,CAA5B,CAAuC,KAAvC,CAA5D,CAA0G,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAiD,KAAjD,CAA1G;AAAkK,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,SAAD,CAAvC,CAAmD,KAAnD,CAAlK,CAArD,CAAkR,GAAlR,CAAsR,CAAtR,CAAwR,CAAxR,CAA0R,CAA1R,CAA4R,CAA5R,CAA8R,CAA9R,CAAgS,CAAhS,CAAkS,CAAlS,CAAoS,OAApS,CAA1j5D,IAA425D,CAAC,KAAD,CAAO,IAAP,CAAY,uGAAZ,CAAoH,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,EAAT,CAAY,EAAZ,CAAe,EAAf,CAApH,CAAuI,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,sBAAD,CAA9B,CAAuD,KAAvD,CAAD,CAA+D,CAAC,qBAAD,CAAuB,OAAvB,CAA+B,CAAC,QAAD,CAA/B,CAA0C,KAA1C,CAA/D,CAAvI,CAAwP,GAAxP,CAA525D,IAA8m6D,CAAC,GAAD,CAAK,KAAL,CAAW,wBAAX,CAAoC,CAAC,EAAD,CAAI,EAAJ,CAApC,CAA4C,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,oBAAD,CAAsB,oDAAtB;AAA2E,uEAA3E,CAAlD,CAAsM,QAAtM,CAA+M,CAA/M,CAAD,CAAmN,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,qBAAD,CAAuB,0EAAvB,CAAkG,4LAAlG,CAA/C,CAA+U,QAA/U,CAAwV,CAAxV,CAAnN,CAA8iB,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,QAA7C,CAAsD,CAAtD,CAA9iB,CAAumB,CAAC,kCAAD;AAAoC,aAApC,CAAkD,CAAC,0BAAD,CAAlD,CAA+E,QAA/E,CAAwF,CAAxF,CAAvmB,CAAksB,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAwD,QAAxD,CAAlsB,CAA5C,CAAizB,GAAjzB,CAAqzB,CAArzB,CAAuzB,CAAvzB,CAAyzB,CAAzzB,CAA2zB,CAA3zB,CAA6zB,iBAA7zB,CAA+0B,CAA/0B,CAAi1B,MAAj1B,CAA9m6D,IAA487D,CAAC,KAAD,CAAO,IAAP,CAAY,gCAAZ,CAA6C,CAAC,CAAD,CAAG,CAAH,CAA7C,CAAmD,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAD,CAA0D,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAiD,KAAjD,CAA1D,CAAkH,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAAlH,CAAnD,CAAoN,GAApN,CAA587D,IAA0q8D,CAAC,KAAD,CAAO,IAAP,CAAY,8BAAZ,CAA2C,CAAC,CAAD,CAAG,EAAH,CAA3C,CAAkD,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAD,CAAoC,CAAC,0BAAD,CAA4B,UAA5B;AAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAApC,CAAwF,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAxF,CAA4I,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,IAAD,CAAzC,CAAgD,KAAhD,CAA5I,CAAmM,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAAnM,CAAlD,CAAoS,GAApS,CAA1q8D,IAAw98D,CAAC,KAAD,CAAO,OAAP,CAAe,6BAAf,CAA6C,CAAC,CAAD,CAAG,CAAH,CAA7C,CAAmD,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,4BAAD,CAA5B,CAAD,CAAnD,CAAx98D,IAA+k9D,CAAC,KAAD,CAAO,YAAP,CAAoB,iCAApB,CAAsD,CAAC,CAAD,CAAtD,CAA0D,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,aAAD,CAApC,CAAD,CAA1D,CAAiH,CAAjH,CAAmH,CAAnH,CAAqH,CAArH,CAAuH,CAAvH,CAAyH,CAAzH,CAA2H,CAA3H,CAA6H,CAA7H,CAA+H,IAA/H,CAA/k9D,IAAyt9D,CAAC,KAAD,CAAO,IAAP,CAAY,YAAZ,CAAyB,CAAC,CAAD,CAAzB,CAA6B,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC;AAAgD,KAAhD,CAAD,CAA7B,CAAsF,GAAtF,CAAzt9D,IAAyz9D,CAAC,IAAD,CAAM,IAAN,CAAW,yEAAX,CAAqF,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,EAAT,CAArF,CAAkG,CAAC,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,IAAD,CAAzC,CAAgD,KAAhD,CAAsD,CAAtD,CAAwD,UAAxD,CAAD,CAAqE,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,iBAAD,CAA5B,CAAgD,KAAhD,CAAsD,CAAtD,CAAwD,OAAxD,CAArE,CAAsI,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,wCAAD,CAAvC,CAAkF,KAAlF,CAAwF,CAAxF,CAA0F,UAA1F,CAAtI,CAA4O,CAAC,iCAAD,CAAmC,aAAnC,CAAiD,CAAC,GAAD,CAAjD,CAAuD,KAAvD,CAA6D,CAA7D,CAA+D,aAA/D,CAA5O,CAA0T,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,sHAAD,CAAzC;AAAkK,KAAlK,CAAwK,CAAxK,CAA0K,UAA1K,CAA1T,CAAgf,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,eAAD,CAAzC,CAA2D,KAA3D,CAAiE,CAAjE,CAAmE,UAAnE,CAAhf,CAA+jB,CAAC,oCAAD,CAAsC,aAAtC,CAAoD,CAAC,mDAAD,CAApD,CAA0G,KAA1G,CAAgH,CAAhH,CAAkH,aAAlH,CAA/jB,CAAgsB,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,MAAD,CAAlD,CAA2D,KAA3D,CAAiE,CAAjE,CAAmE,aAAnE,CAAhsB,CAAkxB,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,GAAD,CAA/C,CAAqD,KAArD,CAA2D,CAA3D,CAA6D,aAA7D,CAAlxB,CAA81B,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,+EAAD,CAAlD;AAAoI,KAApI,CAA0I,CAA1I,CAA4I,aAA5I,CAA91B,CAAy/B,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAwD,KAAxD,CAA8D,CAA9D,CAAgE,aAAhE,CAAz/B,CAAwkC,CAAC,0CAAD,CAA4C,gBAA5C,CAA6D,CAAC,MAAD,CAA7D,CAAsE,KAAtE,CAA4E,CAA5E,CAA8E,gBAA9E,CAAxkC,CAAlG,CAA2wC,GAA3wC,CAAzz9D,IAA8kgE,CAAC,IAAD,CAAM,WAAN,CAAkB,8CAAlB,CAAiE,CAAC,CAAD,CAAG,EAAH,CAAM,EAAN,CAAjE,CAA2E,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,yBAAD,CAA5B,CAAD,CAA0D,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA1D,CAAwG,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAAxG,CAAsJ,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAAtJ,CAA3E,CAA9kgE,IAAo2gE,CAAC,KAAD,CAAO,IAAP,CAAY,sBAAZ;AAAmC,CAAC,CAAD,CAAG,CAAH,CAAnC,CAAyC,CAAzC,CAA2C,CAA3C,CAA6C,CAA7C,CAA+C,CAA/C,CAAiD,CAAjD,CAAmD,CAAnD,CAAqD,OAArD,CAAp2gE,IAAu6gE,CAAC,KAAD,CAAO,sBAAP,CAA8B,kCAA9B,CAAiE,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAjE,CAA2E,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,SAAD,CAA9B,CAA0C,KAA1C,CAAD,CAAkD,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,MAAD,CAA5B,CAAqC,KAArC,CAAlD,CAA8F,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,uBAAD,CAAvC,CAAiE,KAAjE,CAA9F,CAAsK,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,QAAD,CAA/C,CAA0D,OAA1D,CAAtK,CAA3E,CAAqT,GAArT,CAAyT,CAAzT,CAA2T,CAA3T,CAA6T,CAA7T,CAA+T,CAA/T,CAAiU,CAAjU,CAAmU,CAAnU,CAAqU,IAArU,CAAv6gE,IAAuvhE,CAAC,IAAD,CAAM,IAAN,CAAW,kCAAX,CAA8C,CAAC,CAAD,CAAG,CAAH,CAA9C,CAAoD,CAApD,CAAsD,CAAtD,CAAwD,CAAxD,CAA0D,CAA1D,CAA4D,CAA5D,CAA8D,CAA9D,CAAgE,IAAhE,CAAvvhE,IAAk0hE,CAAC,KAAD,CAAO,IAAP,CAAY,wCAAZ,CAAqD,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAArD,CAA6D,CAAC,CAAC,yBAAD;AAA2B,UAA3B,CAAsC,CAAC,IAAD,CAAtC,CAA6C,KAA7C,CAAD,CAAqD,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,aAAD,CAAe,iBAAf,CAAzC,CAA2E,KAA3E,CAArD,CAAuI,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,GAAD,CAA/C,CAAqD,KAArD,CAAvI,CAAmM,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAiD,KAAjD,CAAnM,CAA2P,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,OAAD,CAAlD,CAA4D,KAA5D,CAA3P,CAA7D,CAA4X,GAA5X,CAAl0hE,IAAwsiE,CAAC,KAAD,CAAO,IAAP,CAAY,yBAAZ,CAAsC,CAAC,CAAD,CAAtC,CAA0C,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,SAAD,CAA5B,CAAwC,OAAxC,CAAD,CAA1C,CAA6F,GAA7F,CAAxsiE,IAA+yiE,CAAC,KAAD,CAAO,IAAP,CAAY,yBAAZ,CAAsC,CAAC,CAAD,CAAG,EAAH,CAAtC,CAA6C,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,OAAD,CAAlD,CAAD;AAA8D,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAA9D,CAA7C,CAA+I,CAA/I,CAAiJ,CAAjJ,CAAmJ,eAAnJ,CAAmK,QAAnK,CAA/yiE,IAAi+iE,CAAC,KAAD,CAAO,IAAP,CAAY,uBAAZ,CAAoC,CAAC,CAAD,CAApC,CAAwC,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAD,CAA0D,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,OAAD,CAAlD,CAA1D,CAAxC,CAAj+iE,IAAuojE,CAAC,KAAD,CAAO,IAAP,CAAY,sDAAZ,CAAmE,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAnE,CAA6E,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,QAAD,CAA5B,CAAD,CAAyC,CAAC,UAAD,CAAY,IAAZ,CAAiB,CAAC,OAAD,CAAjB,CAAzC,CAAqE,CAAC,eAAD,CAAiB,OAAjB,CAAyB,CAAC,+BAAD,CAAzB,CAArE,CAAiI,CAAC,eAAD,CAAiB,OAAjB,CAAyB,CAAC,gBAAD,CAAzB,CAAjI,CAA8K,CAAC,0BAAD;AAA4B,UAA5B,CAAuC,CAAC,cAAD,CAAvC,CAA9K,CAAuO,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,kCAAD,CAA9B,CAAvO,CAA7E,CAAyX,GAAzX,CAAvojE,IAA0gkE,CAAC,KAAD,CAAO,IAAP,CAAY,4BAAZ,CAAyC,CAAC,CAAD,CAAG,CAAH,CAAzC,CAA+C,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAAD,CAAgD,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAhD,CAAuF,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAvF,CAA/C,CAA1gkE,IAA8rkE,CAAC,KAAD,CAAO,IAAP,CAAY,YAAZ,CAAyB,CAAC,CAAD,CAAzB,CAA6B,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAAD,CAA7B,CAAsF,GAAtF,CAA9rkE,IAA8xkE,CAAC,KAAD,CAAO,IAAP,CAAY,mBAAZ,CAAgC,CAAC,CAAD,CAAhC,CAAoC,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,MAAD,CAA5B,CAAD,CAApC,CAA9xkE,IAAg3kE,CAAC,KAAD,CAAO,IAAP,CAAY,qCAAZ;AAAkD,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAlD,CAA2D,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,MAAD,CAA5B,CAAD,CAAuC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAvC,CAA8E,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAA9E,CAA3D,CAAh3kE,IAAijlE,CAAC,GAAD,CAAK,KAAL,CAAW,qCAAX,CAAiD,CAAC,EAAD,CAAjD,CAAsD,CAAtD,CAAwD,GAAxD,CAA4D,CAA5D,CAA8D,cAA9D,CAA6E,OAA7E,CAAqF,CAArF,CAAuF,KAAvF,CAAjjlE,IAAoplE,CAAC,KAAD,CAAO,IAAP,CAAY,0BAAZ,CAAuC,CAAC,CAAD,CAAG,CAAH,CAAvC,CAA6C,CAAC,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,OAAD,CAAzC,CAAmD,KAAnD,CAAyD,CAAzD,CAAD,CAA6D,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAmD,CAAnD,CAA7D,CAA7C,CAAiK,GAAjK,CAApplE,IAA+zlE,CAAC,KAAD,CAAO,IAAP,CAAY,mCAAZ,CAAgD,CAAC,CAAD,CAAG,CAAH,CAAhD,CAAsD,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,QAAD,CAA5B,CAAD;AAAyC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAzC,CAAtD,CAA/zlE,IAAw8lE,CAAC,KAAD,CAAO,IAAP,CAAY,SAAZ,CAAsB,CAAC,CAAD,CAAtB,CAA0B,CAA1B,CAA4B,CAA5B,CAA8B,CAA9B,CAAgC,CAAhC,CAAkC,CAAlC,CAAoC,CAApC,CAAsC,GAAtC,CAAx8lE,IAAw/lE,CAAC,GAAD,CAAK,KAAL,CAAW,8BAAX,CAA0C,CAAC,EAAD,CAA1C,CAA+C,CAA/C,CAAiD,GAAjD,CAAqD,CAArD,CAAuD,oBAAvD,CAA4E,OAA5E,CAAoF,CAApF,CAAsF,KAAtF,CAAx/lE,IAA0lmE,CAAC,KAAD,CAAO,OAAP,CAAe,yBAAf,CAAyC,CAAC,CAAD,CAAzC,CAA6C,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,QAAD,CAAlD,CAAD,CAA7C,CAA6G,CAA7G,CAA+G,CAA/G,CAAiH,CAAjH,CAAmH,CAAnH,CAAqH,CAArH,CAAuH,CAAvH,CAAyH,CAAzH,CAA2H,IAA3H,CAA1lmE,IAAgumE,CAAC,KAAD,CAAO,IAAP,CAAY,aAAZ,CAA0B,CAAC,CAAD,CAA1B,CAA8B,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,OAAD,CAAlD,CAAD,CAA9B,CAAhumE,IAAm0mE,CAAC,IAAD,CAAM,SAAN,CAAgB,4CAAhB,CAA6D,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAQ,EAAR,CAA7D,CAAyE,CAAC,CAAC,uBAAD;AAAyB,UAAzB,CAAoC,CAAC,GAAD,CAApC,CAA0C,KAA1C,CAAD,CAAkD,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,QAAD,CAAzC,CAAoD,KAApD,CAAlD,CAA6G,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA7G,CAAzE,CAAqO,GAArO,CAAn0mE,IAAkjnE,CAAC,KAAD,CAAO,KAAP,CAAa,gBAAb,CAA8B,CAAC,CAAD,CAA9B,CAAkC,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,KAAD,CAAO,MAAP,CAApC,CAAD,CAAqD,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,cAAD,CAAvC,CAArD,CAA8G,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,QAAD,CAApC,CAA9G,CAA8J,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,UAAD,CAAvC,CAA9J,CAAlC,CAAsP,CAAtP,CAAwP,CAAxP,CAA0P,CAA1P,CAA4P,CAA5P,CAA8P,CAA9P,CAAgQ,CAAhQ,CAAkQ,CAAlQ,CAAoQ,MAApQ,CAAljnE,IAAm0nE,CAAC,KAAD,CAAO,IAAP,CAAY,gBAAZ,CAA6B,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAA7B,CAAn0nE,IAAg3nE,CAAC,KAAD,CAAO,IAAP,CAAY,mCAAZ,CAAgD,CAAC,CAAD;AAAG,CAAH,CAAhD,CAAsD,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,YAAD,CAA5B,CAAD,CAA6C,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAA7C,CAAtD,CAAh3nE,IAA6/nE,CAAC,KAAD,CAAO,KAAP,CAAa,aAAb,CAA2B,CAAC,CAAD,CAA3B,CAA+B,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,IAAD,CAAlD,CAAyD,QAAzD,CAAD,CAAoE,CAAC,+BAAD,CAAiC,aAAjC,CAA+C,CAAC,OAAD,CAA/C,CAAyD,QAAzD,CAApE,CAAuI,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAkC,MAAlC,CAAvI,CAA/B,CAAiN,GAAjN,CAAqN,CAArN,CAAuN,CAAvN,CAAyN,CAAzN,CAA2N,CAA3N,CAA6N,CAA7N,CAA+N,CAA/N,CAAiO,MAAjO,CAA7/nE,IAA2uoE,CAAC,KAAD,CAAO,IAAP,CAAY,gBAAZ,CAA6B,CAAC,CAAD,CAA7B,CAAiC,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,UAAD,CAAvC,CAAD,CAAjC,CAA3uoE,IAAy0oE,CAAC,KAAD,CAAO,IAAP,CAAY,mDAAZ,CAAgE,CAAC,CAAD,CAAG,CAAH,CAAhE,CAAsE,CAAC,CAAC,kBAAD;AAAoB,OAApB,CAA4B,CAAC,iCAAD,CAA5B,CAAD,CAAkE,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAlE,CAAqG,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAArG,CAAtE,CAAz0oE,IAAkipE,CAAC,IAAD,CAAM,IAAN,CAAW,gDAAX,CAA4D,CAAC,CAAD,CAAG,EAAH,CAAM,EAAN,CAAS,EAAT,CAA5D,CAAyE,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,iBAAD,CAAvC,CAA2D,KAA3D,CAAiE,CAAjE,CAAD,CAAqE,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,gBAAD,CAAkB,iBAAlB,CAAoC,kBAApC,CAAlD,CAA0G,KAA1G,CAAgH,CAAhH,CAArE,CAAwL,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,kBAAD,CAAlD,CAAuE,OAAvE,CAA+E,CAA/E,CAAxL,CAA0Q,CAAC,4BAAD,CAA8B,UAA9B;AAAyC,CAAC,IAAD,CAAzC,CAAgD,KAAhD,CAAsD,CAAtD,CAA1Q,CAAzE,CAA6Y,GAA7Y,CAAlipE,IAAy7pE,CAAC,GAAD,CAAK,KAAL,CAAW,0BAAX,CAAsC,CAAC,EAAD,CAAtC,CAA2C,CAA3C,CAA6C,GAA7C,CAAiD,CAAjD,CAAmD,qBAAnD,CAAyE,OAAzE,CAAiF,CAAjF,CAAmF,KAAnF,CAAz7pE,IAAwhqE,CAAC,KAAD,CAAO,IAAP,CAAY,wBAAZ,CAAqC,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAArC,CAA6C,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAD,CAAoC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,IAAD,CAA5B,CAApC,CAAwE,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAxE,CAA7C,CAAxhqE,IAAurqE,CAAC,KAAD,CAAO,kBAAP,CAA0B,8CAA1B,CAAyE,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,EAAP,CAAU,EAAV,CAAzE,CAAuF,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,KAAD,CAApC,CAA4C,KAA5C,CAAD,CAAoD,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,QAAD,CAAzC,CAAoD,KAApD,CAApD,CAA+G,CAAC,yBAAD,CAA2B,UAA3B;AAAsC,CAAC,uCAAD,CAAyC,8CAAzC,CAAtC,CAA+H,KAA/H,CAA/G,CAAqP,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAArP,CAA4S,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,GAAD,CAAzC,CAA+C,KAA/C,CAA5S,CAAvF,CAA0b,GAA1b,CAA8b,CAA9b,CAAgc,CAAhc,CAAkc,CAAlc,CAAoc,CAApc,CAAsc,CAAtc,CAAwc,CAAxc,CAA0c,CAA1c,CAA4c,GAA5c,CAAvrqE,IAA6orE,CAAC,KAAD,CAAO,SAAP,CAAiB,2BAAjB,CAA6C,CAAC,CAAD,CAA7C,CAAiD,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAAD,CAAwD,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAAxD,CAA+G,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAA/G,CAAkJ,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAAlJ,CAAjD,CAA2P,GAA3P,CAA7orE,IAAk5rE,CAAC,KAAD,CAAO,IAAP;AAAY,wBAAZ,CAAqC,CAAC,CAAD,CAAG,EAAH,CAArC,CAA4C,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,6DAAD,CAA+D,iFAA/D,CAAvC,CAAyL,KAAzL,CAAD,CAAiM,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,uFAAD,CAAyF,mGAAzF,CAA5B,CAA0N,KAA1N,CAAjM,CAAka,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,iBAAD,CAAvC;AAA2D,KAA3D,CAAla,CAAoe,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,MAAD,CAAzC,CAAkD,KAAlD,CAApe,CAA5C,CAA0kB,GAA1kB,CAA8kB,CAA9kB,CAAglB,CAAhlB,CAAklB,CAAllB,CAAolB,CAAplB,CAAslB,CAAtlB,CAAwlB,CAAxlB,CAA0lB,KAA1lB,CAAl5rE,IAAw/sE,CAAC,KAAD,CAAO,SAAP,CAAiB,oCAAjB,CAAsD,CAAC,CAAD,CAAtD,CAA0D,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,KAAD,CAAO,MAAP,CAA5B,CAA2C,KAA3C,CAAD,CAAmD,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,yBAAD,CAA5B,CAAwD,KAAxD,CAAnD,CAAkH,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,MAAD,CAA5B,CAAqC,KAArC,CAAlH,CAA1D,CAAyN,GAAzN,CAAx/sE,IAA2ttE,CAAC,GAAD,CAAK,KAAL,CAAW,qBAAX,CAAiC,CAAC,EAAD,CAAjC,CAAsC,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,KAAD,CAA5B,CAAoC,CAApC,CAAsC,CAAtC,CAAD,CAA0C,CAAC,0BAAD,CAA4B,YAA5B,CAAyC,CAAC,OAAD,CAAzC,CAAmD,CAAnD,CAAqD,CAArD,CAAuD,UAAvD,CAA1C,CAAtC,CAAoJ,GAApJ,CAAwJ,CAAxJ,CAA0J,CAA1J,CAA4J,CAA5J,CAA8J,CAA9J,CAAgK,CAAhK,CAAkK,CAAC,CAAC,uqBAAD,CAAD;AAA2qB,CAAC,EAAD,CAA3qB,CAAgrB,CAAC,sCAAD,CAAhrB,CAAytB,CAAC,gBAAD,CAAztB,CAA4uB,CAAC,yOAAD,CAA5uB,CAAlK,CAA3ttE,IAA41vE,CAAC,KAAD,CAAO,kBAAP,CAA0B,oDAA1B,CAA+E,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAQ,EAAR,CAA/E,CAA2F,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,UAAD,CAA5B,CAAyC,KAAzC,CAAD,CAAiD,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAjD,CAAqG,CAAC,kBAAD;AAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAArG,CAA4I,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAA5I,CAAgM,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAhM,CAA3F,CAAqV,GAArV,CAAyV,CAAzV,CAA2V,CAA3V,CAA6V,CAA7V,CAA+V,CAA/V,CAAiW,CAAjW,CAAmW,CAAnW,CAAqW,IAArW,CAA0W,QAA1W,CAA51vE,IAAqtwE,CAAC,KAAD,CAAO,KAAP,CAAa,2BAAb,CAAyC,CAAC,CAAD,CAAzC,CAA6C,CAAC,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,QAAD,CAAlD,CAA6D,MAA7D,CAAD,CAA7C,CAAoH,GAApH,CAAwH,CAAxH,CAA0H,CAA1H,CAA4H,CAA5H,CAA8H,CAA9H,CAAgI,CAAhI,CAAkI,CAAlI,CAAoI,MAApI,CAArtwE,IAAs2wE,CAAC,IAAD,CAAM,IAAN,CAAW,8EAAX,CAA0F,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,EAAT,CAAY,EAAZ,CAA1F,CAA0G,CAA1G,CAA4G,CAA5G,CAA8G,CAA9G,CAAgH,CAAhH,CAAkH,CAAlH,CAAoH,CAApH,CAAsH,OAAtH,CAAt2wE,IAA0+wE,CAAC,GAAD,CAAK,KAAL,CAAW,8BAAX,CAA0C,CAAC,EAAD,CAA1C,CAA+C,CAA/C,CAAiD,GAAjD,CAAqD,CAArD,CAAuD,kBAAvD;AAA0E,OAA1E,CAAkF,CAAlF,CAAoF,KAApF,CAA1+wE,IAA0kxE,CAAC,IAAD,CAAM,IAAN,CAAW,sCAAX,CAAkD,CAAC,EAAD,CAAlD,CAAuD,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,UAAD,CAA5B,CAAyC,KAAzC,CAAD,CAAvD,CAAyG,GAAzG,CAA1kxE,IAA6rxE,CAAC,GAAD,CAAK,KAAL,CAAW,8BAAX,CAA0C,CAAC,EAAD,CAA1C,CAA+C,CAA/C,CAAiD,GAAjD,CAAqD,CAArD,CAAuD,oBAAvD,CAA4E,OAA5E,CAAoF,CAApF,CAAsF,KAAtF,CAA7rxE,IAA+xxE,CAAC,GAAD,CAAK,KAAL,CAAW,6BAAX,CAAyC,CAAC,EAAD,CAAzC,CAA8C,CAA9C,CAAgD,GAAhD,CAAoD,CAApD,CAAsD,kBAAtD,CAAyE,OAAzE,CAAiF,CAAjF,CAAmF,KAAnF,CAA/xxE,IAA83xE,CAAC,IAAD,CAAM,IAAN,CAAW,kDAAX,CAA8D,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,EAAP,CAA9D,CAAyE,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,IAAD,CAA5B,CAAmC,KAAnC,CAAyC,CAAzC,CAAD,CAA6C,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,GAAD,CAA9B,CAAoC,CAApC,CAAsC,CAAtC,CAA7C,CAAsF,CAAC,kCAAD;AAAoC,aAApC,CAAkD,CAAC,MAAD,CAAlD,CAA2D,KAA3D,CAAiE,CAAjE,CAAtF,CAA0J,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,QAAD,CAAvC,CAAkD,KAAlD,CAAwD,CAAxD,CAA1J,CAAqN,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAiD,KAAjD,CAAuD,CAAvD,CAArN,CAA+Q,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAmD,CAAnD,CAA/Q,CAAzE,CAA+Y,GAA/Y,CAA93xE,IAAuxyE,CAAC,KAAD,CAAO,IAAP,CAAY,oCAAZ,CAAiD,CAAC,CAAD,CAAG,CAAH,CAAjD,CAAuD,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,QAAD,CAA5B,CAAD,CAAvD,CAAvxyE,IAA83yE,CAAC,KAAD,CAAO,IAAP,CAAY,oCAAZ,CAAiD,CAAC,CAAD,CAAG,CAAH,CAAjD,CAAuD,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAD,CAAmD,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,GAAD,CAAlD,CAAnD,CAAvD,CAA93yE,IAAwizE,CAAC,KAAD,CAAO,GAAP,CAAW,+CAAX;AAA2D,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,EAAP,CAA3D,CAAsE,CAAC,CAAC,UAAD,CAAY,IAAZ,CAAiB,CAAC,cAAD,CAAjB,CAAD,CAAoC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,MAAD,CAA9B,CAApC,CAA4E,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAA5E,CAAtE,CAAxizE,IAAouzE,CAAC,KAAD,CAAO,IAAP,CAAY,uCAAZ,CAAoD,CAAC,CAAD,CAAG,CAAH,CAApD,CAA0D,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,MAAD,CAA5B,CAAqC,KAArC,CAAD,CAA6C,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAiD,KAAjD,CAA7C,CAAqG,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAArG,CAA1D,CAAuN,GAAvN,CAApuzE,IAAq8zE,CAAC,KAAD,CAAO,IAAP,CAAY,8BAAZ,CAA2C,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAA3C,CAAmD,CAAC,CAAC,yBAAD,CAA2B,UAA3B,CAAsC,CAAC,0BAAD,CAAtC,CAAmE,KAAnE,CAAD,CAA2E,CAAC,0BAAD;AAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAA3E,CAAnD,CAAmL,GAAnL,CAAr8zE,IAAko0E,CAAC,KAAD,CAAO,IAAP,CAAY,wCAAZ,CAAqD,CAAC,CAAD,CAArD,CAAyD,CAAzD,CAA2D,GAA3D,CAA+D,CAA/D,CAAiE,CAAjE,CAAmE,CAAnE,CAAqE,CAArE,CAAuE,aAAvE,CAAlo0E,IAA6t0E,CAAC,IAAD,CAAM,IAAN,CAAW,wBAAX,CAAoC,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT,CAAW,EAAX,CAApC,CAAmD,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,QAAD,CAA9B,CAAyC,KAAzC,CAAD,CAAiD,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,QAAD,CAAzC,CAAoD,KAApD,CAAjD,CAA4G,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,KAAD,CAAvC,CAA+C,KAA/C,CAA5G,CAAkK,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAiD,KAAjD,CAAlK,CAA0N,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAA1N,CAAnD,CAAkU,GAAlU,CAA7t0E,IAAyi1E,CAAC,KAAD,CAAO,IAAP,CAAY,mCAAZ,CAAgD,CAAC,CAAD,CAAhD;AAAoD,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,MAAD,CAAvC,CAAgD,KAAhD,CAAD,CAAwD,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,MAAD,CAA5B,CAAqC,KAArC,CAAxD,CAApD,CAAyJ,GAAzJ,CAAzi1E,IAA4s1E,CAAC,KAAD,CAAO,IAAP,CAAY,uHAAZ,CAAoI,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT,CAAW,EAAX,CAApI,CAAmJ,CAAC,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,wFAAD,CAA9B,CAAyH,KAAzH,CAAD,CAAiI,CAAC,yBAAD,CAA2B,UAA3B,CAAsC,CAAC,MAAD,CAAtC,CAA+C,KAA/C,CAAjI,CAAuL,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,IAAD,CAA5B,CAAmC,KAAnC,CAAvL,CAAiO,CAAC,kBAAD;AAAoB,OAApB,CAA4B,CAAC,4CAAD,CAA8C,4EAA9C,CAA5B,CAAwJ,OAAxJ,CAAjO,CAAkY,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAA6C,KAA7C,CAAlY,CAAsb,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,8CAAD,CAAgD,+CAAhD,CAAzC,CAA0I,KAA1I,CAAtb,CAAukB,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,GAAD,CAA5B,CAAkC,KAAlC,CAAvkB,CAAgnB,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,2IAAD,CAA9B;AAA4K,KAA5K,CAAhnB,CAAmyB,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,iBAAD,CAAzC,CAA6D,KAA7D,CAAnyB,CAAu2B,CAAC,oBAAD,CAAsB,OAAtB,CAA8B,CAAC,YAAD,CAAc,UAAd,CAA9B,CAAwD,KAAxD,CAAv2B,CAAnJ,CAA0jC,GAA1jC,CAA5s1E,CAA5zF,eAAwl9E,KAAO,CAAC,KAAD,CAAO,CAAP,CAAS,uBAAT,CAAiC,CAAC,CAAD,CAAjC,CAAqC,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,KAAD,CAA5B,CAAD,CAArC,CAA4E,CAA5E,CAA8E,CAA9E,CAAgF,CAAhF,CAAkF,CAAlF,CAAoF,CAApF,CAAsF,CAAtF,CAAwF,CAAC,CAAD,CAAG,CAAH,CAAK,CAAC,uBAAD,CAAL,CAAxF,CAAP,KAAsI,CAAC,KAAD,CAAO,CAAP,CAAS,aAAT,CAAuB,CAAC,CAAD,CAAvB,CAA2B,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,OAAD,CAA5B,CAAD,CAA3B,CAAoE,CAApE,CAAsE,CAAtE,CAAwE,CAAxE,CAA0E,CAA1E,CAA4E,CAA5E,CAA8E,CAA9E,CAAgF,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT,CAAW,CAAX,CAAa,CAAb,CAAe,CAAf,CAAiB,CAAjB,CAAmB,CAAC,aAAD,CAAnB,CAAhF,CAAtI,KAAiQ,CAAC,KAAD,CAAO,CAAP,CAAS,uBAAT,CAAiC,CAAC,CAAD,CAAG,EAAH,CAAjC,CAAwC,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,QAAD,CAAvC,CAAD,CAAxC;AAA6F,CAA7F,CAA+F,CAA/F,CAAiG,CAAjG,CAAmG,CAAnG,CAAqG,CAArG,CAAuG,CAAvG,CAAyG,CAAC,CAAD,CAAG,CAAC,sCAAD,CAAH,CAAzG,CAAjQ,KAA8Z,CAAC,KAAD,CAAO,CAAP,CAAS,WAAT,CAAqB,CAAC,EAAD,CAArB,CAA0B,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,GAAD,CAAvC,CAAD,CAA1B,CAA0E,CAA1E,CAA4E,CAA5E,CAA8E,CAA9E,CAAgF,CAAhF,CAAkF,CAAlF,CAAoF,CAApF,CAAsF,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT,CAAW,CAAX,CAAa,CAAb,CAAe,CAAf,CAAiB,CAAC,WAAD,CAAjB,CAAtF,CAA9Z,KAA2hB,CAAC,KAAD,CAAO,CAAP,CAAS,gBAAT,CAA0B,CAAC,CAAD,CAA1B,CAA8B,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,UAAD,CAApC,CAAD,CAA9B,CAAkF,CAAlF,CAAoF,CAApF,CAAsF,CAAtF,CAAwF,CAAxF,CAA0F,CAA1F,CAA4F,CAA5F,CAA8F,CAAC,CAAD,CAAG,CAAC,gBAAD,CAAH,CAA9F,CAA3hB,KAAupB,CAAC,KAAD,CAAO,CAAP,CAAS,sEAAT,CAAgF,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,EAAP,CAAU,EAAV,CAAa,EAAb,CAAhF,CAAiG,CAAC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,QAAD,CAA5B,CAAD,CAAyC,CAAC,kBAAD,CAAoB,OAApB,CAA4B,CAAC,IAAD,CAA5B,CAAzC,CAA6E,CAAC,0BAAD;AAA4B,UAA5B,CAAuC,CAAC,SAAD,CAAvC,CAA7E,CAAiI,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,OAAD,CAAvC,CAAjI,CAAmL,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,IAAD,CAAzC,CAAnL,CAAoO,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,4BAAD,CAAvC,CAApO,CAA2S,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAA3S,CAA0V,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,QAAD,CAAzC,CAA1V,CAAjG,CAAif,CAAjf,CAAmf,CAAnf,CAAqf,CAArf,CAAuf,CAAvf,CAAyf,CAAzf,CAA2f,CAA3f,CAA6f,CAAC,CAAD,CAAG,CAAC,iEAAD,CAAmE,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,EAAP,CAAU,EAAV,CAAnE,CAAH,CAAqF,CAArF,CAAuF,CAAvF,CAAyF,CAAzF,CAA2F,CAA3F,CAA6F,CAA7F,CAA+F,CAA/F,CAAiG,CAAC,+KAAD,CAAjG,CAA7f,CAAvpB;IAA+6C,CAAC,KAAD,CAAO,CAAP,CAAS,0BAAT,CAAoC,CAAC,CAAD,CAAG,CAAH,CAAK,EAAL,CAAQ,EAAR,CAAW,EAAX,CAApC,CAAmD,CAAC,CAAC,4BAAD,CAA8B,UAA9B,CAAyC,CAAC,mCAAD,CAAzC,CAAD,CAAiF,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,KAAD,CAAvC,CAAjF,CAAiI,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,IAAD,CAAvC,CAAjI,CAAgL,CAAC,0BAAD,CAA4B,UAA5B,CAAuC,CAAC,QAAD,CAAvC,CAAhL,CAAmO,CAAC,kCAAD,CAAoC,aAApC,CAAkD,CAAC,OAAD,CAAlD,CAAnO,CAAnD,CAAoV,CAApV,CAAsV,CAAtV,CAAwV,CAAxV,CAA0V,CAA1V,CAA4V,CAA5V,CAA8V,CAA9V,CAAgW,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT,CAAW,CAAX,CAAa,CAAb,CAAe,CAAf,CAAiB,CAAC,oIAAD,CAAjB,CAAhW,CAA/6C;IAA+6D,CAAC,KAAD,CAAO,CAAP,CAAS,SAAT,CAAmB,CAAC,EAAD,CAAnB,CAAwB,CAAC,CAAC,0BAAD,CAA4B,UAA5B,CAAD,CAAxB,CAAkE,CAAlE,CAAoE,CAApE,CAAsE,CAAtE,CAAwE,CAAxE,CAA0E,CAA1E,CAA4E,CAA5E,CAA8E,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAP,CAAS,CAAT,CAAW,CAAX,CAAa,CAAC,SAAD,CAAb,CAA9E,CAA/6D,KAA8hE,CAAC,KAAD,CAAO,CAAP,CAAS,cAAT,CAAwB,CAAC,CAAD,CAAxB,CAA4B,CAAC,CAAC,uBAAD,CAAyB,UAAzB,CAAoC,CAAC,QAAD,CAApC,CAAD,CAA5B,CAA8E,CAA9E,CAAgF,CAAhF,CAAkF,CAAlF,CAAoF,CAApF,CAAsF,CAAtF,CAAwF,CAAxF,CAA0F,CAAC,CAAD,CAAG,CAAH,CAAK,CAAL,CAAO,CAAC,cAAD,CAAP,CAA1F,CAA9hE,CAAxl9E,ECEM4K,sBACnBA,EAAA,CAAAqD,CAAA,CAAkB,MAAAC,eAAAtD,6DAChBuD,CAAA,CAAAC,CAAA7N,CAAAA,IAAA,CAAA,IAAA,CADgB0N,CAChB,CAGAI,OAAAA,CAAAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAA4BzD,CAA5ByD,CAAAA,SAAAA,CACAF,EAAAG,CAAAA,IAAA,CAAYH,CAAAI,CAAAA,WAAZD,CAAAA,WALgBH,EAAA,qCADoBvM,QfsB3ByG,EAAiB,EAAAxG,CAAAA,MAAA,CAZ9B2M,kCAY8B,CAAA3M,CAAAA,MAAA,CAX9B4M,SAW8B,CAAA5M,CAAAA,MAAA,CAV9B6M,SAU8B,CAAA7M,CAAAA,MAAA,CATvB8M,iCASuB,CAAA9M,CAAAA,MAAA,CAR9B+M,kCAQ8B,CAAA/M,CAAAA,MAAA,CAN9BgN,qBAM8B;AtBbxBC,GAAN,QAKqBpN,qBACpBA,EAAA,CAAAjB,CAAA,CAAsB,CAAAsO,CAAAA,CAAA,IAAAA,CAAArN,CAAAqN,KAkblB,CAjbHC,OAkbMpN,MAAA,CAAN,2EAAM,KAaW,WAAI+L,CAAAA,CA/brBqB,CA+bqBrB,GAAJ,WAAIA,CAAAA,CA/brBqB,CAubDC,CAAAA,SAQsBtB,OAPf/L,MAAA,CAAA,qJAAAC,CAAAA,MAAA,CAOW,QAPyJqN,GAOrJvB,CAAAA,CA/brBqB,CA+bqBrB,CAPqJuB,CAAsB,wBAAtBA,CAAiDb,MAAAA,CAAAA,IAAAA,CAxb3NW,CAwb2NX,CAAAA,CAAAA,IAAAA,CAA3B,IAA2BA,CAAjDa,CAAAA,IAAAA,CAA2F,IAA3FA,CAY3JvB,CAAAA,CApcfqB,CAocerB,CAZ2JuB,CAA2F,IAA3FA,CAxb1KF,CAwbM,CAAN,GAAM,CAAA,MAvbNvO,CAAAA,SAAAA,CACAqB,EAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAHqB;MAMtBqN,QAAA,EAAe,OACPd,OAAAe,CAAAA,IAAA,CAAY,IAAA3O,CAAAA,QAAZwO,CAAAA,SAAA,CAAArI,CAAAA,MAAA,CAA4C,SAAAyI,EAAC,OAAA,QAAIA,CAAJ,CAA7C,CADO,mCAIfC,QAAA,CAAAC,CAAA,CAAgC,OACxB,KAAA9O,CAAAA,QAAAwO,CAAAA,SAAA,CAAPM,CAAO,CADwB,8BAIhCC,QAAA,EAAgB,IACX,EAAA,IAAAxN,CAAAA,EAAA,EAAW,IAAXC,CAAAA,EAAA,EAAsB,IAA1BC,CAAAA,EAAI,QAIG,KAAAzB,CAAAA,QAAA+O,CAAAA,eAA+B,IAAA/O,CAAAA,QAAtCgP,CAAAA,eALe,2BAQhBC,QAAA,CAAAjO,CAAA,CAAoB,OACnB+D,KAAAA,KAAO,IAAA8J,CAAAA,kBAAA,CAAA7N,CAAA,CADY,+BAIpBkO,QAAA,CAAAlJ,CAAA,CAA4B,IACvB,IAAAmJ,CAAAA,6BAAA,CAAJnJ,CAAI,QACH,CAAA,KAEG,IAAJ+I,CAAAA,aAAI,OACC,IAAAA,CAAAA,aAAA,EAAA,CAAJ/I,CAAI,QACH,CAAA,WAIKoJ;AAAe,IAAAC,CAAAA,mBAAA,EAAA,CAArBrJ,CAAqB,IACjBoJ,IAAgBA,CAAAA,CAAAA,QAApB,QAAiDA,CAAAA,CAAAA,CAAAA,QAChD,CAAA,CAZyB,2CAiB5BE,QAAA,CAAAtJ,CAAA,CAAwC,OACnC,KAAJ+I,CAAAA,aAAI,GACI,IAAAA,CAAAA,aAAA,EAAA,CAAA/I,CAAA,CAAA,CAAA,CAAA,CAAA,CAAP,CAAA,EAEO,IAAAmJ,CAAAA,6BAAA,CAAAnJ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAP,CAAA,CAJsC,wBASxChF,QAAA,CAAA8N,CAAA,CAAqB,OACb,KAAAS,CAAAA,mBAAA,CAAPT,CAAO,CADa,oCAIrBS,QAAA,CAAAT,CAAA,CAAA9I,CAAA,CAA8C,CAEzC8I,GAAeT,EAAAA,CAAAA,IAAAA,CAAnBS,CAAmBT,IAClBrI,CACA8I,CADA9I,CACA8I,CAAAA,CAAAA,CAAAA,SAEGA,GAAJ,QAAmBA,EAAuB,IACrC,CAAC,IAAAG,CAAAA,UAAA,CAALH,CAAK,OACE3N,MAAA,CAAA,mBAAAC,CAAAA,MAAA,CAAN0N,CAAM,CAAA,MAEPU,CAAAA,cAAqB,IAAAC,EAAA,CAAkB,IAAAZ,CAAAA,kBAAA,CAAlBC,CAAkB,CAAlB;AAArB,IAAqB,CAJoB,KAKnC,IAAA9I,CAAA,CAAiB,IACnB,CAAC,IAAAkJ,CAAAA,cAAA,CAALlJ,CAAK,OACE7E,MAAA,CAAA,wBAAAC,CAAAA,MAAA,CAAN4E,CAAM,CAAA,MAEPwJ,CAAAA,cAAqB,IAAAC,EAAA,CAAkB,IAAAC,CAAAA,wBAAA,CAAlB1J,CAAkB,CAAlB,CAArB,IAAqB,CAJE,CAAjB,SAMNwJ,CAAAA,cAAAzK,IAAAA,SAED,KAnB6C,8CAsB9CoK,QAAA,CAAAnJ,CAAA,CAA2C,IACpCoJ,EAAe,IAAAC,CAAAA,mBAAA,EAAA,CAArBrJ,CAAqB,QAWhBoJ,KAAAA,CAAAA,CAAAA,QAAJ,IAAiCA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,cAGjCA,CAfyC,6CAmB3CO,QAAA,CAAA3J,CAAA,CAA0C,IACnCoJ,EAAe,IAAAD,CAAAA,6BAAA,CAArBnJ,CAAqB,QAEboJ,EAAAA,CAAP,CAAOA,CAHiC,yCAO1CM,QAAA,CAAA1J,CAAA,CAAsC,KAC/B8I;AAAc,IAAAa,CAAAA,4BAAA,CAApB3J,CAAoB,KACpB8I,QACQ,KAAAD,CAAAA,kBAAA,CAAPC,CAAO,KAEJ,IAAJC,CAAAA,aAAI,OACG/O,EAAW,IAAA+O,CAAAA,aAAA,EAAA,CAAjB/I,CAAiB,QAEhBhG,YAQKoP,EAAe,IAAAC,CAAAA,mBAAA,EAAA,CAArBrJ,CAAqB,IACjBoJ,IAAgBA,CAAAA,CAAAA,QAApB,QAAiDA,CAAAA,CAAAA,CAAAA,QACzC,KAAApP,CAAAA,QAAAwO,CAAAA,SAAA,CAAP,KAAO,CAlB4B,mCAwBtCtN,QAAA,EAAqB,OACb,KAAAsO,CAAAA,aAAPxJ,CAAAA,WAAO,EADa,0BAKrBkB,QAAA,EAAY,OACJ,KAAAsI,CAAAA,aAAPtI,CAAAA,SAAO,EADI,iCAKZF,QAAA,EAAmB,OACX,KAAAwI,CAAAA,aAAPxI,CAAAA,gBAAO,EADW;MAKnBvB,QAAA,EAAwB,OAChB,KAAA+J,CAAAA,aAAP/J,CAAAA,qBAAO,EADgB,gCAKxBf,QAAA,EAAkB,OACV,KAAA8K,CAAAA,aAAP9K,CAAAA,eAAO,EADU,wBAKlB2C,QAAA,EAAU,OACF,KAAAmI,CAAAA,aAAPnI,CAAAA,OAAO,EADE,yCAKVW,QAAA,EAA2B,OACnB,KAAAwH,CAAAA,aAAPxH,CAAAA,wBAAO,EADmB,4CAK3BK,QAAA,EAA8B,OACtB,KAAAmH,CAAAA,aAAPnH,CAAAA,2BAAO,EADsB,8BAK9BgD,QAAA,EAAgB,OACR,KAAAmE,CAAAA,aAAPnE,CAAAA,aAAO,EADQ;sBAKhBvF,QAAA,EAAW,OACH,KAAA0J,CAAAA,aAAP1J,CAAAA,QAAO,EADG,qBAKXhF,QAAA,CAAA8O,CAAA,CAAW,OACH,KAAAJ,CAAAA,aAAA1O,CAAAA,IAAA,CAAP8O,CAAO,CADG,oBAKXtM,QAAA,EAAM,OACE,KAAAkM,CAAAA,aAAPlM,CAAAA,GAAO,EADF,oCAIN+L,QAAA,EAAsB,OACjB,KAAJ9N,CAAAA,GAAoB,IAAAvB,CAAAA,QAAP6P,CAAAA,gCACN,IAAA7P,CAAAA,QAAP8P,CAAAA,qBAFqB,kDAMtBC,QAAA,CAAA/J,CAAA,CAA+C,OACvC,KAAAuJ,CAAAA,mBAAA,CAAPvJ,CAAO,CADuC,yCAI/CwF,QAAA,EAA2B,OAC1BzG,KAAAA;AAAO,IAAAyK,CAAAA,aADmB,iBAKtBC,sBACLA,EAAA,CAAAzP,CAAA,CAAAgQ,CAAA,CAA4C,CAAA1B,CAAAA,CAAA,IAAAA,CAAAmB,CAAAnB,MAC3C0B,CAAAA,qBAAAA,MACAhQ,CAAAA,SAAAA,CACAqB,EAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAsB2O,CAAtB3O,CAAAA,QAAAA,CAH2C,+BAM5C2E,QAAA,EAAc,OACN,KAAAhG,CAAAA,QAAA,CAAP,CAAO,CADM,mDAUdiQ,QAAA,EAAqC,OAC7B,KAAAD,CAAAA,oBAAAN,CAAAA,wBAAA,CAAmD,IAA1D1J,CAAAA,WAA0D,EAAnD,CAD6B,0BAKrCkB,QAAA,EAAY,IACP3F,CAAA,IAAAA,CAAAA,IAAJC,CAAe,IAAfA,CAAAA,SACO,KAAAxB,CAAAA,QAAA,CAAP,CAAO,CAFI,iCAMZgH,QAAA,EAAmB,IACdzF,CAAA,IAAAA,CAAAA,IAAJC,CAAe,IAAfA,CAAAA,SACO,KAAAxB,CAAAA,QAAA,CAAP,EAAO,CAFW;mCAKnByF,QAAA,EAAwB,OACnB,KAAAlE,CAAAA,IAAW,IAAfC,CAAAA,GAA+B,IAAAxB,CAAAA,QAAA,CAAP,CAAO,EACxB,IAAAA,CAAAA,QAAA,CAAP,CAAO,CAFgB,gCAMxB0E,QAAA,EAAkB,IACjBnD,CAAI,IAAJA,CAAAA,SACO,KAAAvB,CAAAA,QAAA,CAAc,IAAAwB,CAAAA,EAAA,CAAA,CAAA,CAArB,CAAO,CAFU,4BAKlB0O,QAAA,CAAAlQ,CAAA,CAAsB,OACdA,EAAAA,CAAS,IAAAuB,CAAAA,EAAA,CAAA,CAAA,CAAc,IAAAC,CAAAA,EAAA,CAAA,CAAA,CAA9B,CAAOxB,CADc,wBAOtBqH,QAAA,EAAU,KAAAqG,EAAA,WAEFyC,CADS,IAAAD,CAAAA,WAAA,CAAiB,IAAjBlQ,CAAAA,QAAA,CACTmQ,EAD4C,IAAAD,CAAAA,WAAA,CAAiB,IAApDD,CAAAA,kCAAoD,EAAjB,CAC5CE,EADP,EACOA,EAAAA,GAAA,CAAY,SAAAvB,EAAC,OAAI,KAAAwB,EAAA,CAAAxB,CAAA,CAAJlB,CAAI,CAAJ,CAAb,CAFE,+BAKVnF,QAAA,EAAiB,OACT,KAAAvI,CAAAA,QAAA,CAAc,IAAAuB,CAAAA,EAAA;AAAA,CAAA,CAAc,IAAAC,CAAAA,EAAA,CAAA,CAAA,CAAnC,CAAO,CADS,iDAIjB6O,QAAA,CAAArQ,CAAA,CAA2C,OACnCA,EAAAA,CAAS,IAAAuB,CAAAA,EAAA,CAAA,CAAA,CAAc,IAAAC,CAAAA,EAAA,CAAA,CAAA,CAA9B,CAAOxB,CADmC,6CAO3CsQ,QAAA,EAA+B,OACvB,KAAAD,CAAAA,gCAAA,CAAsC,IAAtCrQ,CAAAA,QAAA,GAAwD,IAAAqQ,CAAAA,gCAAA,CAAsC,IAArGJ,CAAAA,kCAAqG,EAAtC,CADjC,0CAI/BM,QAAA,EAA4B,OACpB,KAAAvQ,CAAAA,QAAA,CAAc,IAAAuB,CAAAA,EAAA,CAAA,CAAA,CAAc,IAAAC,CAAAA,EAAA,CAAA,CAAA,CAAnC,CAAO,CADoB,yCAI5BwG,QAAA,EAA2B,OAGnB,KAAAuI,CAAAA,yBAAA,IAAoC,IAA3ChI,CAAAA,cAA2C,EAHjB;yCAM3BF,QAAA,EAA8B,OACtB,KAAArI,CAAAA,QAAA,CAAc,IAAAuB,CAAAA,EAAA,CAAA,CAAA,CAAc,IAAAC,CAAAA,EAAA,CAAA,CAAA,CAAnC,CAAO,CADsB,2DAI9BgP,QAAA,EAA6C,OACrC,CAAC,CAAC,IAAAxQ,CAAAA,QAAA,CAAc,IAAAuB,CAAAA,EAAA,CAAA,CAAA,CAAc,IAAAC,CAAAA,EAAA,CAAA,CAAA,CAArC,CAAS,CADmC,uEAQ7CiP,QAAA,EAAyD,OACjD,KAAAD,CAAAA,0CAAA,CAAgD,IAAhDxQ,CAAAA,QAAA,GACN,IAAAwQ,CAAAA,0CAAA,CAAgD,IADjDP,CAAAA,kCACiD,EAAhD,CAFuD,8BAKzD5E,QAAA,EAAgB,OACR,KAAArL,CAAAA,QAAA,CAAc,IAAAuB,CAAAA,EAAA;AAAA,CAAA,CAAc,IAAAC,CAAAA,EAAA,CAAA,CAAA,CAAnC,EAAO,CADQ,sBAIhBX,QAAA,EAAQ,OACA,KAAAb,CAAAA,QAAA,CAAc,IAAAuB,CAAAA,EAAA,CAAA,CAAA,CAAc,IAAAC,CAAAA,EAAA,CAAA,EAAA,CAAnC,EAAO,CADA,yBAIRsE,QAAA,EAAW,OAGN,KAAAjF,CAAAA,KAAA,IAAJ,IAAoB,IAAAA,CAAAA,KAAA,EAAAwC,CAAAA,OACnB,CAAA,EAIM,CAAC,CAAC,IAATxC,CAAAA,KAAS,EARC,qBAWXC,QAAA,CAAA4P,CAAA,CAAW,IACN,IAAA5K,CAAAA,QAAA,IAAmBlF,CAAAA,CAAQ,IAADC,CAAAA,KAAC,EAARD,CAAvB8P,CAAuB9P,QACf,KAAA+P,EAAA,CAAS/P,CAAAA,CAAQ,IAADC,CAAAA,KAAC,EAARD,CAAT8P,CAAS9P,CAAT,CAAP,IAAO,CAFE,oBAMX0C,QAAA,EAAM,OACD,KAAA/B,CAAAA,IAAW,IAAfC,CAAAA,GA9UFoP,SA+US,IAAA5Q,CAAAA,QAAA,CAAA,EAAA,GA/UT4Q,QA6UO,iBAMDR,sBACLA,EAAA,CAAA9J,CAAA,CAAAtG,CAAA,CAA8B,CAAAsO,CAAAA,CAAA,IAAAA,CAAA8B,CAAA9B,MAC7BuC,CAAAA,QAAAvK,MACAtG,CAAAA,SAAAA,CAF6B,2BAK9B4F,QAAA,EAAU,OACF,KAAAiL,CAAAA,OAAA,CAAP,CAAO,CADE;oBAIVvK,QAAA,EAAS,OACD,KAAAuK,CAAAA,OAAA,CAAP,CAAO,CADC,sCAITC,QAAA,EAAwB,OAChB,KAAAD,CAAAA,OAAA,CAAA,CAAA,GAAP,EADuB,6CAIxBP,QAAA,EAA+B,OACvB,KAAAO,CAAAA,OAAA,CAAA,CAAA,GAAmB,IAAA7Q,CAAAA,QAA1BsQ,CAAAA,4BAA0B,EADI,uEAI/BG,QAAA,EAAyD,OACjD,CAAC,CAAC,IAAAI,CAAAA,OAAA,CAAF,CAAE,GAAmB,IAAA7Q,CAAAA,QAA5ByQ,CAAAA,sDAA4B,EAD4B,wEAIzDM,QAAA,EAA0D,OAMlD,KAAAC,CAAAA,kBAAA;AAA6B,CAAC,IAArCP,CAAAA,sDAAqC,EANoB,mCAU1DO,QAAA,EAAqB,OACb,KAAAV,CAAAA,4BAAA,EAAA,GAELW,EAAAA,CAAAA,IAAAA,CAAqC,IAFhCX,CAAAA,4BAEgC,EAArCW,CAFK,CAAA,CAAA,CAAA,CAAP,CAAA,CADoB,oCAYrBvJ,QAAA,EAAsB,OACd,KAAAmJ,CAAAA,OAAA,CAAA,CAAA,GAAmB,IAA1BvK,CAAAA,MAA0B,EADL,iBAUjB2K,GAAN,cAEMN,sBACLA,EAAA,CAAA7P,CAAA,CAAAd,CAAA,CAA4B,CAAAsO,CAAAA,CAAA,IAAAA,CAAAqC,CAAArC,MAC3BxN,CAAAA,KAAAA,MACAd,CAAAA,SAAAA,CAF2B,2BAK5B4F,QAAA,EAAU,OACL,KAAA5F,CAAAA,QAAJuB,CAAAA,GAA6B,IAAPT,CAAAA,KACf,IAAAA,CAAAA,IAAA,CAAP,CAAO,CAFE,gCAKV4D,QAAA,EAAkB,IACjBnD,CAAI,IAAAvB,CAAAA,QAAJuB,CAAAA,SACO,KAAAT,CAAAA,IAAA,CAAA,CAAA;AAAgB,IAAAd,CAAAA,QAAvB0E,CAAAA,eAAuB,EAFN,iBC5ZbzC,EAA4BA,QAAA,CAAAiP,CAAA,CAAA,OAAA,IAAA9P,CAAAA,MAAA,CqBE3B+P,4CrBF2B,CAAA,MAAA,CAAA/P,CAAAA,MAAA,CAAA8P,CAAA,CAAA,IAAA,CAAA,E2BgD5B5E,GAAmC,IAAAlH,MAAA,CACxC,qBADwC,CACxCwC,CADwC,CACxC,uDADwC,CAAzC,GAAyC,EAU5BwJ,GA7BZ,oBA6BYA,CA7BZxJ,CA6BYwJ,CA7BZ,sDA6BYA,CA7BZxJ,CA6BYwJ,CNxDND,iDMwDMC,CAGJvP,CAAAA,EAHIuP,CAAN,KAOD/E,GAA6B,IAAAjH,MAAA,CAElC,qDAFkC,CAElCgM,EAFkC,CAAA,GAAA,CAAnC,GAAmC,E1BvE7BlO,EAAe,IAAAkC,MAAA,CAAW,KAAX,CAAmBvD,CAAAA,EAAnB,CAAA,IAAA,CAArB,GAAqB;AEERoC,GAAS,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,EKHhB0B,GAA6B,oFAAA,CAAA,KAAA,CAAA,GAAA;AMGtB0L,GAAN,SDKDpK,GAAN,yCFAMT,GAAkB,CACvBG,gBAAiBA,QAAA,CAAAC,CAAA,CAAA0K,CAAA,CAAAtR,CAAA,CAAA,OAAA,EAAAoB,CAAAA,MAAA,CAAAwF,CAAA,CAAAxF,CAAAA,MAAA,CAA+DpB,CAA/DsD,CAAAA,GAA+DtD,EAA/D,CAAAoB,CAAAA,MAAA,CAAAkQ,CAAA,CAAA,CADM,E0BDH1F,sBAOpBA,EAAA,CAAA2F,CAAA,CAAAhN,CAAA,CAAAvE,CAAA,CAAmE,MAAAyN,eAAA7B,gEAC9D,CAAJ2F,OACO,KAAAtE,SAAA,CAAN,8CAAM,KAEH,CAAJ1I,OACO,KAAA0I,SAAA,CAAN,6BAAM,KAEH,CAAJjN,OACO,KAAAiN,SAAA,CAAN,uBAAM,MA4FFjN,EAAW,IAAAiB,CAAA,CA1FhBjB,CA0FgB,KANe,YAAAmF,CAAAA,IAAA,CApFwCoM,CAoFxC,EASgB,CAC/CvQ,IAAAA,EA9FuEuQ,CA+FvEvR,EAAAA,CAAAA,mBAAAA,CAAAA,CAAAA,CACAkB;CAAAA,CAAqBlB,CAArBkB,CAAAA,kBAAqBlB,EAH0B,KAzF/CgB,CAAAA,QAuGMA,MAtGNE,CAAAA,mBAwGAA,MAvGAqD,CAAAA,eAAAA,MACAvB,CAAAA,OAAc,IAAM,IAAN9B,CAAAA,mBAAgC,IAA9CqD,CAAAA,mBACAvE,CAAAA,SAAAA,CAlBkE,2BAqBnEwR,QAAA,CAAAlO,CAAA,CAAY,KACXA,CAAAA,IAAAA,CADW,qCAIZmO,QAAA,EAAuB,OAClB,KAAJzQ,CAAAA,QACQ,CAAC,IAARA,CAAAA,OAAO,EAED+E,EAAAA,CACN,IADmC7E,CAAAA,kBAA7B6E,CAEN,IAFmCxB,CAAAA,cAA7BwB,CAGN,IAHD/F,CAAAA,QAAO+F,CAJe,2BAWvB2L,QAAA,EAAa,C/BrC0D,CAAA,CAAA,C+BsCxC,IAAA,EAAA,CAAElQ,GAAI,CAAA,CAAN,CAA9BxB,KAAAA,EAA4CA,IAA5CA,CAAAA,Q/BpCD+E,KAAAA,KAAIQ,IACHA,EAAAA,GAGDvF,EAAAA,CAAW,IAAAiB,CAAA,CAAXjB,CAAW,KAEPuF,CAAJ/D,CAAAA,GAAgB,IACX,C+B6BmB8D,I/B7BvBpE,CAAAA,wBACOC,MAAA,CAAN,oCAAM;AAEPnB,CAAAA,CAAAA,mBAAAA,C+B0BuBsF,I/B1BvBtF,CAAAA,kBAAAA,CAJe,KAKT,IACF,C+BwBmBsF,I/BxBvBE,CAAAA,MAAkB,GACjB,CAAA,SADiB,I+BwBKF,I/BrBvBtE,CAAAA,QAAmB,IACd,CAAChB,CAAAA,CAAAA,UAAAA,C+BoBiBsF,I/BpBtBtE,CAAAA,OAAKhB,OACEmB,MAAA,CAAA,mBAAAC,CAAAA,MAAA,C+BmBekE,I/BnBrBtE,CAAAA,OAAM,CAAA,EAEPhB,CAAAA,CAAAA,OAAAA,C+BiBsBsF,I/BjBtBtF,CAAAA,OAAAA,CAJkB,KAKZ,IACF,C+BekBsF,I/BftBpE,CAAAA,wBACOC,MAAA,CAAN,oCAAM,EAEPnB,CAAAA,CAAAA,mBAAAA,C+BYsBsF,I/BZtBtF,CAAAA,kBAAAA,CAJM,CATD,IAkBHA,CAAJ0E,CAAAA,eAAI1E,KACI8E,CAAAA,C+BMgBQ,I/BNCA,CAAAA,KAAjBR,E+BMgBQ,I/BNAf,CAAAA,cAAhBO,CAAP9E,CAAO8E,U+BMgBQ,I/BEnBA,CAAAA,oBAA4BtF,CAAAA,CAAAA,0BAAAA,C+BFTsF,I/BEvBpE,CAAAA,kBAAgClB,IAG/B,CAAA,YAEMmB,MAAA,CAAN,gGAAM;AA7C+D,O+BsC/D2D,EADK,wBAIb6M,QAAA,EAAU,OACF9L,GAAAA,CAAa,IAAbA,CAAoB,CAAErE,GAAI,CAAA,CAAN,CAApBqE,CAAkC,IAAzC7F,CAAAA,QAAO6F,CADE,gCAIV+L,QAAA,EAAkB,OAEV5R,CADUA,IAAAiB,CAAAjB,CAAa,IAA9BA,CAAAA,QAAiBA,CACVA,EAAAA,0BAAAA,CAAoC,IAA3CkB,CAAAA,kBAAOlB,CAFU,wBAKlB6R,QAAA,CAAAlG,CAAA,CAAqB,OACb,KAAA3I,CAAAA,SAAgB2I,CAAhB3I,CAAAA,QAAsC,IAAAM,CAAAA,MAAaqI,CAA1DrI,CAAAA,GADoB,wBAmBrB1C,QAAA,EAAU,OACFyE,EAAAA,CAAa,IAAbA,CAAoB,CAAE7D,GAAI,CAAA,CAAN,CAApB6D,CAAkC,IAAzCrF,CAAAA,QAAOqF,CADE,uBAIViB,QAAA,CAAAuK,CAAA,CAAAtL,CAAA,CAAwB,OAChBc,GAAAA,CAAY,IAAZA,CAAYwK,CAAZxK,CAGNd,CAAAA,CAAOgB,EAAAA,CAAAA,EAAAA,CAAA,EAAAA,CAAAhB,CAAAgB,CAAAA,CAAA,EAAAA,CAAA,CAAiB/E,GAAI,CAAA,CAArB,CAAA+E,CAAPhB,CAAqC,CAAE/D,GAAI,CAAA,CAAN,CAH/B6E,CAIN,IAJDrG,CAAAA,QAAOqG,CADgB,+BASxByL,QAAA,CAAAvM,CAAA,CAAwB,OAChB,KAAAe,CAAAA,MAAA,CAAA,UAAA;AAAPf,CAAO,CADgB,oCAIxBwM,QAAA,CAAAxM,CAAA,CAA6B,OACrB,KAAAe,CAAAA,MAAA,CAAA,eAAA,CAAPf,CAAO,CADqB,uBAI7ByM,QAAA,CAAAzM,CAAA,CAAgB,OACR,KAAAe,CAAAA,MAAA,CAAA,SAAA,CAAPf,CAAO,CADQ,iBlBvGXsD,GAA0B,iDI6B1BmB,GAAwC,0KAiBxCC,GAA8B;AChB9BiC,GAA6B,sDAK7BE,GAAiC,oDcZnC6F,CAAAA,UACFC,CAAI1O,CAAAA,OAHmB2O,QAKvBC,QAAA,CACEtD,CADF,CAEEuD,CAFF,CAGEC,CAHF,CAG2B,UADzBD,IAAAA,EAAkB,CAAA,YAClBC,IAAAA,EAAuB,UAUhB,KAAKnN,CAAAA,IAAL,CAlBcgN,OAkBd,CAPmB,QAAxBI,GAAA,MAAOD,EAAPC,EAAoCD,CAApCC,CACID,CADJC,CAEIzD,CAAA,mDAAA,CACoDA,CADpD,CAEA,uCAGC,CAAoC,SAAC/K,EAAiB,IACvD,KACI4H,EAAcc,EAAA,CAA0B1I,CAA1B,CAAiC+K,CAAjC,QAEfnD,EAAY+F,CAAAA,UAAZ,GAODW,GAAUvD,EACLzB,EAAA,CAAuBtJ,CAAvB,CAA8B+K,CAA9B,EAGFnD,CAAYgG,CAAAA,OAAZ,GAVE,CAAA,CAJP,CAeF,OAAA,CAAM,OACC,CAAA,CADD,CAhBmD,CAAtD,CAVkB;"}