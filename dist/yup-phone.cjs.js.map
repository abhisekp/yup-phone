{"version":3,"file":"yup-phone.cjs.js","sources":["../src/yup-phone.ts"],"sourcesContent":["import * as Yup from \"yup\";\nimport {\n  isValidNumberForRegion,\n  CountryCode,\n  parsePhoneNumberWithError,\n} from \"libphonenumber-js\";\n\ndeclare module \"yup\" {\n  export interface StringSchema {\n    /**\n     * Check for phone number validity.\n     *\n     * @param {CountryCode} [countryCode] The country code to check against.\n     * @param {Boolean} [strict=false] How strictly should it check.\n     * @param {String} [errorMessage=DEFAULT_MESSAGE] The error message to return if the validation fails.\n     */\n    phone(\n      countryCode?: CountryCode,\n      strict?: boolean,\n      errorMessage?: string\n    ): StringSchema;\n  }\n}\n\nconst YUP_PHONE_METHOD = \"phone\";\n\nYup.addMethod(\n  Yup.string,\n  YUP_PHONE_METHOD,\n  function yupPhone(\n    countryCode?: CountryCode,\n    strict: boolean = false,\n    errorMessage: string = \"\"\n  ) {\n    const errMsg =\n      typeof errorMessage === \"string\" && errorMessage\n        ? errorMessage\n        : countryCode\n        ? `\\${path} must be a valid phone number for region ${countryCode}`\n        : \"${path} must be a valid phone number.\";\n\n    // @ts-ignore\n    return this.test(YUP_PHONE_METHOD, errMsg, (value: string) => {\n      try {\n        const phoneNumber = parsePhoneNumberWithError(value, countryCode);\n\n        if (!phoneNumber.isPossible()) {\n          return false;\n        }\n\n        /* check if the countryCode provided should be used as\n          default country code or strictly followed\n        */\n        if (strict && countryCode) {\n          return isValidNumberForRegion(value, countryCode);\n        }\n\n        return phoneNumber.isValid();\n      } catch {\n        return false;\n      }\n    });\n  }\n);\n"],"names":["YUP_PHONE_METHOD","Yup","addMethod","string","yupPhone","countryCode","strict","errorMessage","test","errMsg","value","phoneNumber","parsePhoneNumberWithError","isPossible","isValidNumberForRegion","isValid"],"mappings":"4aAwBMA,iBAAmB,OAEzBC;cAAIC,CAAAA,SAAJD,CACEA,cAAIE,CAAAA,MADNF,CAEED,gBAFFC,CAGEG,QAAA,CACEC,CADF,CAEEC,CAFF,CAGEC,CAHF,CAG2B,UADzBD,IAAAA,EAAkB,CAAA,YAClBC,IAAAA,EAAuB,UAUhB,KAAKC,CAAAA,IAAL,CAAUR,gBAAV,CAPmB,QAAxBS,GAAA,MAAOF,EAAPE,EAAoCF,CAApCE,CACIF,CADJE,CAEIJ,CAAA,mDAAA,CACoDA,CADpD,CAEA,uCAGC,CAAoC,SAACK,EAAiB,IACvD,KACIC,EAAcC,0CAAAA,CAA0BF,CAA1BE,CAAiCP,CAAjCO,QAEfD,EAAYE,CAAAA,UAAZ,GAODP,GAAUD,EACLS,uCAAAA,CAAuBJ,CAAvBI,CAA8BT,CAA9BS,EAGFH,CAAYI,CAAAA,OAAZ,GAVE,CAAA,CAJP,CAeF,OAAA,CAAM,OACC,CAAA,CADD,CAhBmD,CAAtD,CAVkB,CAN7Bd;"}