{"version":3,"file":"yup-phone.umd.js","sources":["../node_modules/libphonenumber-js/metadata.min.json.js","../node_modules/libphonenumber-js/min/exports/withMetadataArgument.js","../node_modules/libphonenumber-js/es6/ParseError.js","../node_modules/libphonenumber-js/es6/constants.js","../node_modules/libphonenumber-js/es6/tools/semver-compare.js","../node_modules/libphonenumber-js/es6/metadata.js","../node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js","../node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js","../node_modules/libphonenumber-js/es6/helpers/parseDigits.js","../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/mergeArrays.js","../node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js","../node_modules/libphonenumber-js/es6/isPossible.js","../node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js","../node_modules/libphonenumber-js/es6/helpers/getNumberType.js","../node_modules/libphonenumber-js/es6/isValid.js","../node_modules/libphonenumber-js/es6/helpers/getPossibleCountriesForNumber.js","../node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js","../node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js","../node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js","../node_modules/libphonenumber-js/es6/helpers/RFC3966.js","../node_modules/libphonenumber-js/es6/format.js","../node_modules/libphonenumber-js/es6/PhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js","../node_modules/libphonenumber-js/es6/helpers/getCountryByNationalNumber.js","../node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js","../node_modules/libphonenumber-js/es6/helpers/extractPhoneContext.js","../node_modules/libphonenumber-js/es6/helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js","../node_modules/libphonenumber-js/es6/parse.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberWithError_.js","../node_modules/libphonenumber-js/es6/normalizeArguments.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberWithError.js","../node_modules/libphonenumber-js/min/exports/parsePhoneNumberWithError.js","../node_modules/libphonenumber-js/es6/legacy/isValidNumberForRegion_.js","../node_modules/libphonenumber-js/es6/legacy/isValidNumberForRegion.js","../node_modules/libphonenumber-js/index.es6.exports/isValidNumberForRegion.js","../src/yup-phone.ts"],"sourcesContent":["// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":4,\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"880\":[\"BD\"],\"886\":[\"TW\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[135-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[135-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\"],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([457]\\\\d{6})$|1\",\"268$1\",0,\"268\"],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2457]\\\\d{6})$|1\",\"264$1\",0,\"264\"],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\"],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\"],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]]],\"AR\":[\"54\",\"00\",\"(?:11|[89]\\\\d\\\\d)\\\\d{8}|[2368]\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\"],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"([267]\\\\d{6})$|1\",\"684$1\",0,\"684\"],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7}(?:\\\\d(?:\\\\d{2})?)?|8[0-24-9]\\\\d{7})|[2-478]\\\\d{8}|1\\\\d{4,7}\",[5,6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|4\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"(183[12])|0\",0,0,0,[[\"(?:(?:2(?:[0-26-9]\\\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\\\d|2[0-8]))\\\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\\\d)\\\\d{3}|9(?:[02-9]\\\\d{3}|1(?:(?:[0-58]\\\\d|6[0135-9])\\\\d|7(?:0[0-24-9]|[1-9]\\\\d)|9(?:[0-46-9]\\\\d|5[0-79])))))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"163\\\\d{2,6}\",[5,6,7,8,9]],[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",0,\"00\"],\"AZ\":[\"994\",\"00\",\"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[28]|2|365|46\",\"1[28]|2|365[45]|46\",\"1[28]|2|365(?:4|5[02])|46\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[13-9]\"],\"0$1\"]],\"0\"],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\"],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"246$1\",0,\"246\"],\"BD\":[\"880\",\"00\",\"[1-469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-79]\\\\d{8}|[2-9]\\\\d{7}|[3-9]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-8]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]|22\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\"],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\"],\"BF\":[\"226\",\"00\",\"[025-7]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[025-7]\"]]]],\"BG\":[\"359\",\"00\",\"00800\\\\d{7}|[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9,12],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[047]\"]]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]]],\"BJ\":[\"229\",\"00\",\"[24-689]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-689]\"]]]],\"BL\":[\"590\",\"00\",\"590\\\\d{6}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:395|76[018])\\\\d|475[0-2])\\\\d{4}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"441$1\",0,\"441\"],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"(?:[2-467]\\\\d\\\\d|8001)\\\\d{5}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[23]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\"],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\"],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"(?:[1-46-9]\\\\d\\\\d|5(?:[0-46-9]\\\\d|5[0-46-9]))\\\\d{8}|[1-9]\\\\d{9}|[3589]\\\\d{8}|[34]\\\\d{7}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37)\",\"4(?:02|37)0|[34]00\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\"],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([3-8]\\\\d{6})$|1\",\"242$1\",0,\"242\"],\"BT\":[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]]],\"BW\":[\"267\",\"00\",\"(?:0800|(?:[37]|800)\\\\d)\\\\d{6}|(?:[2-6]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-6]|3[15-79]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,0,\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]]],\"CA\":[\"1\",\"011\",\"(?:[2-8]\\\\d|90)\\\\d{8}|3\\\\d{6}\",[7,10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|54|6[578]|82)|4(?:03|1[68]|[26]8|3[178]|50|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|[18]3|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\",[10]],[\"\",[10]],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\",[10]],[\"900[2-9]\\\\d{6}\",[10]],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|(?:5(?:00|2[125-9]|33|44|66|77|88)|622)[2-9]\\\\d{6}\",[10]],0,[\"310\\\\d{4}\",[7]],0,[\"600[2-9]\\\\d{6}\",[10]]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CD\":[\"243\",\"00\",\"[189]\\\\d{8}|[1-68]\\\\d{6}\",[7,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\"],\"CI\":[\"225\",\"00\",\"[02]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d)(\\\\d{5})\",\"$1 $2 $3 $4\",[\"2\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]]],\"CK\":[\"682\",\"00\",\"[2-578]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"219\",\"2196\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[1-36]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]]],\"CM\":[\"237\",\"00\",\"[26]\\\\d{8}|88\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]|88\"]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79)\\\\d\\\\d00\",\"1[127]\\\\d{8,9}|2\\\\d{9}(?:\\\\d{2})?|[12]\\\\d{6,7}|86\\\\d{6}|(?:1[03-689]\\\\d|6)\\\\d{7,9}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{6,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]\",\"(?:10|2[0-57-9])(?:10|9[56])\",\"10(?:10|9[56])|2[0-57-9](?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"(1(?:[12]\\\\d|79)\\\\d\\\\d)|0\",0,0,0,0,\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:60\\\\d\\\\d|9101)\\\\d{6}|(?:1\\\\d|3)\\\\d{9}\",[10,11],[[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"6\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3[0-357]|91\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0(4(?:[14]4|56)|[579])?\"],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|(?:[24-8]\\\\d{3}|3005)\\\\d{4}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],\"CU\":[\"53\",\"119\",\"[27]\\\\d{6,7}|[34]\\\\d{5,7}|(?:5|8\\\\d\\\\d)\\\\d{7}\",[6,7,8,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\"],\"CV\":[\"238\",\"0\",\"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\"],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"96\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[34]0|69|8\\\\d)\\\\d\\\\d?|49(?:37|49|60|7[089]|9\\\\d)\\\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\\\d{1,8}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}|49(?:[015]\\\\d|2[13]|31|[46][1-8])\\\\d{1,9}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[0568]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\"],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"767$1\",0,\"767\"],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8001|8[024]9\"],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\"],\"EC\":[\"593\",\"00\",\"1\\\\d{9,10}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-49])\",\"[45]|8(?:00[1-9]|[1-49])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[189]\"],\"0$1\"]],\"0\"],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\"],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\"],\"ES\":[\"34\",\"00\",\"[5-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-579]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-579]\"],\"0$1\"]],\"0\"],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[12]00|[368]|70[07-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[1245]|7[135]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",0,\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,0,\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5]],\"FM\":[\"691\",\"00\",\"(?:[39]\\\\d\\\\d|820)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[389]\"]]]],\"FO\":[\"298\",\"00\",\"[2-9]\\\\d{5}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\"],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\"],\"GA\":[\"241\",\"00\",\"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"]],0,0,\"0(11\\\\d{6}|60\\\\d{6}|61\\\\d{6}|6[256]\\\\d{6}|7[467]\\\\d{6})\",\"$1\"],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[02-9])\",\"[25]|7(?:0|6(?:[03-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1(?:3(?:[0-58]\\\\d\\\\d|73[0235])|4(?:[0-5]\\\\d\\\\d|69[7-9]|70[0-579])|(?:(?:5[0-26-9]|[78][0-49])\\\\d|6(?:[0-4]\\\\d|50))\\\\d)|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d\\\\d|1(?:[0-7]\\\\d\\\\d|8(?:[02]\\\\d|1[0-46-9])))|(?:3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"473$1\",0,\"473\"],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\"],\"GF\":[\"594\",\"00\",\"[56]94\\\\d{6}|(?:80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[56]|9[47]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[89]\"],\"0$1\"]],\"0\"],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"([25-9]\\\\d{5})$|0\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\"],\"GI\":[\"350\",\"00\",\"(?:[25]\\\\d|60)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d|70)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-9]\"]]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"GN\":[\"224\",\"00\",\"722\\\\d{6}|(?:3|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]]],\"GP\":[\"590\",\"00\",\"590\\\\d{6}|(?:69|80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1289]|5[3-579]|[68][0-689]|7[08]|9\\\\d)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:395|76[018])\\\\d|475[0-2])\\\\d{4}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]]],\"GR\":[\"30\",\"00\",\"5005000\\\\d{3}|8\\\\d{9,11}|(?:[269]\\\\d|70)\\\\d{8}\",[10,11,12],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{5})\",\"$1 $2 $3\",[\"8\"]]]],\"GT\":[\"502\",\"00\",\"(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"([3-9]\\\\d{6})$|1\",\"671$1\",0,\"671\"],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]]],\"GY\":[\"592\",\"001\",\"9008\\\\d{3}|(?:[2-467]\\\\d\\\\d|862)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46-9]\"]]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4,7}|(?:[2-7]|9\\\\d{3})\\\\d{7}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,0,\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]]],\"HR\":[\"385\",\"00\",\"(?:[24-69]\\\\d|3[0-79])\\\\d{7}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{5,6}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-5]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"HT\":[\"509\",\"00\",\"(?:[2-489]\\\\d|55)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"HU\":[\"36\",\"00\",\"[235-7]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"06 $1\"]],\"06\"],\"ID\":[\"62\",\"00[89]\",\"(?:(?:00[1-9]|8\\\\d)\\\\d{4}|[1-36])\\\\d{6}|00\\\\d{10}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\"],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\"],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([25-8]\\\\d{5})$|0\",\"1624$1\",0,\"74576|(?:16|7[56])24\"],\"IN\":[\"91\",\"00\",\"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\"],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\"],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,0,\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,10}|1\\\\d{8,10}|3(?:[0-8]\\\\d{7,10}|9\\\\d{7,8})|(?:55|70)\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?\",[6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[2-5])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1(?:44|[679])|[378]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]|14\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d{3}|89(?:2\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\d\\\\d)|5[0-4]))\\\\d\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([0-24-8]\\\\d{5})$|0\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97[7-9]))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\"],\"JO\":[\"962\",\"00\",\"(?:(?:[2689]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[289][2-9]|5[3-9]|7[2-4679]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[257-9]\"],\"0$1\"]],\"0\"],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|(?:[235-8]\\\\d|99)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\"],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"869$1\",0,\"869\"],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|[2-7])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\"],\"KW\":[\"965\",\"00\",\"18\\\\d{5}|(?:[2569]\\\\d|41)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[245]\"]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"345$1\",0,\"345\"],\"KZ\":[\"7\",\"810\",\"(?:33622|8\\\\d{8})\\\\d{5}|[78]\\\\d{9}\",[10,14],0,\"8\",0,0,0,0,\"33|7\",0,\"8~10\"],\"LA\":[\"856\",\"00\",\"[23]\\\\d{9}|3\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"30[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\"],\"LB\":[\"961\",\"00\",\"[27-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27-9]\"]]],\"0\"],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-8]\\\\d{6})$|1\",\"758$1\",0,\"758\"],\"LI\":[\"423\",\"00\",\"[68]\\\\d{8}|(?:[2378]\\\\d|90)\\\\d{5}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2379]|8(?:0[09]|7)\",\"[2379]|8(?:0(?:02|9)|7)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"(1001)|0\"],\"LK\":[\"94\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\"],\"LR\":[\"231\",\"00\",\"(?:[25]\\\\d|33|77|88)\\\\d{7}|(?:2\\\\d|[4-6])\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[4-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23578]\"],\"0$1\"]],\"0\"],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-7]\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"8 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(8-$1)\",1]],\"8\",0,\"[08]\"],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\"],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]]],\"LY\":[\"218\",\"00\",\"[2-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{5})(\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29[1289]|389)\",\"529(?:1[1-46-9]|2[013-8]|90)|5(?:298|389)[0-46-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|9)|892\",\"5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5293[01]\\\\d{4}|5(?:2(?:[0-25-7]\\\\d|3[1-578]|4[02-46-8]|8[0235-7]|9[0-289])|3(?:[0-47]\\\\d|5[02-9]|6[02-8]|8[0189]|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:[017]\\\\d|2[0-2]|6[0-8]|8[0-3]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"592(?:4[0-2]|93)\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"(?:[3489]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[389]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\"],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\"],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MF\":[\"590\",\"00\",\"590\\\\d{6}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:395|76[018])\\\\d|475[0-2])\\\\d{4}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"([24-9]\\\\d{6})$|0\",\"20$1\"],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\"],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2|34[47]|4(?:[37]7|5[47]|64)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\"],\"ML\":[\"223\",\"00\",\"[24-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[5-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\"],\"MO\":[\"853\",\"00\",\"0800\\\\d{3}|(?:28|[68]\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"670$1\",0,\"670\"],\"MQ\":[\"596\",\"00\",\"596\\\\d{6}|(?:69|80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]]],\"MS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|664|900)\\\\d{7}\",[10],0,\"1\",0,\"([34]\\\\d{6})$|1\",\"664$1\",0,\"664\"],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:[57]|8\\\\d\\\\d)\\\\d{7}|[2-468]\\\\d{6}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57]\"]],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,0,\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[34679]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,0,\"00\"],\"MW\":[\"265\",\"00\",\"(?:[1289]\\\\d|31|77)\\\\d{7}|1\\\\d{6}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[137-9]\"],\"0$1\"]],\"0\"],\"MX\":[\"52\",\"0[09]\",\"1(?:(?:[27]2|44|99)[1-9]|65[0-689])\\\\d{7}|(?:1(?:[01]\\\\d|2[13-9]|[35][1-9]|4[0-35-9]|6[0-46-9]|7[013-9]|8[1-79]|9[1-8])|[2-9]\\\\d)\\\\d{8}\",[10,11],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"],0,1],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 $3 $4\",[\"1(?:33|5[56]|81)\"],0,1],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 $3 $4\",[\"1\"],0,1]],\"01\",0,\"0(?:[12]|4[45])|1\",0,0,0,0,\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[378][1-9]|53)|8\",\"1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1(?:[367]|80)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-79]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"NC\":[\"687\",\"00\",\"(?:050|[2-57-9]\\\\d\\\\d)\\\\d{3}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[02-57-9]\"]]]],\"NE\":[\"227\",\"00\",\"[027-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[013]|7[04]\"]]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1[0-3]\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"[13]\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\"],\"NG\":[\"234\",\"009\",\"(?:[124-7]|9\\\\d{3})\\\\d{6}|[1-9]\\\\d{7}|[78]\\\\d{9,13}\",[7,8,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"78\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|9(?:0[3-9]|[1-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-7]|8[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\"],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|8\\\\d{6,9}|9\\\\d{6,10}|1\\\\d{4,5}\",[5,6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-578]|91\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[489]|59\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\"],\"NP\":[\"977\",\"00\",\"(?:1\\\\d|9)\\\\d{9}|[1-9]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"1[01]|[2-8]|9(?:[1-59]|[67][2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\"],\"NR\":[\"674\",\"00\",\"(?:444|(?:55|8\\\\d)\\\\d|666)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-68]\"]]]],\"NU\":[\"683\",\"00\",\"(?:[47]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"[29]\\\\d{7,9}|50\\\\d{5}(?:\\\\d{2,3})?|6[0-35-9]\\\\d{6}|7\\\\d{7,8}|8\\\\d{4,9}|(?:11\\\\d|[34])\\\\d{7}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,8})\",\"$1 $2\",[\"8[1-579]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"50[036-8]|[89]0\",\"50(?:[0367]|88)|[89]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[59]|80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1|2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7|86\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\"],\"OM\":[\"968\",\"00\",\"(?:1505|[279]\\\\d{3}|500)\\\\d{4}|800\\\\d{5,6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[179]\"]]]],\"PA\":[\"507\",\"00\",\"(?:00800|8\\\\d{3})\\\\d{6}|[68]\\\\d{7}|[1-57-9]\\\\d{6}\",[7,8,10,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[68]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]]],\"PE\":[\"51\",\"00|19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,0,\"00\",\" Anexo \"],\"PF\":[\"689\",\"00\",\"4\\\\d{5}(?:\\\\d{2})?|8\\\\d{7,8}\",[6,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4|8[7-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,0,\"00\"],\"PH\":[\"63\",\"00\",\"(?:[2-7]|9\\\\d)\\\\d{8}|2\\\\d{5}|(?:1800|8)\\\\d{7,9}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\"],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[06-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,7})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\"],\"PL\":[\"48\",\"00\",\"(?:6|8\\\\d\\\\d)\\\\d{7}|[1-9]\\\\d{6}(?:\\\\d{2})?|[26]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|20|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-7]|8[1-79]|9[145]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"8\"]]]],\"PM\":[\"508\",\"00\",\"[45]\\\\d{5}|(?:708|80\\\\d)\\\\d{6}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\"],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"PT\":[\"351\",\"00\",\"1693\\\\d{5}|(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"16|[236-9]\"]]]],\"PW\":[\"680\",\"01[12]\",\"(?:[24-8]\\\\d\\\\d|345|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|9\\\\d{5,10}|(?:[2-46-8]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9(?:[5-79]|8[1-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"]]],\"0\"],\"QA\":[\"974\",\"00\",\"800\\\\d{4}|(?:2|800)\\\\d{6}|(?:0080|[3-7])\\\\d{7}\",[7,8,9,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[16]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[3-7]\"]]]],\"RE\":[\"262\",\"00\",\"(?:26|[689]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"26(?:2\\\\d\\\\d|3(?:0\\\\d|1[0-3]))\\\\d{4}\"],[\"(?:69(?:2\\\\d\\\\d|3(?:0[0-46]|1[013]|2[0-2]|3[0-39]|4\\\\d|5[0-5]|6[0-6]|7[0-27]|8[0-8]|9[0-479]))|9(?:399[0-3]|479[0-2]|76(?:2[27]|3[0-37]|9\\\\d)))\\\\d{4}\"],[\"80\\\\d{7}\"],[\"89[1-37-9]\\\\d{6}\"],0,0,0,0,0,[\"8(?:1[019]|2[0156]|84|90)\\\\d{6}\"]]],\"RO\":[\"40\",\"00\",\"(?:[2378]\\\\d|90)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[237-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\"],\"RU\":[\"7\",\"810\",\"8\\\\d{13}|[347-9]\\\\d{9}\",[10,14],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[349]|8(?:[02-7]|1[1-8])\"],\"8 ($1)\",1],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"8\"],\"8 ($1)\"]],\"8\",0,0,0,0,\"3[04-689]|[489]\",0,\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]]],\"0\"],\"SA\":[\"966\",\"00\",\"92\\\\d{7}|(?:[15]|8\\\\d)\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\"],\"SB\":[\"677\",\"0[01]\",\"(?:[1-6]|[7-9]\\\\d\\\\d)\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"800\\\\d{4}|(?:[249]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]|9[57]\"]]],0,0,0,0,0,0,0,\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44|9)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\"],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8(?:0[1-6]|[1-9])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\"],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,0,\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[489]\\\\d|[57]9)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\"],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\"],\"SL\":[\"232\",\"00\",\"(?:[237-9]\\\\d|66)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[236-9]\"],\"(0$1)\"]],\"0\"],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\"],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d|93)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|[1-5]\\\\d{6}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"(?:2|90)4|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3478]|64|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6(?:0[5-7]|[1-35-9])|9[2-9]\"]]],\"0\"],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-8]\"]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|[89]00\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"(5\\\\d{6})$|1\",\"721$1\",0,\"721\"],\"SY\":[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\"],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\"],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-479]\\\\d{6})$|1\",\"649$1\",0,\"649\"],\"TD\":[\"235\",\"00|16\",\"(?:22|[69]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2679]\"]]],0,0,0,0,0,0,0,\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]]],\"TH\":[\"66\",\"00[1-9]\",\"(?:001800|[2-57]|[689]\\\\d)\\\\d{7}|1\\\\d{7,9}\",[8,9,10,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"TJ\":[\"992\",\"810\",\"[0-57-9]\\\\d{8}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[34]7|91[78]\"]],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3[1-5]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0-57-9]\"]]],0,0,0,0,0,0,0,\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]]],\"TM\":[\"993\",\"810\",\"[1-6]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"6\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]]],\"TO\":[\"676\",\"00\",\"(?:0800|(?:[5-8]\\\\d\\\\d|999)\\\\d)\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]]]],\"TR\":[\"90\",\"00\",\"4\\\\d{6}|8\\\\d{11,12}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\",[7,10,12,13],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[01589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|616)\",\"5(?:[0-59]|6161)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{6,7})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\"],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-46-8]\\\\d{6})$|1\",\"868$1\",0,\"868\"],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[25-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\"],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])\",\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|89|9[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\"],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}|3\\\\d{6}\",[10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"310\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"(?:4722(?:0[0-35]|27)|505(?:[2-57-9]\\\\d\\\\d|6(?:[0-35-9]\\\\d|4[46])))\\\\d{4}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[0-2]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[179]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[068]|3[0-2589]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"(?:0004|4)\\\\d{9}|[1249]\\\\d{7}|(?:[49]\\\\d|80)\\\\d{5}\",[7,8,10,13],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"405|8|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[124]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]],\"0\",0,0,0,0,0,0,\"00\",\" int. \"],\"UZ\":[\"998\",\"810\",\"(?:33|[5-79]\\\\d|88)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[35-9]\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],0,0,0,0,0,0,\"06698\"],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"784$1\",0,\"784\"],\"VE\":[\"58\",\"00\",\"[68]00\\\\d{7}|(?:[24]\\\\d|[59]0)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24-689]\"],\"0$1\"]],\"0\"],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-578]\\\\d{6})$|1\",\"284$1\",0,\"284\"],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"340$1\",0,\"340\"],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[69]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\"],\"VU\":[\"678\",\"00\",\"[57-9]\\\\d{6}|(?:[238]\\\\d|48)\\\\d{3}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]]]],\"WF\":[\"681\",\"00\",\"(?:40|72)\\\\d{4}|8\\\\d{5}(?:\\\\d{3})?\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[478]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"WS\":[\"685\",\"0\",\"(?:[2-6]|8\\\\d{5})\\\\d{4}|[78]\\\\d{6}|[68]\\\\d{5}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-5]|6[1-9]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[68]\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"XK\":[\"383\",\"00\",\"[23]\\\\d{7,8}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[23]\"],\"0$1\"]],\"0\"],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7(?:[24-6]|8[0-7])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"YT\":[\"262\",\"00\",\"(?:(?:(?:26|63)9|80\\\\d)\\\\d|9398)\\\\d{5}\",[9],0,\"0\",0,0,0,0,\"269|63|9398\"],\"ZA\":[\"27\",\"00\",\"[1-79]\\\\d{8}|8\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"ZM\":[\"260\",\"00\",\"800\\\\d{6}|(?:21|63|[79]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[79]\"],\"0$1\"]],\"0\"],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\"]},\"nonGeographic\":{\"800\":[\"800\",0,\"(?:00|[1-9]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"\\\\d\"]]],0,0,0,0,0,0,[0,0,[\"(?:00|[1-9]\\\\d)\\\\d{6}\"]]],\"808\":[\"808\",0,\"[1-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[1-9]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\"[1-9]\\\\d{7}\"]]],\"870\":[\"870\",0,\"7\\\\d{11}|[35-7]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[35-7]\"]]],0,0,0,0,0,0,[0,[\"(?:[356]|774[45])\\\\d{8}|7[6-8]\\\\d{7}\"]]],\"878\":[\"878\",0,\"10\\\\d{10}\",[12],[[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"10\\\\d{10}\"]]],\"881\":[\"881\",0,\"[0-36-9]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"[0-36-9]\"]]],0,0,0,0,0,0,[0,[\"[0-36-9]\\\\d{8}\"]]],\"882\":[\"882\",0,\"[13]\\\\d{6}(?:\\\\d{2,5})?|[19]\\\\d{7}|(?:[25]\\\\d\\\\d|4)\\\\d{7}(?:\\\\d{2})?\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"16|342\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"49\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"1[36]|9\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"3[23]\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"16\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|23|3(?:[15]|4[57])|4|51\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34\"]],[\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\",\"$1 $2 $3\",[\"[1-35]\"]]],0,0,0,0,0,0,[0,[\"342\\\\d{4}|(?:337|49)\\\\d{6}|(?:3(?:2|47|7\\\\d{3})|50\\\\d{3})\\\\d{7}\",[7,8,9,10,12]],0,0,0,0,0,0,[\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|(?:345\\\\d|9[89])\\\\d{6}|(?:10|2(?:3|85\\\\d)|3(?:[15]|[69]\\\\d\\\\d)|4[15-8]|51)\\\\d{8}\"]]],\"883\":[\"883\",0,\"(?:[1-4]\\\\d|51)\\\\d{6,10}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,8})\",\"$1 $2 $3\",[\"[14]|2[24-689]|3[02-689]|51[24-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"510\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"21\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"51[13]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[235]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"(?:2(?:00\\\\d\\\\d|10)|(?:370[1-9]|51\\\\d0)\\\\d)\\\\d{7}|51(?:00\\\\d{5}|[24-9]0\\\\d{4,7})|(?:1[013-79]|2[24-689]|3[02-689]|4[0-4])0\\\\d{5,9}\"]]],\"888\":[\"888\",0,\"\\\\d{11}\",[11],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\"\\\\d{11}\"]]],\"979\":[\"979\",0,\"[1359]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1359]\"]]],0,0,0,0,0,0,[0,0,0,[\"[1359]\\\\d{8}\"]]]}}","// Importing from a \".js\" file is a workaround for Node.js \"ES Modules\"\r\n// importing system which is even uncapable of importing \"*.json\" files.\r\nimport metadata from '../../metadata.min.json.js'\r\n\r\nexport default function withMetadataArgument(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// https://stackoverflow.com/a/46971044/970769\n// \"Breaking changes in Typescript 2.1\"\n// \"Extending built-ins like Error, Array, and Map may no longer work.\"\n// \"As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\"\n// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\nvar ParseError = /*#__PURE__*/function (_Error) {\n  _inherits(ParseError, _Error);\n\n  var _super = _createSuper(ParseError);\n\n  function ParseError(code) {\n    var _this;\n\n    _classCallCheck(this, ParseError);\n\n    _this = _super.call(this, code); // Set the prototype explicitly.\n    // Any subclass of FooError will have to manually set the prototype as well.\n\n    Object.setPrototypeOf(_assertThisInitialized(_this), ParseError.prototype);\n    _this.name = _this.constructor.name;\n    return _this;\n  }\n\n  return _createClass(ParseError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexport { ParseError as default };\n//# sourceMappingURL=ParseError.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nexport var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nexport var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nexport var VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nexport var WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nexport var VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nexport var PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\nexport default function (a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n}\n//# sourceMappingURL=semver-compare.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport compare from './tools/semver-compare.js'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\nvar CALLING_CODE_REG_EXP = /^\\d+$/;\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata = /*#__PURE__*/function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n      // The test case could be found by searching for \"nonGeographical\".\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      // Supports just passing `callingCode` as the first argument.\n      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\n        callingCode = countryCode;\n        countryCode = null;\n      }\n\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        // In that metadata, there was no concept of \"non-geographic\" metadata\n        // so metadata for `001` country code was stored along with other countries.\n        // The test case can be found by searching for:\n        // \"should work around `nonGeographic` metadata not existing\".\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      return this.selectNumberingPlan(callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexport { Metadata as default };\n\nvar NumberingPlan = /*#__PURE__*/function () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    } // Is always present.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    } // Is only present when a country supports multiple IDD prefixes.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    } // \"possible length\" data is always present in Google's metadata.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n\n  return NumberingPlan;\n}();\n\nvar Format = /*#__PURE__*/function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\n      // when `national_prefix_formatting_rule` is not present.\n      // So, `true` or `false` are returned explicitly here, so that\n      // `0` number isn't returned.\n      ? true : false;\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type = /*#__PURE__*/function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error(\"Unknown country: \".concat(country));\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}\n\nfunction setVersion(metadata) {\n  var version = metadata.version;\n\n  if (typeof version === 'number') {\n    this.v1 = version === 1;\n    this.v2 = version === 2;\n    this.v3 = version === 3;\n    this.v4 = version === 4;\n  } else {\n    if (!version) {\n      this.v1 = true;\n    } else if (compare(version, V3) === -1) {\n      this.v2 = true;\n    } else if (compare(version, V4) === -1) {\n      this.v3 = true;\n    } else {\n      this.v4 = true;\n    }\n  }\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }\n//# sourceMappingURL=metadata.js.map","import { VALID_DIGITS } from '../../constants.js'; // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext=';\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\n\nvar getExtensionDigitsPattern = function getExtensionDigitsPattern(maxLength) {\n  return \"([\".concat(VALID_DIGITS, \"]{1,\").concat(maxLength, \"})\");\n};\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\n\n\nexport default function createExtensionPattern(purpose) {\n  // We cap the maximum length of an extension based on the ambiguity of the way\n  // the extension is prefixed. As per ITU, the officially allowed length for\n  // extensions is actually 40, but we don't support this since we haven't seen real\n  // examples and this introduces many false interpretations as the extension labels\n  // are not standardized.\n\n  /** @type {string} */\n  var extLimitAfterExplicitLabel = '20';\n  /** @type {string} */\n\n  var extLimitAfterLikelyLabel = '15';\n  /** @type {string} */\n\n  var extLimitAfterAmbiguousChar = '9';\n  /** @type {string} */\n\n  var extLimitWhenNotSure = '6';\n  /** @type {string} */\n\n  var possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\xA0\\\\t,]*\"; // Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\n\n  /** @type {string} */\n\n  var possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\";\n  /** @type {string} */\n\n  var optionalExtnSuffix = \"#?\"; // Here the extension is called out in more explicit way, i.e mentioning it obvious\n  // patterns like \"ext.\".\n\n  /** @type {string} */\n\n  var explicitExtLabels = \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\"; // One-character symbols that can be used to indicate an extension, and less\n  // commonly used or more ambiguous extension labels.\n\n  /** @type {string} */\n\n  var ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\"; // When extension is not separated clearly.\n\n  /** @type {string} */\n\n  var ambiguousSeparator = \"[- ]+\"; // This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\n  // comma as extension label may have it.\n\n  /** @type {string} */\n\n  var possibleSeparatorsNumberExtLabelNoComma = \"[ \\xA0\\\\t]*\"; // \",,\" is commonly used for auto dialling the extension when connected. First\n  // comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\n  // not repeat it here. Semi-colon works in Iphone and Android also to pop up a\n  // button with the extension number following.\n\n  /** @type {string} */\n\n  var autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\n  /** @type {string} */\n\n  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\n  /** @type {string} */\n\n  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\n  /** @type {string} */\n\n  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + \"(?:,)+\" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix; // The first regular expression covers RFC 3966 format, where the extension is added\n  // using \";ext=\". The second more generic where extension is mentioned with explicit\n  // labels like \"ext:\". In both the above cases we allow more numbers in extension than\n  // any other extension labels. The third one captures when single character extension\n  // labels or less commonly used labels are used. In such cases we capture fewer\n  // extension digits in order to reduce the chance of falsely interpreting two\n  // numbers beside each other as a number + extension. The fourth one covers the\n  // special case of American numbers where the extension is written with a hash\n  // at the end, such as \"- 503#\". The fifth one is exclusively for extension\n  // autodialling formats which are used when dialling and in this case we accept longer\n  // extensions. The last one is more liberal on the number of commas that acts as\n  // extension labels, so we have a strict cap on the number of digits in such extensions.\n\n  return rfcExtn + \"|\" + explicitExtn + \"|\" + ambiguousExtn + \"|\" + americanStyleExtnWithSuffix + \"|\" + autoDiallingExtn + \"|\" + onlyCommasExtn;\n}\n//# sourceMappingURL=createExtensionPattern.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from '../constants.js';\nimport createExtensionPattern from './extension/createExtensionPattern.js'; //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nexport var VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*'; // This regular expression isn't present in Google's `libphonenumber`\n// and is only used to determine whether the phone number being input\n// is too short for it to even consider it a \"valid\" number.\n// This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nvar VALID_PHONE_NUMBER_START_REG_EXP = new RegExp('^' + '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){1,2}' + '$', 'i');\nexport var VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER + // Phone number extensions\n'(?:' + createExtensionPattern() + ')?'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER_WITH_EXTENSION + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nexport default function isViablePhoneNumber(number) {\n  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n} // This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nexport function isViablePhoneNumberStart(number) {\n  return VALID_PHONE_NUMBER_START_REG_EXP.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","import createExtensionPattern from './createExtensionPattern.js'; // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nexport default function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var numberWithoutExtension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i]) {\n      return {\n        number: numberWithoutExtension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}\n//# sourceMappingURL=extractExtension.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nexport default function parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}\n//# sourceMappingURL=parseDigits.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { parseDigit } from './helpers/parseDigits.js';\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\n\nexport default function parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n\n  return result;\n}\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\n\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (prevParsedCharacters) {\n      return;\n    }\n\n    return '+';\n  } // Allow digits.\n\n\n  return parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport default function mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = _createForOfIteratorHelperLoose(b), _step; !(_step = _iterator()).done;) {\n    var element = _step.value;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b) {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=mergeArrays.js.map","import mergeArrays from './mergeArrays.js';\nexport default function checkNumberLength(nationalNumber, metadata) {\n  return checkNumberLengthForType(nationalNumber, undefined, metadata);\n} // Checks whether a number is possible for the country based on its length.\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths) {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // } else {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n    return 'INVALID_LENGTH';\n  }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=checkNumberLength.js.map","import Metadata from './metadata.js';\nimport checkNumberLength from './helpers/checkNumberLength.js';\n/**\r\n * Checks if a phone number is \"possible\" (basically just checks its length).\r\n *\r\n * isPossible(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  } // Old metadata (< 1.0.18) had no \"possible length\" data.\n\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}\n//# sourceMappingURL=isPossible.js.map","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nexport default function matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n//# sourceMappingURL=matchesEntirely.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.\n    // For example, for \"US\" country.\n    // Old metadata (< `1.0.18`) had a specific \"types\" data structure\n    // that happened to be `undefined` for `MOBILE` in that case.\n    // Newer metadata (>= `1.0.18`) has another data structure that is\n    // not `undefined` for `MOBILE` in that case (it's just an empty array).\n    // So this `if` is just for backwards compatibility with old metadata.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _iterator = _createForOfIteratorHelperLoose(NON_FIXED_LINE_PHONE_TYPES), _step; !(_step = _iterator()).done;) {\n    var type = _step.value;\n\n    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\n      return type;\n    }\n  }\n}\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n}\n//# sourceMappingURL=getNumberType.js.map","import Metadata from './metadata.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport getNumberType from './helpers/getNumberType.js';\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * isValid(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nexport default function isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata);\n  /**\r\n   * Checks if a phone number is \"possible\" (basically just checks its length).\r\n   *\r\n   * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n   * @param  {object} [options]\r\n   * @param  {object} metadata\r\n   * @return {string}\r\n   */\n\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(nationalNumber, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=isValid.js.map","import Metadata from '../metadata.js';\n/**\r\n * Returns a list of countries that the phone number could potentially belong to.\r\n * @param  {string} callingCode — Calling code.\r\n * @param  {string} nationalNumber — National (significant) number.\r\n * @param  {object} metadata — Metadata.\r\n * @return {string[]} A list of possible countries.\r\n */\n\nexport default function getPossibleCountriesForNumber(callingCode, nationalNumber, metadata) {\n  var _metadata = new Metadata(metadata);\n\n  var possibleCountries = _metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return [];\n  }\n\n  return possibleCountries.filter(function (country) {\n    return couldNationalNumberBelongToCountry(nationalNumber, country, metadata);\n  });\n}\n\nfunction couldNationalNumberBelongToCountry(nationalNumber, country, metadata) {\n  var _metadata = new Metadata(metadata);\n\n  _metadata.selectNumberingPlan(country);\n\n  if (_metadata.numberingPlan.possibleLengths().indexOf(nationalNumber.length) >= 0) {\n    return true;\n  }\n\n  return false;\n}\n//# sourceMappingURL=getPossibleCountriesForNumber.js.map","import { VALID_PUNCTUATION } from '../constants.js'; // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\n  return formattedNumber.replace(new RegExp(\"[\".concat(VALID_PUNCTUATION, \"]+\"), 'g'), ' ').trim();\n}\n//# sourceMappingURL=applyInternationalSeparatorStyle.js.map","import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle.js'; // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly. Therefore, we use `\\d`, so that the first\n// group actually used in the pattern will be matched.\n\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexport default function formatNationalNumberUsingFormat(number, format, _ref) {\n  var useInternationalFormat = _ref.useInternationalFormat,\n      withNationalPrefix = _ref.withNationalPrefix,\n      carrierCode = _ref.carrierCode,\n      metadata = _ref.metadata;\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : // This library doesn't use `domestic_carrier_code_formatting_rule`,\n  // because that one is only used when formatting phone numbers\n  // for dialing from a mobile phone, and this is not a dialing library.\n  // carrierCode && format.domesticCarrierCodeFormattingRule()\n  // \t// First, replace the $CC in the formatting rule with the desired carrier code.\n  // \t// Then, replace the $FG in the formatting rule with the first group\n  // \t// and the carrier code combined in the appropriate way.\n  // \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\n  // \t: (\n  // \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\n  // \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\n  // \t\t\t: format.format()\n  // \t)\n  withNationalPrefix && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalFormat) {\n    return applyInternationalSeparatorStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}\n//# sourceMappingURL=formatNationalNumberUsingFormat.js.map","import Metadata from '../metadata.js';\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nexport default function getIddPrefix(country, callingCode, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n\n  if (countryMetadata.defaultIDDPrefix()) {\n    return countryMetadata.defaultIDDPrefix();\n  }\n\n  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n}\n//# sourceMappingURL=getIddPrefix.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport isViablePhoneNumber from './isViablePhoneNumber.js'; // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nexport function parseRFC3966(text) {\n  var number;\n  var ext; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = _createForOfIteratorHelperLoose(text.split(';')), _step; !(_step = _iterator()).done;) {\n    var part = _step.value;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nexport function formatRFC3966(_ref) {\n  var number = _ref.number,\n      ext = _ref.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js';\nimport Metadata, { getCountryCallingCode } from './metadata.js';\nimport getIddPrefix from './helpers/getIddPrefix.js';\nimport { formatRFC3966 } from './helpers/RFC3966.js';\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  }\n};\n/**\r\n * Formats a phone number.\r\n *\r\n * format(phoneNumberInstance, 'INTERNATIONAL', { ..., v2: true }, metadata)\r\n * format(phoneNumberInstance, 'NATIONAL', { ..., v2: true }, metadata)\r\n *\r\n * format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', { ... }, metadata)\r\n * format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {string} format\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n\n      number = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n\n    case 'RFC3966':\n      return formatRFC3966({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n    // For reference, here's Google's IDD formatter:\n    // https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\n    // Not saying that this IDD formatter replicates it 1:1, but it seems to work.\n    // Who would even need to format phone numbers in IDD format anyway?\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);\n      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);\n\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n}\n\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return formatNationalNumberUsingFormat(number, format, {\n    useInternationalFormat: formatAs === 'INTERNATIONAL',\n    withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,\n    carrierCode: carrierCode,\n    metadata: metadata\n  });\n}\n\nexport function chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = _createForOfIteratorHelperLoose(availableFormats), _step; !(_step = _iterator()).done;) {\n    var format = _step.value;\n\n    // Validate leading digits.\n    // The test case for \"else path\" could be found by searching for\n    // \"format.leadingDigitsPatterns().length === 0\".\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (matchesEntirely(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {\n  var fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata); // When calling within the same country calling code.\n\n  if (fromCountryCallingCode === countryCallingCode) {\n    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata); // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n\n    if (countryCallingCode === '1') {\n      return countryCallingCode + ' ' + formattedNumber;\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return formattedNumber;\n  }\n\n  var iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata);\n\n  if (iddPrefix) {\n    return \"\".concat(iddPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata));\n  }\n}\n//# sourceMappingURL=format.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport Metadata from './metadata.js';\nimport isPossibleNumber from './isPossible.js';\nimport isValidNumber from './isValid.js'; // import checkNumberLength from './helpers/checkNumberLength.js'\n\nimport getNumberType from './helpers/getNumberType.js';\nimport getPossibleCountriesForNumber from './helpers/getPossibleCountriesForNumber.js';\nimport formatNumber from './format.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar PhoneNumber = /*#__PURE__*/function () {\n  /**\r\n   * @param  {string} countryOrCountryCallingCode\r\n   * @param  {string} nationalNumber\r\n   * @param  {object} metadata — Metadata JSON\r\n   * @return {PhoneNumber}\r\n   */\n  function PhoneNumber(countryOrCountryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryOrCountryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n\n    if (!metadata) {\n      throw new TypeError('`metadata` not passed');\n    }\n\n    var _getCountryAndCountry = getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadata),\n        country = _getCountryAndCountry.country,\n        countryCallingCode = _getCountryAndCountry.countryCallingCode;\n\n    this.country = country;\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"setExt\",\n    value: function setExt(ext) {\n      this.ext = ext;\n    }\n  }, {\n    key: \"getPossibleCountries\",\n    value: function getPossibleCountries() {\n      if (this.country) {\n        return [this.country];\n      }\n\n      return getPossibleCountriesForNumber(this.countryCallingCode, this.nationalNumber, this.metadata);\n    }\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.metadata);\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // This function was originally meant to be an equivalent for `validatePhoneNumberLength()`,\n    // but later it was found out that it doesn't include the possible `TOO_SHORT` result\n    // returned from `parsePhoneNumberWithError()` in the original `validatePhoneNumberLength()`,\n    // so eventually I simply commented out this method from the `PhoneNumber` class\n    // and just left the `validatePhoneNumberLength()` function, even though that one would require\n    // and additional step to also validate the actual country / calling code of the phone number.\n    // validateLength() {\n    // \tconst metadata = new Metadata(this.metadata)\n    // \tmetadata.selectNumberingPlan(this.countryCallingCode)\n    // \tconst result = checkNumberLength(this.nationalNumber, metadata)\n    // \tif (result !== 'IS_POSSIBLE') {\n    // \t\treturn result\n    // \t}\n    // }\n\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread(_objectSpread({}, options), {}, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport { PhoneNumber as default };\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};\n\nfunction getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadataJson) {\n  var country;\n  var countryCallingCode;\n  var metadata = new Metadata(metadataJson); // If country code is passed then derive `countryCallingCode` from it.\n  // Also store the country code as `.country`.\n\n  if (isCountryCode(countryOrCountryCallingCode)) {\n    country = countryOrCountryCallingCode;\n    metadata.selectNumberingPlan(country);\n    countryCallingCode = metadata.countryCallingCode();\n  } else {\n    countryCallingCode = countryOrCountryCallingCode;\n    /* istanbul ignore if */\n\n    if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n      if (metadata.isNonGeographicCallingCode(countryCallingCode)) {\n        country = '001';\n      }\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode\n  };\n}\n//# sourceMappingURL=PhoneNumber.js.map","import Metadata from '../metadata.js';\nimport { VALID_DIGITS } from '../constants.js';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // If there're any digits after an IDD prefix,\n  // then those digits are a country calling code.\n  // Since no country code starts with a `0`,\n  // the code below validates that the next digit (if present) is not `0`.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}\n//# sourceMappingURL=stripIddPrefix.js.map","/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`. Even if a national prefix was extracted, it's not necessarily present in the returned object, so don't rely on its presence in the returned object in order to find out whether a national prefix has been extracted or not.\r\n */\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\n  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode; // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n      // If a `national_prefix_for_parsing` has any \"capturing groups\"\n      // then it means that the national (significant) number is equal to\n      // those \"capturing groups\" transformed via `national_prefix_transform_rule`,\n      // and nothing could be said about the actual national prefix:\n      // what is it and was it even there.\n      // If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\n      // then everything it matches is a national prefix.\n      // To determine whether `national_prefix_for_parsing` matched any\n      // \"capturing groups\", the value of the result of calling `.exec()`\n      // is looked at, and if it has non-undefined values where there're\n      // \"capturing groups\" in the regular expression, then it means\n      // that \"capturing groups\" have been matched.\n      // It's not possible to tell whether there'll be any \"capturing gropus\"\n      // before the matching process, because a `national_prefix_for_parsing`\n      // could exhibit both behaviors.\n\n      var capturedGroupsCount = prefixMatch.length - 1;\n      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];\n\n      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // If there's more than one captured group,\n        // then carrier code is the second one.\n\n        if (capturedGroupsCount > 1) {\n          carrierCode = prefixMatch[1];\n        }\n      } // If there're no \"capturing groups\",\n      // or if there're \"capturing groups\" but no\n      // `national_prefix_transform_rule`,\n      // then just strip the national prefix from the number,\n      // and possibly a carrier code.\n      // Seems like there could be more.\n      else {\n        // `prefixBeforeNationalNumber` is the whole substring matched by\n        // the `national_prefix_for_parsing` regular expression.\n        // There seem to be no guarantees that it's just a national prefix.\n        // For example, if there's a carrier code, it's gonna be a\n        // part of `prefixBeforeNationalNumber` too.\n        var prefixBeforeNationalNumber = prefixMatch[0];\n        nationalNumber = number.slice(prefixBeforeNationalNumber.length); // If there's at least one captured group,\n        // then carrier code is the first one.\n\n        if (hasCapturedGroups) {\n          carrierCode = prefixMatch[1];\n        }\n      } // Tries to guess whether a national prefix was present in the input.\n      // This is not something copy-pasted from Google's library:\n      // they don't seem to have an equivalent for that.\n      // So this isn't an \"officially approved\" way of doing something like that.\n      // But since there seems no other existing method, this library uses it.\n\n\n      var nationalPrefix;\n\n      if (hasCapturedGroups) {\n        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);\n        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup); // Example: an Argentinian (AR) phone number `0111523456789`.\n        // `prefixMatch[0]` is `01115`, and `$1` is `11`,\n        // and the rest of the phone number is `23456789`.\n        // The national number is transformed via `9$1` to `91123456789`.\n        // National prefix `0` is detected being present at the start.\n        // if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\n\n        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\n          nationalPrefix = metadata.numberingPlan.nationalPrefix();\n        }\n      } else {\n        nationalPrefix = prefixMatch[0];\n      }\n\n      return {\n        nationalNumber: nationalNumber,\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode\n      };\n    }\n  }\n\n  return {\n    nationalNumber: number\n  };\n}\n//# sourceMappingURL=extractNationalNumberFromPossiblyIncompleteNumber.js.map","import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport checkNumberLength from './checkNumberLength.js';\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\nexport default function extractNationalNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(number, metadata),\n      carrierCode = _extractNationalNumbe.carrierCode,\n      nationalNumber = _extractNationalNumbe.nationalNumber;\n\n  if (nationalNumber !== number) {\n    if (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {\n      // Don't strip the national prefix.\n      return {\n        nationalNumber: number\n      };\n    } // Check the national (significant) number length after extracting national prefix and carrier code.\n    // Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature.\n\n\n    if (metadata.possibleLengths()) {\n      // The number remaining after stripping the national prefix and carrier code\n      // should be long enough to have a possible length for the country.\n      // Otherwise, don't strip the national prefix and carrier code,\n      // since the original number could be a valid number.\n      // This check has been copy-pasted \"as is\" from Google's original library:\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      // It doesn't check for the \"possibility\" of the original `number`.\n      // I guess it's fine not checking that one. It works as is anyway.\n      if (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {\n        // Don't strip the national prefix.\n        return {\n          nationalNumber: number\n        };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n} // In some countries, the same digit could be a national prefix\n// or a leading digit of a valid phone number.\n// For example, in Russia, national prefix is `8`,\n// and also `800 555 35 35` is a valid number\n// in which `8` is not a national prefix, but the first digit\n// of a national (significant) number.\n// Same's with Belarus:\n// `82004910060` is a valid national (significant) number,\n// but `2004910060` is not.\n// To support such cases (to prevent the code from always stripping\n// national prefix), a condition is imposed: a national prefix\n// is not extracted when the original number is \"viable\" and the\n// resultant number is not, a \"viable\" national number being the one\n// that matches `national_number_pattern`.\n\nfunction shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {\n  // The equivalent in Google's code is:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\n  if (matchesEntirely(nationalNumberBefore, metadata.nationalNumberPattern()) && !matchesEntirely(nationalNumberAfter, metadata.nationalNumberPattern())) {\n    return false;\n  } // This \"is possible\" national number (length) check has been commented out\n  // because it's superceded by the (effectively) same check done in the\n  // `extractNationalNumber()` function after it calls `shouldHaveExtractedNationalPrefix()`.\n  // In other words, why run the same check twice if it could only be run once.\n  // // Check the national (significant) number length after extracting national prefix and carrier code.\n  // // Fixes a minor \"weird behavior\" bug: https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57\n  // // (Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature).\n  // if (metadata.possibleLengths()) {\n  // \tif (isPossibleIncompleteNationalNumber(nationalNumberBefore, metadata) &&\n  // \t\t!isPossibleIncompleteNationalNumber(nationalNumberAfter, metadata)) {\n  // \t\treturn false\n  // \t}\n  // }\n\n\n  return true;\n}\n\nfunction isPossibleIncompleteNationalNumber(nationalNumber, metadata) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'TOO_SHORT':\n    case 'INVALID_LENGTH':\n      // This library ignores \"local-only\" phone numbers (for simplicity).\n      // See the readme for more info on what are \"local-only\" phone numbers.\n      // case 'IS_POSSIBLE_LOCAL_ONLY':\n      return false;\n\n    default:\n      return true;\n  }\n}\n//# sourceMappingURL=extractNationalNumber.js.map","import Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport extractNationalNumber from './extractNationalNumber.js';\nimport checkNumberLength from './checkNumberLength.js';\nimport getCountryCallingCode from '../getCountryCallingCode.js';\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;\n\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n\n    var _extractNationalNumbe = extractNationalNumber(possibleShorterNumber, metadata),\n        possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;\n\n    var _extractNationalNumbe2 = extractNationalNumber(number, metadata),\n        nationalNumber = _extractNationalNumbe2.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n\n    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLength(nationalNumber, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n\n  return {\n    number: number\n  };\n}\n//# sourceMappingURL=extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js.map","import stripIddPrefix from './stripIddPrefix.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport Metadata from '../metadata.js';\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants.js';\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCodeSource: string?, countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\nexport default function extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  }\n\n  var isNumberWithIddPrefix; // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      isNumberWithIddPrefix = true;\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),\n            countryCallingCode = _extractCountryCallin.countryCallingCode,\n            shorterNumber = _extractCountryCallin.number;\n\n        if (countryCallingCode) {\n          return {\n            countryCallingCodeSource: 'FROM_NUMBER_WITHOUT_PLUS_SIGN',\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n\n      return {\n        // No need to set it to `UNSPECIFIED`. It can be just `undefined`.\n        // countryCallingCodeSource: 'UNSPECIFIED',\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(_countryCallingCode);\n      return {\n        countryCallingCodeSource: isNumberWithIddPrefix ? 'FROM_NUMBER_WITH_IDD' : 'FROM_NUMBER_WITH_PLUS_SIGN',\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n} // The possible values for the returned `countryCallingCodeSource` are:\n//\n// Copy-pasted from:\n// https://github.com/google/libphonenumber/blob/master/resources/phonenumber.proto\n//\n// // The source from which the country_code is derived. This is not set in the\n// // general parsing method, but in the method that parses and keeps raw_input.\n// // New fields could be added upon request.\n// enum CountryCodeSource {\n//  // Default value returned if this is not set, because the phone number was\n//  // created using parse, not parseAndKeepRawInput. hasCountryCodeSource will\n//  // return false if this is the case.\n//  UNSPECIFIED = 0;\n//\n//  // The country_code is derived based on a phone number with a leading \"+\",\n//  // e.g. the French number \"+33 1 42 68 53 00\".\n//  FROM_NUMBER_WITH_PLUS_SIGN = 1;\n//\n//  // The country_code is derived based on a phone number with a leading IDD,\n//  // e.g. the French number \"011 33 1 42 68 53 00\", as it is dialled from US.\n//  FROM_NUMBER_WITH_IDD = 5;\n//\n//  // The country_code is derived based on a phone number without a leading\n//  // \"+\", e.g. the French number \"33 1 42 68 53 00\" when defaultCountry is\n//  // supplied as France.\n//  FROM_NUMBER_WITHOUT_PLUS_SIGN = 10;\n//\n//  // The country_code is derived NOT based on the phone number itself, but\n//  // from the defaultCountry parameter provided in the parsing function by the\n//  // clients. This happens mostly for numbers written in the national format\n//  // (without country code). For example, this would be set when parsing the\n//  // French number \"01 42 68 53 00\", when defaultCountry is supplied as\n//  // France.\n//  FROM_DEFAULT_COUNTRY = 20;\n// }\n//# sourceMappingURL=extractCountryCallingCode.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Metadata from '../metadata.js';\nimport getNumberType from './getNumberType.js';\nexport default function getCountryByNationalNumber(possibleCountries, nationalPhoneNumber, metadata) {\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(possibleCountries), _step; !(_step = _iterator()).done;) {\n    var country = _step.value;\n    metadata.country(country); // \"Leading digits\" patterns are only defined for about 20% of all countries.\n    // By definition, matching \"leading digits\" is a sufficient but not a necessary\n    // condition for a phone number to belong to a country.\n    // The point of \"leading digits\" check is that it's the fastest one to get a match.\n    // https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n      phone: nationalPhoneNumber,\n      country: country\n    }, undefined, metadata.metadata)) {\n      return country;\n    }\n  }\n}\n//# sourceMappingURL=getCountryByNationalNumber.js.map","import getCountryByNationalNumber from './getCountryByNationalNumber.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  }\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return getCountryByNationalNumber(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\n//# sourceMappingURL=getCountryByCallingCode.js.map","// When phone numbers are written in `RFC3966` format — `\"tel:+12133734253\"` —\n// they can have their \"calling code\" part written separately in a `phone-context` parameter.\n// Example: `\"tel:12133734253;phone-context=+1\"`.\n// This function parses the full phone number from the local number and the `phone-context`\n// when the `phone-context` contains a `+` sign.\nimport { VALID_DIGITS // PLUS_CHARS\n} from '../constants.js';\nexport var PLUS_SIGN = '+';\nvar RFC3966_VISUAL_SEPARATOR_ = '[\\\\-\\\\.\\\\(\\\\)]?';\nvar RFC3966_PHONE_DIGIT_ = '(' + '[' + VALID_DIGITS + ']' + '|' + RFC3966_VISUAL_SEPARATOR_ + ')';\nvar RFC3966_GLOBAL_NUMBER_DIGITS_ = '^' + '\\\\' + PLUS_SIGN + RFC3966_PHONE_DIGIT_ + '*' + '[' + VALID_DIGITS + ']' + RFC3966_PHONE_DIGIT_ + '*' + '$';\n/**\r\n * Regular expression of valid global-number-digits for the phone-context\r\n * parameter, following the syntax defined in RFC3966.\r\n */\n\nvar RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_ = new RegExp(RFC3966_GLOBAL_NUMBER_DIGITS_, 'g'); // In this port of Google's library, we don't accept alpha characters in phone numbers.\n// const ALPHANUM_ = VALID_ALPHA_ + VALID_DIGITS\n\nvar ALPHANUM_ = VALID_DIGITS;\nvar RFC3966_DOMAINLABEL_ = '[' + ALPHANUM_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*';\nvar VALID_ALPHA_ = 'a-zA-Z';\nvar RFC3966_TOPLABEL_ = '[' + VALID_ALPHA_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*';\nvar RFC3966_DOMAINNAME_ = '^(' + RFC3966_DOMAINLABEL_ + '\\\\.)*' + RFC3966_TOPLABEL_ + '\\\\.?$';\n/**\r\n * Regular expression of valid domainname for the phone-context parameter,\r\n * following the syntax defined in RFC3966.\r\n */\n\nvar RFC3966_DOMAINNAME_PATTERN_ = new RegExp(RFC3966_DOMAINNAME_, 'g');\nexport var RFC3966_PREFIX_ = 'tel:';\nexport var RFC3966_PHONE_CONTEXT_ = ';phone-context=';\nexport var RFC3966_ISDN_SUBADDRESS_ = ';isub=';\n/**\r\n * Extracts the value of the phone-context parameter of `numberToExtractFrom`,\r\n * following the syntax defined in RFC3966.\r\n *\r\n * @param {string} numberToExtractFrom\r\n * @return {string|null} the extracted string (possibly empty), or `null` if no phone-context parameter is found.\r\n */\n\nexport default function extractPhoneContext(numberToExtractFrom) {\n  var indexOfPhoneContext = numberToExtractFrom.indexOf(RFC3966_PHONE_CONTEXT_); // If no phone-context parameter is present\n\n  if (indexOfPhoneContext < 0) {\n    return null;\n  }\n\n  var phoneContextStart = indexOfPhoneContext + RFC3966_PHONE_CONTEXT_.length; // If phone-context parameter is empty\n\n  if (phoneContextStart >= numberToExtractFrom.length) {\n    return '';\n  }\n\n  var phoneContextEnd = numberToExtractFrom.indexOf(';', phoneContextStart); // If phone-context is not the last parameter\n\n  if (phoneContextEnd >= 0) {\n    return numberToExtractFrom.substring(phoneContextStart, phoneContextEnd);\n  } else {\n    return numberToExtractFrom.substring(phoneContextStart);\n  }\n}\n/**\r\n * Returns whether the value of phoneContext follows the syntax defined in RFC3966.\r\n *\r\n * @param {string|null} phoneContext\r\n * @return {boolean}\r\n */\n\nexport function isPhoneContextValid(phoneContext) {\n  if (phoneContext === null) {\n    return true;\n  }\n\n  if (phoneContext.length === 0) {\n    return false;\n  } // Does phone-context value match pattern of global-number-digits or domainname.\n\n\n  return RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_.test(phoneContext) || RFC3966_DOMAINNAME_PATTERN_.test(phoneContext);\n}\n//# sourceMappingURL=extractPhoneContext.js.map","import extractPhoneContext, { isPhoneContextValid, PLUS_SIGN, RFC3966_PREFIX_, RFC3966_PHONE_CONTEXT_, RFC3966_ISDN_SUBADDRESS_ } from './extractPhoneContext.js';\nimport ParseError from '../ParseError.js';\n/**\r\n * @param  {string} numberToParse\r\n * @param  {string} nationalNumber\r\n * @return {}\r\n */\n\nexport default function extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(numberToParse, _ref) {\n  var extractFormattedPhoneNumber = _ref.extractFormattedPhoneNumber;\n  var phoneContext = extractPhoneContext(numberToParse);\n\n  if (!isPhoneContextValid(phoneContext)) {\n    throw new ParseError('NOT_A_NUMBER');\n  }\n\n  var phoneNumberString;\n\n  if (phoneContext === null) {\n    // Extract a possible number from the string passed in.\n    // (this strips leading characters that could not be the start of a phone number)\n    phoneNumberString = extractFormattedPhoneNumber(numberToParse) || '';\n  } else {\n    phoneNumberString = ''; // If the phone context contains a phone number prefix, we need to capture\n    // it, whereas domains will be ignored.\n\n    if (phoneContext.charAt(0) === PLUS_SIGN) {\n      phoneNumberString += phoneContext;\n    } // Now append everything between the \"tel:\" prefix and the phone-context.\n    // This should include the national number, an optional extension or\n    // isdn-subaddress component. Note we also handle the case when \"tel:\" is\n    // missing, as we have seen in some of the phone number inputs.\n    // In that case, we append everything from the beginning.\n\n\n    var indexOfRfc3966Prefix = numberToParse.indexOf(RFC3966_PREFIX_);\n    var indexOfNationalNumber; // RFC 3966 \"tel:\" prefix is preset at this stage because\n    // `isPhoneContextValid()` requires it to be present.\n\n    /* istanbul ignore else */\n\n    if (indexOfRfc3966Prefix >= 0) {\n      indexOfNationalNumber = indexOfRfc3966Prefix + RFC3966_PREFIX_.length;\n    } else {\n      indexOfNationalNumber = 0;\n    }\n\n    var indexOfPhoneContext = numberToParse.indexOf(RFC3966_PHONE_CONTEXT_);\n    phoneNumberString += numberToParse.substring(indexOfNationalNumber, indexOfPhoneContext);\n  } // Delete the isdn-subaddress and everything after it if it is present.\n  // Note extension won't appear at the same time with isdn-subaddress\n  // according to paragraph 5.3 of the RFC3966 spec.\n\n\n  var indexOfIsdn = phoneNumberString.indexOf(RFC3966_ISDN_SUBADDRESS_);\n\n  if (indexOfIsdn > 0) {\n    phoneNumberString = phoneNumberString.substring(0, indexOfIsdn);\n  } // If both phone context and isdn-subaddress are absent but other\n  // parameters are present, the parameters are left in nationalNumber.\n  // This is because we are concerned about deleting content from a potential\n  // number string when there is no strong evidence that the number is\n  // actually written in RFC3966.\n\n\n  if (phoneNumberString !== '') {\n    return phoneNumberString;\n  }\n}\n//# sourceMappingURL=extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_DIGITS, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN } from './constants.js';\nimport ParseError from './ParseError.js';\nimport Metadata from './metadata.js';\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber.js';\nimport extractExtension from './helpers/extension/extractExtension.js';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber.js';\nimport getCountryCallingCode from './getCountryCallingCode.js';\nimport { isPossibleNumber } from './isPossible.js'; // import { parseRFC3966 } from './helpers/RFC3966.js'\n\nimport PhoneNumber from './PhoneNumber.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js';\nimport extractNationalNumber from './helpers/extractNationalNumber.js';\nimport stripIddPrefix from './helpers/stripIddPrefix.js';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js';\nimport extractFormattedPhoneNumberFromPossibleRfc3966NumberUri from './helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js'; // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // Examples:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\n/**\r\n * Parses a phone number.\r\n *\r\n * parse('123456789', { defaultCountry: 'RU', v2: true }, metadata)\r\n * parse('123456789', { defaultCountry: 'RU' }, metadata)\r\n * parse('123456789', undefined, metadata)\r\n *\r\n * @param  {string} input\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {object|PhoneNumber?} If `options.v2: true` flag is passed, it returns a `PhoneNumber?` instance. Otherwise, returns an object of shape `{ phone: '...', country: '...' }` (or just `{}` if no phone number was parsed).\r\n */\n\nexport default function parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n\n  var _parseInput = parseInput(text, options.v2, options.extract),\n      formattedPhoneNumber = _parseInput.number,\n      ext = _parseInput.ext,\n      error = _parseInput.error; // If the phone number is not viable then return nothing.\n\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      if (error === 'TOO_SHORT') {\n        throw new ParseError('TOO_SHORT');\n      }\n\n      throw new ParseError('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n      country = _parsePhoneNumber.country,\n      nationalNumber = _parsePhoneNumber.nationalNumber,\n      countryCallingCode = _parsePhoneNumber.countryCallingCode,\n      countryCallingCodeSource = _parsePhoneNumber.countryCallingCodeSource,\n      carrierCode = _parsePhoneNumber.carrierCode;\n\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    phoneNumber.__countryCallingCodeSource = countryCallingCodeSource;\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  } // isInternational: countryCallingCode !== undefined\n\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\nfunction _extractFormattedPhoneNumber(text, extract, throwOnError) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new ParseError('TOO_LONG');\n    }\n\n    return;\n  }\n\n  if (extract === false) {\n    return text;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (startsAt < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\n\nfunction parseInput(text, v2, extract) {\n  // // Parse RFC 3966 phone number URI.\n  // if (text && text.indexOf('tel:') === 0) {\n  // \treturn parseRFC3966(text)\n  // }\n  // let number = extractFormattedPhoneNumber(text, extract, v2)\n  var number = extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(text, {\n    extractFormattedPhoneNumber: function extractFormattedPhoneNumber(text) {\n      return _extractFormattedPhoneNumber(text, extract, v2);\n    }\n  }); // If the phone number is not viable, then abort.\n\n  if (!number) {\n    return {};\n  }\n\n  if (!isViablePhoneNumber(number)) {\n    if (isViablePhoneNumberStart(number)) {\n      return {\n        error: 'TOO_SHORT'\n      };\n    }\n\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var withExtensionStripped = extractExtension(number);\n\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n      countryCallingCodeSource = _extractCountryCallin.countryCallingCodeSource,\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.\n\n\n  var country;\n\n  if (countryCallingCode) {\n    metadata.selectNumberingPlan(countryCallingCode);\n  } // If `formattedPhoneNumber` is passed in \"national\" format\n  // then `number` is defined and `countryCallingCode` is `undefined`.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n    metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n\n    if (defaultCountry) {\n      country = defaultCountry;\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n          country = '001';\n        }\n      }\n    }\n\n    countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);\n  } else return {};\n\n  if (!number) {\n    return {\n      countryCallingCodeSource: countryCallingCodeSource,\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var _extractNationalNumbe = extractNationalNumber(parseIncompletePhoneNumber(number), metadata),\n      nationalNumber = _extractNationalNumbe.nationalNumber,\n      carrierCode = _extractNationalNumbe.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = getCountryByCallingCode(countryCallingCode, nationalNumber, metadata);\n\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    countryCallingCodeSource: countryCallingCodeSource,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n//# sourceMappingURL=parse.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parse from './parse.js';\nexport default function parsePhoneNumberWithError(text, options, metadata) {\n  return parse(text, _objectSpread(_objectSpread({}, options), {}, {\n    v2: true\n  }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumberWithError_.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n// Extracts the following properties from function arguments:\n// * input `text`\n// * `options` object\n// * `metadata` JSON\nexport default function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n    if (arg_3) {\n      options = arg_2;\n      metadata = arg_3;\n    } else {\n      metadata = arg_2;\n    }\n  } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return _typeof(_) === 'object';\n};\n//# sourceMappingURL=normalizeArguments.js.map","import parsePhoneNumberWithError_ from './parsePhoneNumberWithError_.js';\nimport normalizeArguments from './normalizeArguments.js';\nexport default function parsePhoneNumberWithError() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumberWithError_(text, options, metadata);\n}\n//# sourceMappingURL=parsePhoneNumberWithError.js.map","import withMetadataArgument from './withMetadataArgument.js'\r\nimport { parsePhoneNumberWithError as _parsePhoneNumberWithError } from '../../core/index.js'\r\n\r\nexport function parsePhoneNumberWithError() {\r\n\treturn withMetadataArgument(_parsePhoneNumberWithError, arguments)\r\n}\r\n","import isValidNumber from '../isValid.js';\n/**\r\n * Checks if a given phone number is valid within a given region.\r\n * Is just an alias for `phoneNumber.isValid() && phoneNumber.country === country`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n */\n\nexport default function isValidNumberForRegion(input, country, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  return input.country === country && isValidNumber(input, options, metadata);\n}\n//# sourceMappingURL=isValidNumberForRegion_.js.map","import isViablePhoneNumber from '../helpers/isViablePhoneNumber.js';\nimport parseNumber from '../parse.js';\nimport _isValidNumberForRegion from './isValidNumberForRegion_.js'; // This function has been deprecated and is not exported as\n// `isValidPhoneNumberForCountry()` or `isValidPhoneNumberForRegion()`.\n//\n// The rationale is:\n//\n// * We don't use the \"region\" word, so \"country\" would be better.\n//\n// * It could be substituted with:\n//\n// ```js\n// export default function isValidPhoneNumberForCountry(phoneNumberString, country) {\n// \tconst phoneNumber = parsePhoneNumber(phoneNumberString, {\n// \t\tdefaultCountry: country,\n// \t\t// Demand that the entire input string must be a phone number.\n// \t\t// Otherwise, it would \"extract\" a phone number from an input string.\n// \t\textract: false\n// \t})\n// \tif (!phoneNumber) {\n// \t\treturn false\n// \t}\n// \tif (phoneNumber.country !== country) {\n// \t\treturn false\n// \t}\n// \treturn phoneNumber.isValid()\n// }\n// ```\n//\n// * Same function could be used for `isPossiblePhoneNumberForCountry()`\n//   by replacing `isValid()` with `isPossible()`.\n//\n// * The reason why this function is not exported is because its result is ambiguous.\n//   Suppose `false` is returned. It could mean any of:\n//   * Not a phone number.\n//   * The phone number is valid but belongs to another country or another calling code.\n//   * The phone number belongs to the correct country but is not valid digit-wise.\n//   All those three cases should be handled separately from a \"User Experience\" standpoint.\n//   Simply showing \"Invalid phone number\" error in all of those cases would be lazy UX.\n\nexport default function isValidNumberForRegion(number, country, metadata) {\n  if (typeof number !== 'string') {\n    throw new TypeError('number must be a string');\n  }\n\n  if (typeof country !== 'string') {\n    throw new TypeError('country must be a string');\n  } // `parse` extracts phone numbers from raw text,\n  // therefore it will cut off all \"garbage\" characters,\n  // while this `validate` function needs to verify\n  // that the phone number contains no \"garbage\"\n  // therefore the explicit `isViablePhoneNumber` check.\n\n\n  var input;\n\n  if (isViablePhoneNumber(number)) {\n    input = parseNumber(number, {\n      defaultCountry: country\n    }, metadata);\n  } else {\n    input = {};\n  }\n\n  return _isValidNumberForRegion(input, country, undefined, metadata);\n}\n//# sourceMappingURL=isValidNumberForRegion.js.map","import withMetadataArgument from '../min/exports/withMetadataArgument.js'\r\n\r\nimport _isValidNumberForRegion from '../es6/legacy/isValidNumberForRegion.js'\r\n\r\nexport function isValidNumberForRegion() {\r\n\treturn withMetadataArgument(_isValidNumberForRegion, arguments)\r\n}\r\n","import * as Yup from \"yup\";\nimport {\n  isValidNumberForRegion,\n  CountryCode,\n  parsePhoneNumberWithError,\n} from \"libphonenumber-js\";\n\ndeclare module \"yup\" {\n  export interface StringSchema {\n    /**\n     * Check for phone number validity.\n     *\n     * @param {CountryCode} [countryCode] The country code to check against.\n     * @param {Boolean} [strict=false] How strictly should it check.\n     * @param {String} [errorMessage=DEFAULT_MESSAGE] The error message to return if the validation fails.\n     */\n    phone(\n      countryCode?: CountryCode,\n      strict?: boolean,\n      errorMessage?: string\n    ): StringSchema;\n  }\n}\n\nconst YUP_PHONE_METHOD = \"phone\";\n\nYup.addMethod(\n  Yup.string,\n  YUP_PHONE_METHOD,\n  function yupPhone(\n    countryCode?: CountryCode,\n    strict: boolean = false,\n    errorMessage: string = \"\"\n  ) {\n    const errMsg =\n      typeof errorMessage === \"string\" && errorMessage\n        ? errorMessage\n        : countryCode\n        ? `\\${path} must be a valid phone number for region ${countryCode}`\n        : \"${path} must be a valid phone number.\";\n\n    // @ts-ignore\n    return this.test(YUP_PHONE_METHOD, errMsg, (value: string) => {\n      try {\n        const phoneNumber = parsePhoneNumberWithError(value, countryCode);\n\n        if (!phoneNumber.isPossible()) {\n          return false;\n        }\n\n        /* check if the countryCode provided should be used as\n          default country code or strictly followed\n        */\n        if (strict && countryCode) {\n          return isValidNumberForRegion(value, countryCode);\n        }\n\n        return phoneNumber.isValid();\n      } catch {\n        return false;\n      }\n    });\n  }\n);\n"],"names":["withMetadataArgument","func","_arguments","args","Array","prototype","slice","call","push","metadata","apply","ParseError","_classCallCheck","Object","Error","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","DASHES","SLASHES","DOTS","WHITESPACE","BRACKETS","TILDES","VALID_PUNCTUATION","PLUS_CHARS","a","b","pa","pb","i","na","Number","nb","isNaN","V3","V4","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","Metadata","validateMetadata","setVersion","_","countryCodes","countryCode","callingCode","NumberingPlan","globalMetadataObject","formats","getType","Format","FIRST_GROUP_ONLY_PREFIX_PATTERN","Type","types","is_object","type_of","_typeof","version","compare","RFC3966_EXTN_PREFIX","getExtensionDigitsPattern","extLimitAfterExplicitLabel","extLimitAfterLikelyLabel","extLimitAfterAmbiguousChar","extLimitWhenNotSure","possibleSeparatorsBetweenNumberAndExtLabel","possibleCharsAfterExtLabel","optionalExtnSuffix","explicitExtLabels","ambiguousExtLabels","ambiguousSeparator","possibleSeparatorsNumberExtLabelNoComma","autoDiallingAndExtLabelsFound","rfcExtn","explicitExtn","ambiguousExtn","americanStyleExtnWithSuffix","autoDiallingExtn","onlyCommasExtn","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_START_REG_EXP","VALID_PHONE_NUMBER_WITH_EXTENSION","createExtensionPattern","VALID_PHONE_NUMBER_PATTERN","number","EXTN_PATTERN","start","numberWithoutExtension","matches","ext","DIGITS","result","_createForOfIteratorHelperLoose","string","character","parsePhoneNumberCharacter","parseDigit","merged","element","checkNumberLengthForType","type_info","possible_lengths","type","mobile_type","mergeArrays","actual_length","nationalNumber","minimum_length","options","input","isPossibleNumber","checkNumberLength","text","NON_FIXED_LINE_PHONE_TYPES","matchesEntirely","isNumberTypeEqualTo","getNumberType","_metadata","possibleCountries","couldNationalNumberBelongToCountry","formattedNumber","FIRST_GROUP_PATTERN","useInternationalFormat","withNationalPrefix","carrierCode","format","applyInternationalSeparatorStyle","SINGLE_IDD_PREFIX_REG_EXP","countryMetadata","DEFAULT_OPTIONS","formatExtension","_objectSpread","countryCallingCode","formatNationalNumber","addExtension","formatRFC3966","formatIDD","chooseFormatForNumber","formatNationalNumberUsingFormat","formatAs","lastLeadingDigitsPattern","nationalNnumber","fromCountryCallingCode","getCountryCallingCode","iddPrefix","getIddPrefix","PhoneNumber","getCountryAndCountryCallingCode","country","getPossibleCountriesForNumber","v2","isValidNumber","phoneNumber","formatNumber","isCountryCode","CAPTURING_DIGIT_PATTERN","IDDPrefixPattern","matchedGroups","prefixPattern","prefixMatch","capturedGroupsCount","hasCapturedGroups","prefixBeforeNationalNumber","possiblePositionOfTheFirstCapturedGroup","possibleNationalPrefix","nationalPrefix","extractNationalNumberFromPossiblyIncompleteNumber","shouldHaveExtractedNationalPrefix","isPossibleIncompleteNationalNumber","possibleShorterNumber","extractNationalNumber","possibleShorterNationalNumber","numberWithoutIDD","stripIddPrefix","isNumberWithIddPrefix","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","shorterNumber","countryCallingCodeSource","nationalPhoneNumber","phone","USE_NON_GEOGRAPHIC_COUNTRY_CODE","getCountryByNationalNumber","PLUS_SIGN","RFC3966_VISUAL_SEPARATOR_","RFC3966_PHONE_DIGIT_","RFC3966_GLOBAL_NUMBER_DIGITS_","RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_","ALPHANUM_","RFC3966_DOMAINLABEL_","VALID_ALPHA_","RFC3966_TOPLABEL_","RFC3966_DOMAINNAME_","RFC3966_DOMAINNAME_PATTERN_","RFC3966_PREFIX_","RFC3966_PHONE_CONTEXT_","RFC3966_ISDN_SUBADDRESS_","indexOfPhoneContext","numberToExtractFrom","phoneContextStart","phoneContextEnd","phoneContext","extractFormattedPhoneNumber","extractPhoneContext","isPhoneContextValid","phoneNumberString","indexOfRfc3966Prefix","numberToParse","indexOfNationalNumber","indexOfIsdn","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","parseInput","formattedPhoneNumber","error","parsePhoneNumber","valid","possible","extract","startsAt","extractFormattedPhoneNumberFromPossibleRfc3966NumberUri","isViablePhoneNumber","isViablePhoneNumberStart","withExtensionStripped","extractExtension","extractCountryCallingCode","parseIncompletePhoneNumber","defaultCountry","defaultCallingCode","exactCountry","getCountryByCallingCode","parsePhoneNumberWithError","parse","arg_1","arg_2","arg_3","arg_4","isObject","normalizeArguments","parsePhoneNumberWithError_","_parsePhoneNumberWithError","arguments","isValidNumberForRegion","parseNumber","_isValidNumberForRegion","Yup"],"mappings":"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"}